{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proofSubmitter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fillId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fillHash",
          "type": "bytes32"
        }
      ],
      "name": "HashInvalidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "LPAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "LPRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fillId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "filler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RequestFilled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLP",
          "type": "address"
        }
      ],
      "name": "addAllowedLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedLPs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "targetReceiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fills",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "fillId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        }
      ],
      "name": "invalidateFill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proofSubmitter",
      "outputs": [
        {
          "internalType": "contract IProofSubmitter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLP",
          "type": "address"
        }
      ],
      "name": "removeAllowedLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/ivan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/access/Ownable.sol",
    "10": "contracts/contracts/FillManager.sol",
    "2": "/home/ivan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/IERC20.sol",
    "24": "contracts/interfaces/IProofSubmitter.sol",
    "4": "/home/ivan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/utils/SafeERC20.sol",
    "5": "/home/ivan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/Address.sol",
    "6": "/home/ivan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/Context.sol",
    "8": "contracts/contracts/BeamerUtils.sol"
  },
  "ast": {
    "absolutePath": "contracts/contracts/FillManager.sol",
    "exportedSymbols": {
      "Address": [
        4394
      ],
      "BeamerUtils": [
        87
      ],
      "Context": [
        4099
      ],
      "FillManager": [
        466
      ],
      "IERC20": [
        3141
      ],
      "IProofSubmitter": [
        3401
      ],
      "Ownable": [
        3037
      ],
      "SafeERC20": [
        3365
      ]
    },
    "id": 467,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 194,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:10"
      },
      {
        "absolutePath": "/home/ivan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/IERC20.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/IERC20.sol",
        "id": 195,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 467,
        "sourceUnit": 3142,
        "src": "58:84:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ivan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/utils/SafeERC20.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/utils/SafeERC20.sol",
        "id": 196,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 467,
        "sourceUnit": 3366,
        "src": "143:93:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ivan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/access/Ownable.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/access/Ownable.sol",
        "id": 197,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 467,
        "sourceUnit": 3038,
        "src": "237:80:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/interfaces/IProofSubmitter.sol",
        "file": "../interfaces/IProofSubmitter.sol",
        "id": 198,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 467,
        "sourceUnit": 3402,
        "src": "318:43:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/BeamerUtils.sol",
        "file": "./BeamerUtils.sol",
        "id": 199,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 467,
        "sourceUnit": 88,
        "src": "362:27:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 201,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3037,
              "src": "758:7:10"
            },
            "id": 202,
            "nodeType": "InheritanceSpecifier",
            "src": "758:7:10"
          }
        ],
        "canonicalName": "FillManager",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 200,
          "nodeType": "StructuredDocumentation",
          "src": "391:343:10",
          "text": "The fill manager.\n This contract is responsible for keeping track of filled requests. In addition to allowing\n agents to (eventually) prove that they filled requests, it also allows anyone to invalidate\n a claim that a request was filled.\n It is the only contract that agents need to interact with on the target chain."
        },
        "fullyImplemented": true,
        "id": 466,
        "linearizedBaseContracts": [
          466,
          3037,
          4099
        ],
        "name": "FillManager",
        "nameLocation": "743:11:10",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 206,
            "libraryName": {
              "id": 203,
              "name": "SafeERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3365,
              "src": "778:9:10"
            },
            "nodeType": "UsingForDirective",
            "src": "772:27:10",
            "typeName": {
              "id": 205,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 204,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3141,
                "src": "792:6:10"
              },
              "referencedDeclaration": 3141,
              "src": "792:6:10",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$3141",
                "typeString": "contract IERC20"
              }
            }
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 207,
              "nodeType": "StructuredDocumentation",
              "src": "805:96:10",
              "text": "Emitted when a request has been filled.\n .. seealso:: :sol:func:`fillRequest`"
            },
            "eventSelector": "036973204944f64cc25b32e5318bd0611f917fedcd9cb77a11651723db2c6323",
            "id": 221,
            "name": "RequestFilled",
            "nameLocation": "912:13:10",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 220,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 209,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "951:9:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 221,
                  "src": "935:25:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 208,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "935:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 211,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fillId",
                  "nameLocation": "978:6:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 221,
                  "src": "970:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 210,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "970:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 213,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sourceChainId",
                  "nameLocation": "1010:13:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 221,
                  "src": "994:29:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 212,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "994:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 215,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "targetTokenAddress",
                  "nameLocation": "1049:18:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 221,
                  "src": "1033:34:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 214,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1033:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 217,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "filler",
                  "nameLocation": "1085:6:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 221,
                  "src": "1077:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 216,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1077:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 219,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1109:6:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 221,
                  "src": "1101:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 218,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1101:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "925:196:10"
            },
            "src": "906:216:10"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 222,
              "nodeType": "StructuredDocumentation",
              "src": "1128:106:10",
              "text": "Emitted when a fill hash has been invalidated.\n .. seealso:: :sol:func:`invalidateFill`"
            },
            "eventSelector": "d708c5c6a823a3e0499d43d17cd8f42261ff3e464ebfec0ed0ff56533999e00d",
            "id": 230,
            "name": "HashInvalidated",
            "nameLocation": "1245:15:10",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 229,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 224,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestHash",
                  "nameLocation": "1286:11:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "1270:27:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 223,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1270:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 226,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "fillId",
                  "nameLocation": "1323:6:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "1307:22:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 225,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1307:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 228,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "fillHash",
                  "nameLocation": "1355:8:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 230,
                  "src": "1339:24:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 227,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1339:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1260:109:10"
            },
            "src": "1239:131:10"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 231,
              "nodeType": "StructuredDocumentation",
              "src": "1376:157:10",
              "text": "Emitted when a liquidity provider has been added to the set of allowed\n liquidity providers.\n .. seealso:: :sol:func:`addAllowedLP`"
            },
            "eventSelector": "c852021e30b95510f55086d8cc9bc5d15d20f2cb411766a7da04804f4ad2fba2",
            "id": 235,
            "name": "LPAdded",
            "nameLocation": "1544:7:10",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 234,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 233,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "lp",
                  "nameLocation": "1560:2:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "1552:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 232,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1552:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1551:12:10"
            },
            "src": "1538:26:10"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 236,
              "nodeType": "StructuredDocumentation",
              "src": "1570:164:10",
              "text": "Emitted when a liquidity provider has been removed from the set of allowed\n liquidity providers.\n .. seealso:: :sol:func:`removeAllowedLP`"
            },
            "eventSelector": "1abfc08c9d8e95dc2f77c443843422fe9ef89aafb40a5814f65e9c4f557f1faa",
            "id": 240,
            "name": "LPRemoved",
            "nameLocation": "1745:9:10",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 239,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 238,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "lp",
                  "nameLocation": "1763:2:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 240,
                  "src": "1755:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 237,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1755:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1754:12:10"
            },
            "src": "1739:28:10"
          },
          {
            "constant": false,
            "documentation": {
              "id": 241,
              "nodeType": "StructuredDocumentation",
              "src": "1773:74:10",
              "text": "The L1 :sol:contract:`Resolver` contract to be used for L1 resolution."
            },
            "functionSelector": "935beb1a",
            "id": 243,
            "mutability": "mutable",
            "name": "l1Resolver",
            "nameLocation": "1867:10:10",
            "nodeType": "VariableDeclaration",
            "scope": 466,
            "src": "1852:25:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 242,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1852:7:10",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 244,
              "nodeType": "StructuredDocumentation",
              "src": "1884:191:10",
              "text": "The proof submitter contract to be used for submitting L1 proofs.\n The specific implementation of the :sol:interface:`IProofSubmitter` interface\n is chain-dependent."
            },
            "functionSelector": "58753357",
            "id": 247,
            "mutability": "mutable",
            "name": "proofSubmitter",
            "nameLocation": "2103:14:10",
            "nodeType": "VariableDeclaration",
            "scope": 466,
            "src": "2080:37:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IProofSubmitter_$3401",
              "typeString": "contract IProofSubmitter"
            },
            "typeName": {
              "id": 246,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 245,
                "name": "IProofSubmitter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3401,
                "src": "2080:15:10"
              },
              "referencedDeclaration": 3401,
              "src": "2080:15:10",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IProofSubmitter_$3401",
                "typeString": "contract IProofSubmitter"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 248,
              "nodeType": "StructuredDocumentation",
              "src": "2124:39:10",
              "text": "Maps request hashes to fill hashes."
            },
            "functionSelector": "20158c44",
            "id": 252,
            "mutability": "mutable",
            "name": "fills",
            "nameLocation": "2203:5:10",
            "nodeType": "VariableDeclaration",
            "scope": 466,
            "src": "2168:40:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 251,
              "keyType": {
                "id": 249,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "2176:7:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "2168:27:10",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 250,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "2187:7:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 253,
              "nodeType": "StructuredDocumentation",
              "src": "2215:69:10",
              "text": "The set of liquidity providers that are allowed to fill requests."
            },
            "functionSelector": "35aeea7b",
            "id": 257,
            "mutability": "mutable",
            "name": "allowedLPs",
            "nameLocation": "2321:10:10",
            "nodeType": "VariableDeclaration",
            "scope": 466,
            "src": "2289:42:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 256,
              "keyType": {
                "id": 254,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2297:7:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2289:24:10",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 255,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "2308:4:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 275,
              "nodeType": "Block",
              "src": "2530:100:10",
              "statements": [
                {
                  "expression": {
                    "id": 267,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 265,
                      "name": "l1Resolver",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 243,
                      "src": "2540:10:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 266,
                      "name": "_l1Resolver",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 260,
                      "src": "2553:11:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2540:24:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 268,
                  "nodeType": "ExpressionStatement",
                  "src": "2540:24:10"
                },
                {
                  "expression": {
                    "id": 273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 269,
                      "name": "proofSubmitter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 247,
                      "src": "2574:14:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IProofSubmitter_$3401",
                        "typeString": "contract IProofSubmitter"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 271,
                          "name": "_proofSubmitter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 262,
                          "src": "2607:15:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 270,
                        "name": "IProofSubmitter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3401,
                        "src": "2591:15:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IProofSubmitter_$3401_$",
                          "typeString": "type(contract IProofSubmitter)"
                        }
                      },
                      "id": 272,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2591:32:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IProofSubmitter_$3401",
                        "typeString": "contract IProofSubmitter"
                      }
                    },
                    "src": "2574:49:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IProofSubmitter_$3401",
                      "typeString": "contract IProofSubmitter"
                    }
                  },
                  "id": 274,
                  "nodeType": "ExpressionStatement",
                  "src": "2574:49:10"
                }
              ]
            },
            "documentation": {
              "id": 258,
              "nodeType": "StructuredDocumentation",
              "src": "2338:129:10",
              "text": "Constructor.\n @param _l1Resolver The L1 resolver contract.\n @param _proofSubmitter The proof submitter."
            },
            "id": 276,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 263,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 260,
                  "mutability": "mutable",
                  "name": "_l1Resolver",
                  "nameLocation": "2492:11:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 276,
                  "src": "2484:19:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 259,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2484:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 262,
                  "mutability": "mutable",
                  "name": "_proofSubmitter",
                  "nameLocation": "2513:15:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 276,
                  "src": "2505:23:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 261,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2505:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2483:46:10"
            },
            "returnParameters": {
              "id": 264,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2530:0:10"
            },
            "scope": 466,
            "src": "2472:158:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 384,
              "nodeType": "Block",
              "src": "3595:1022:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 293,
                          "name": "allowedLPs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 257,
                          "src": "3613:10:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 296,
                        "indexExpression": {
                          "expression": {
                            "id": 294,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3624:3:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 295,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "3624:10:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3613:22:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "53656e646572206e6f742077686974656c6973746564",
                        "id": 297,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3637:24:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f99e75415b1b454aa42d5742acc0aa4650deb74a78c4554f7cf35ac8cc3d1f37",
                          "typeString": "literal_string \"Sender not whitelisted\""
                        },
                        "value": "Sender not whitelisted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f99e75415b1b454aa42d5742acc0aa4650deb74a78c4554f7cf35ac8cc3d1f37",
                          "typeString": "literal_string \"Sender not whitelisted\""
                        }
                      ],
                      "id": 292,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3605:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 298,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3605:57:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 299,
                  "nodeType": "ExpressionStatement",
                  "src": "3605:57:10"
                },
                {
                  "assignments": [
                    301
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 301,
                      "mutability": "mutable",
                      "name": "requestHash",
                      "nameLocation": "3680:11:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 384,
                      "src": "3672:19:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 300,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3672:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 312,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 304,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 279,
                        "src": "3737:9:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 305,
                        "name": "sourceChainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 281,
                        "src": "3760:13:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 306,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "3787:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 307,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "chainid",
                        "nodeType": "MemberAccess",
                        "src": "3787:13:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 308,
                        "name": "targetTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 283,
                        "src": "3814:18:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 309,
                        "name": "targetReceiverAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 285,
                        "src": "3846:21:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 310,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 287,
                        "src": "3881:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 302,
                        "name": "BeamerUtils",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87,
                        "src": "3694:11:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_BeamerUtils_$87_$",
                          "typeString": "type(library BeamerUtils)"
                        }
                      },
                      "id": 303,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "createRequestHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 36,
                      "src": "3694:29:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (uint256,uint256,uint256,address,address,uint256) pure returns (bytes32)"
                      }
                    },
                    "id": 311,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3694:203:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3672:225:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 321,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 314,
                            "name": "fills",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 252,
                            "src": "3916:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                              "typeString": "mapping(bytes32 => bytes32)"
                            }
                          },
                          "id": 316,
                          "indexExpression": {
                            "id": 315,
                            "name": "requestHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 301,
                            "src": "3922:11:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3916:18:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 319,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3946:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 318,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3938:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": {
                              "id": 317,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "3938:7:10",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 320,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3938:10:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "3916:32:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "416c72656164792066696c6c6564",
                        "id": 322,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3950:16:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2f1fdd45b3b51c31df82ed6b4ad08141730b73e5c15da80ef36a62b2e6a9c27f",
                          "typeString": "literal_string \"Already filled\""
                        },
                        "value": "Already filled"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2f1fdd45b3b51c31df82ed6b4ad08141730b73e5c15da80ef36a62b2e6a9c27f",
                          "typeString": "literal_string \"Already filled\""
                        }
                      ],
                      "id": 313,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3908:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3908:59:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 324,
                  "nodeType": "ExpressionStatement",
                  "src": "3908:59:10"
                },
                {
                  "assignments": [
                    327
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 327,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "3985:5:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 384,
                      "src": "3978:12:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$3141",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 326,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 325,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3141,
                          "src": "3978:6:10"
                        },
                        "referencedDeclaration": 3141,
                        "src": "3978:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$3141",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 331,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 329,
                        "name": "targetTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 283,
                        "src": "4000:18:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 328,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3141,
                      "src": "3993:6:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$3141_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 330,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3993:26:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$3141",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3978:41:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 335,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4052:3:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 336,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4052:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 337,
                        "name": "targetReceiverAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 285,
                        "src": "4064:21:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 338,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 287,
                        "src": "4087:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 332,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 327,
                        "src": "4029:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$3141",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 334,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3198,
                      "src": "4029:22:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$3141_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$3141_$",
                        "typeString": "function (contract IERC20,address,address,uint256)"
                      }
                    },
                    "id": 339,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4029:65:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 340,
                  "nodeType": "ExpressionStatement",
                  "src": "4029:65:10"
                },
                {
                  "assignments": [
                    345
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 345,
                      "mutability": "mutable",
                      "name": "proofReceipt",
                      "nameLocation": "4141:12:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 384,
                      "src": "4105:48:10",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProofReceipt_$3373_memory_ptr",
                        "typeString": "struct IProofSubmitter.ProofReceipt"
                      },
                      "typeName": {
                        "id": 344,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 343,
                          "name": "IProofSubmitter.ProofReceipt",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3373,
                          "src": "4105:28:10"
                        },
                        "referencedDeclaration": 3373,
                        "src": "4105:28:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProofReceipt_$3373_storage_ptr",
                          "typeString": "struct IProofSubmitter.ProofReceipt"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 354,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 348,
                        "name": "l1Resolver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 243,
                        "src": "4196:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 349,
                        "name": "sourceChainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 281,
                        "src": "4208:13:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 350,
                        "name": "requestHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 301,
                        "src": "4223:11:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "expression": {
                          "id": 351,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4236:3:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 352,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4236:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 346,
                        "name": "proofSubmitter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 247,
                        "src": "4156:14:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProofSubmitter_$3401",
                          "typeString": "contract IProofSubmitter"
                        }
                      },
                      "id": 347,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "submitProof",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3388,
                      "src": "4156:39:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_address_$returns$_t_struct$_ProofReceipt_$3373_memory_ptr_$",
                        "typeString": "function (address,uint256,bytes32,address) external returns (struct IProofSubmitter.ProofReceipt memory)"
                      }
                    },
                    "id": 353,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4156:91:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProofReceipt_$3373_memory_ptr",
                      "typeString": "struct IProofSubmitter.ProofReceipt memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4105:142:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 359,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 356,
                            "name": "proofReceipt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 345,
                            "src": "4265:12:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProofReceipt_$3373_memory_ptr",
                              "typeString": "struct IProofSubmitter.ProofReceipt memory"
                            }
                          },
                          "id": 357,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "fillId",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3370,
                          "src": "4265:19:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 358,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4288:1:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "4265:24:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5375626d697474696e672070726f6f662064617461206661696c6564",
                        "id": 360,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4291:30:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_aa10e0d7830ed97727b31f476e68911fae4e78de943bf1d83c23a658ad591999",
                          "typeString": "literal_string \"Submitting proof data failed\""
                        },
                        "value": "Submitting proof data failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_aa10e0d7830ed97727b31f476e68911fae4e78de943bf1d83c23a658ad591999",
                          "typeString": "literal_string \"Submitting proof data failed\""
                        }
                      ],
                      "id": 355,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4257:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 361,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4257:65:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 362,
                  "nodeType": "ExpressionStatement",
                  "src": "4257:65:10"
                },
                {
                  "expression": {
                    "id": 368,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 363,
                        "name": "fills",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 252,
                        "src": "4333:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                          "typeString": "mapping(bytes32 => bytes32)"
                        }
                      },
                      "id": 365,
                      "indexExpression": {
                        "id": 364,
                        "name": "requestHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 301,
                        "src": "4339:11:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4333:18:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 366,
                        "name": "proofReceipt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 345,
                        "src": "4354:12:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProofReceipt_$3373_memory_ptr",
                          "typeString": "struct IProofSubmitter.ProofReceipt memory"
                        }
                      },
                      "id": 367,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "fillHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3372,
                      "src": "4354:21:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "4333:42:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 369,
                  "nodeType": "ExpressionStatement",
                  "src": "4333:42:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 371,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 279,
                        "src": "4418:9:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 372,
                          "name": "proofReceipt",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 345,
                          "src": "4441:12:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProofReceipt_$3373_memory_ptr",
                            "typeString": "struct IProofSubmitter.ProofReceipt memory"
                          }
                        },
                        "id": 373,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "fillId",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3370,
                        "src": "4441:19:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 374,
                        "name": "sourceChainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 281,
                        "src": "4474:13:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 375,
                        "name": "targetTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 283,
                        "src": "4501:18:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 376,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4533:3:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 377,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4533:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 378,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 287,
                        "src": "4557:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 370,
                      "name": "RequestFilled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 221,
                      "src": "4391:13:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,bytes32,uint256,address,address,uint256)"
                      }
                    },
                    "id": 379,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4391:182:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 380,
                  "nodeType": "EmitStatement",
                  "src": "4386:187:10"
                },
                {
                  "expression": {
                    "expression": {
                      "id": 381,
                      "name": "proofReceipt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 345,
                      "src": "4591:12:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProofReceipt_$3373_memory_ptr",
                        "typeString": "struct IProofSubmitter.ProofReceipt memory"
                      }
                    },
                    "id": 382,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "fillId",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 3370,
                    "src": "4591:19:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 291,
                  "id": 383,
                  "nodeType": "Return",
                  "src": "4584:26:10"
                }
              ]
            },
            "documentation": {
              "id": 277,
              "nodeType": "StructuredDocumentation",
              "src": "2636:743:10",
              "text": "Fill the specified request.\n The caller must have approved at least ``amount`` tokens for :sol:contract:`FillManager`\n with the ERC20 token contract at ``targetTokenAddress``. The tokens will be immediately\n sent to ``targetReceiverAddress`` and a fill proof will be generated, which can later\n be used to trigger L1 resolution, if needed.\n @param requestId The request ID.\n @param sourceChainId The source chain ID.\n @param targetTokenAddress Address of the token contract on the target chain.\n @param targetReceiverAddress Recipient address on the target chain.\n @param amount Amount of tokens to transfer. Does not include fees.\n @return The fill ID."
            },
            "functionSelector": "efd39926",
            "id": 385,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fillRequest",
            "nameLocation": "3393:11:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 288,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 279,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "3422:9:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 385,
                  "src": "3414:17:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 278,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3414:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 281,
                  "mutability": "mutable",
                  "name": "sourceChainId",
                  "nameLocation": "3449:13:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 385,
                  "src": "3441:21:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 280,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3441:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 283,
                  "mutability": "mutable",
                  "name": "targetTokenAddress",
                  "nameLocation": "3480:18:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 385,
                  "src": "3472:26:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 282,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3472:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 285,
                  "mutability": "mutable",
                  "name": "targetReceiverAddress",
                  "nameLocation": "3516:21:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 385,
                  "src": "3508:29:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 284,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3508:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 287,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3555:6:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 385,
                  "src": "3547:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 286,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3547:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3404:163:10"
            },
            "returnParameters": {
              "id": 291,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 290,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 385,
                  "src": "3586:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 289,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3586:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3585:9:10"
            },
            "scope": 466,
            "src": "3384:1233:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 427,
              "nodeType": "Block",
              "src": "5410:361:10",
              "statements": [
                {
                  "assignments": [
                    396
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 396,
                      "mutability": "mutable",
                      "name": "fillHash",
                      "nameLocation": "5428:8:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 427,
                      "src": "5420:16:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 395,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5420:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 402,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 399,
                        "name": "requestHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 388,
                        "src": "5466:11:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 400,
                        "name": "fillId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 390,
                        "src": "5479:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 397,
                        "name": "BeamerUtils",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87,
                        "src": "5439:11:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_BeamerUtils_$87_$",
                          "typeString": "type(library BeamerUtils)"
                        }
                      },
                      "id": 398,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "createFillHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 54,
                      "src": "5439:26:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32,bytes32) pure returns (bytes32)"
                      }
                    },
                    "id": 401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5439:47:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5420:66:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 408,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 404,
                            "name": "fills",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 252,
                            "src": "5504:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                              "typeString": "mapping(bytes32 => bytes32)"
                            }
                          },
                          "id": 406,
                          "indexExpression": {
                            "id": 405,
                            "name": "requestHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 388,
                            "src": "5510:11:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5504:18:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 407,
                          "name": "fillHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 396,
                          "src": "5526:8:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "5504:30:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "46696c6c20686173682076616c6964",
                        "id": 409,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5536:17:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b7539ef75054f34447d71418e74bd74a55ef7241911c217aa3e6574f554a9723",
                          "typeString": "literal_string \"Fill hash valid\""
                        },
                        "value": "Fill hash valid"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b7539ef75054f34447d71418e74bd74a55ef7241911c217aa3e6574f554a9723",
                          "typeString": "literal_string \"Fill hash valid\""
                        }
                      ],
                      "id": 403,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5496:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 410,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5496:58:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 411,
                  "nodeType": "ExpressionStatement",
                  "src": "5496:58:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 415,
                        "name": "l1Resolver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 243,
                        "src": "5611:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 416,
                        "name": "sourceChainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 392,
                        "src": "5635:13:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 417,
                        "name": "requestHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 388,
                        "src": "5662:11:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 418,
                        "name": "fillId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 390,
                        "src": "5687:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 412,
                        "name": "proofSubmitter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 247,
                        "src": "5564:14:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProofSubmitter_$3401",
                          "typeString": "contract IProofSubmitter"
                        }
                      },
                      "id": 414,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "submitNonFillProof",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3400,
                      "src": "5564:33:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (address,uint256,bytes32,bytes32) external"
                      }
                    },
                    "id": 419,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5564:139:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 420,
                  "nodeType": "ExpressionStatement",
                  "src": "5564:139:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 422,
                        "name": "requestHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 388,
                        "src": "5734:11:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 423,
                        "name": "fillId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 390,
                        "src": "5747:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 424,
                        "name": "fillHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 396,
                        "src": "5755:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 421,
                      "name": "HashInvalidated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 230,
                      "src": "5718:15:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (bytes32,bytes32,bytes32)"
                      }
                    },
                    "id": 425,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5718:46:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 426,
                  "nodeType": "EmitStatement",
                  "src": "5713:51:10"
                }
              ]
            },
            "documentation": {
              "id": 386,
              "nodeType": "StructuredDocumentation",
              "src": "4623:659:10",
              "text": "Invalidate the specified fill.\n In cases that a claim has been made on the source chain, but without a corresponding fill\n actually happening on the target chain, anyone can call this function to mark the fill\n as invalid. This is typically followed by a challenge game on the source chain, which\n the dishonest claimer is guaranteed to lose as soon as the information about the invalid\n fill (so called \"non-fill proof\") is propagated to the source chain via L1 resolution.\n @param requestHash The request hash.\n @param fillId The fill ID.\n @param sourceChainId The source chain ID."
            },
            "functionSelector": "03fc4c37",
            "id": 428,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "invalidateFill",
            "nameLocation": "5296:14:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 393,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 388,
                  "mutability": "mutable",
                  "name": "requestHash",
                  "nameLocation": "5328:11:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 428,
                  "src": "5320:19:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 387,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5320:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 390,
                  "mutability": "mutable",
                  "name": "fillId",
                  "nameLocation": "5357:6:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 428,
                  "src": "5349:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 389,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5349:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 392,
                  "mutability": "mutable",
                  "name": "sourceChainId",
                  "nameLocation": "5381:13:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 428,
                  "src": "5373:21:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 391,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5373:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5310:90:10"
            },
            "returnParameters": {
              "id": 394,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5410:0:10"
            },
            "scope": 466,
            "src": "5287:484:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 446,
              "nodeType": "Block",
              "src": "6110:71:10",
              "statements": [
                {
                  "expression": {
                    "id": 440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 436,
                        "name": "allowedLPs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 257,
                        "src": "6120:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 438,
                      "indexExpression": {
                        "id": 437,
                        "name": "newLP",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 431,
                        "src": "6131:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6120:17:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 439,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6140:4:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "6120:24:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 441,
                  "nodeType": "ExpressionStatement",
                  "src": "6120:24:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 443,
                        "name": "newLP",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 431,
                        "src": "6168:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 442,
                      "name": "LPAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 235,
                      "src": "6160:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 444,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6160:14:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 445,
                  "nodeType": "EmitStatement",
                  "src": "6155:19:10"
                }
              ]
            },
            "documentation": {
              "id": 429,
              "nodeType": "StructuredDocumentation",
              "src": "5777:274:10",
              "text": "Add a liquidity provider to the set of allowed liquidity providers.\n Only allowed liquidity providers can fill requests.\n .. note:: This function can only be called by the contract owner.\n @param newLP The liquidity provider."
            },
            "functionSelector": "1cb2eaf9",
            "id": 447,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 434,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 433,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2979,
                  "src": "6100:9:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "6100:9:10"
              }
            ],
            "name": "addAllowedLP",
            "nameLocation": "6065:12:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 432,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 431,
                  "mutability": "mutable",
                  "name": "newLP",
                  "nameLocation": "6086:5:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 447,
                  "src": "6078:13:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 430,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6078:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6077:15:10"
            },
            "returnParameters": {
              "id": 435,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6110:0:10"
            },
            "scope": 466,
            "src": "6056:125:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 464,
              "nodeType": "Block",
              "src": "6460:73:10",
              "statements": [
                {
                  "expression": {
                    "id": 458,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "6470:24:10",
                    "subExpression": {
                      "baseExpression": {
                        "id": 455,
                        "name": "allowedLPs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 257,
                        "src": "6477:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 457,
                      "indexExpression": {
                        "id": 456,
                        "name": "oldLP",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 450,
                        "src": "6488:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6477:17:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 459,
                  "nodeType": "ExpressionStatement",
                  "src": "6470:24:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 461,
                        "name": "oldLP",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 450,
                        "src": "6520:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 460,
                      "name": "LPRemoved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 240,
                      "src": "6510:9:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 462,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6510:16:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 463,
                  "nodeType": "EmitStatement",
                  "src": "6505:21:10"
                }
              ]
            },
            "documentation": {
              "id": 448,
              "nodeType": "StructuredDocumentation",
              "src": "6187:211:10",
              "text": "Remove a liquidity provider from the set of allowed liquidity providers.\n .. note:: This function can only be called by the contract owner.\n @param oldLP The liquidity provider."
            },
            "functionSelector": "afc4827b",
            "id": 465,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 453,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 452,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2979,
                  "src": "6450:9:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "6450:9:10"
              }
            ],
            "name": "removeAllowedLP",
            "nameLocation": "6412:15:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 451,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 450,
                  "mutability": "mutable",
                  "name": "oldLP",
                  "nameLocation": "6436:5:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "6428:13:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 449,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6428:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6427:15:10"
            },
            "returnParameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6460:0:10"
            },
            "scope": 466,
            "src": "6403:130:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 467,
        "src": "734:5801:10",
        "usedErrors": []
      }
    ],
    "src": "32:6504:10"
  },
  "bytecode": "608060405234801561001057600080fd5b50604051610d89380380610d8983398101604081905261002f916100d5565b61003833610069565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610108565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d057600080fd5b919050565b600080604083850312156100e857600080fd5b6100f1836100b9565b91506100ff602084016100b9565b90509250929050565b610c72806101176000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101675780638da5cb5b1461016f578063935beb1a14610180578063afc4827b14610193578063efd39926146101a6578063f2fde38b146101b957600080fd5b806303fc4c37146100ae5780631cb2eaf9146100c357806320158c44146100d657806335aeea7b14610109578063587533571461013c575b600080fd5b6100c16100bc366004610a43565b6101cc565b005b6100c16100d1366004610a8b565b6102f6565b6100f66100e4366004610aa6565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b61012c610117366004610a8b565b60046020526000908152604090205460ff1681565b6040519015158152602001610100565b60025461014f906001600160a01b031681565b6040516001600160a01b039091168152602001610100565b6100c161037b565b6000546001600160a01b031661014f565b60015461014f906001600160a01b031681565b6100c16101a1366004610a8b565b6103b1565b6100f66101b4366004610abf565b61042c565b6100c16101c7366004610a8b565b61069e565b60408051602080820186905281830185905282518083038401815260609092018352815191810191909120600086815260039092529190205481900361024b5760405162461bcd60e51b815260206004820152600f60248201526e119a5b1b081a185cda081d985b1a59608a1b60448201526064015b60405180910390fd5b600254600154604051637760a2e560e01b81526001600160a01b039182166004820152602481018590526044810187905260648101869052911690637760a2e590608401600060405180830381600087803b1580156102a957600080fd5b505af11580156102bd573d6000803e3d6000fd5b505050508083857fd708c5c6a823a3e0499d43d17cd8f42261ff3e464ebfec0ed0ff56533999e00d60405160405180910390a450505050565b6000546001600160a01b031633146103205760405162461bcd60e51b815260040161024290610b0d565b6001600160a01b038116600081815260046020908152604091829020805460ff1916600117905590519182527fc852021e30b95510f55086d8cc9bc5d15d20f2cb411766a7da04804f4ad2fba291015b60405180910390a150565b6000546001600160a01b031633146103a55760405162461bcd60e51b815260040161024290610b0d565b6103af6000610739565b565b6000546001600160a01b031633146103db5760405162461bcd60e51b815260040161024290610b0d565b6001600160a01b038116600081815260046020908152604091829020805460ff1916905590519182527f1abfc08c9d8e95dc2f77c443843422fe9ef89aafb40a5814f65e9c4f557f1faa9101610370565b3360009081526004602052604081205460ff166104845760405162461bcd60e51b815260206004820152601660248201527514d95b99195c881b9bdd081dda1a5d195b1a5cdd195960521b6044820152606401610242565b604080516020808201899052818301889052466060808401919091526bffffffffffffffffffffffff1988821b811660808501529087901b16609483015260a88083018690528351808403909101815260c89092019092528051910120600090600081815260036020526040902054909150156105345760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e48199a5b1b195960921b6044820152606401610242565b8461054a6001600160a01b038216338787610789565b600254600154604051631ec0f4f960e31b81526001600160a01b039182166004820152602481018a905260448101859052336064820152600092919091169063f607a7c89060840160408051808303816000875af11580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190610b42565b80519091506000036106285760405162461bcd60e51b815260206004820152601c60248201527f5375626d697474696e672070726f6f662064617461206661696c6564000000006044820152606401610242565b6020818101516000858152600383526040908190209190915582518151908152339281019290925281018690526001600160a01b0388169089908b907f036973204944f64cc25b32e5318bd0611f917fedcd9cb77a11651723db2c63239060600160405180910390a45198975050505050505050565b6000546001600160a01b031633146106c85760405162461bcd60e51b815260040161024290610b0d565b6001600160a01b03811661072d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610242565b61073681610739565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526107e39085906107e9565b50505050565b600061083e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108c09092919063ffffffff16565b8051909150156108bb578080602001905181019061085c9190610b9f565b6108bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610242565b505050565b60606108cf84846000856108d9565b90505b9392505050565b60608247101561093a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610242565b6001600160a01b0385163b6109915760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610242565b600080866001600160a01b031685876040516109ad9190610bed565b60006040518083038185875af1925050503d80600081146109ea576040519150601f19603f3d011682016040523d82523d6000602084013e6109ef565b606091505b50915091506109ff828286610a0a565b979650505050505050565b60608315610a195750816108d2565b825115610a295782518084602001fd5b8160405162461bcd60e51b81526004016102429190610c09565b600080600060608486031215610a5857600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b0381168114610a8657600080fd5b919050565b600060208284031215610a9d57600080fd5b6108d282610a6f565b600060208284031215610ab857600080fd5b5035919050565b600080600080600060a08688031215610ad757600080fd5b8535945060208601359350610aee60408701610a6f565b9250610afc60608701610a6f565b949793965091946080013592915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060408284031215610b5457600080fd5b6040516040810181811067ffffffffffffffff82111715610b8557634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b600060208284031215610bb157600080fd5b815180151581146108d257600080fd5b60005b83811015610bdc578181015183820152602001610bc4565b838111156107e35750506000910152565b60008251610bff818460208701610bc1565b9190910192915050565b6020815260008251806020840152610c28816040850160208701610bc1565b601f01601f1916919091016040019291505056fea264697066735822122064d3eeb9e723a9ba88f4726b12568b49a404af7eacd24895015c040a00783a5464736f6c634300080d0033",
  "bytecodeSha1": "2f3cdf0eacdb9332952b2e22785e368f604cb105",
  "compiler": {
    "evm_version": "london",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "FillManager",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable.transferOwnership": {
          "39": [
            2006,
            2028,
            true
          ]
        }
      },
      "10": {
        "FillManager.fillRequest": {
          "33": [
            3613,
            3635,
            true
          ],
          "34": [
            3916,
            3948,
            true
          ],
          "35": [
            4265,
            4289,
            true
          ]
        },
        "FillManager.invalidateFill": {
          "32": [
            5504,
            5534,
            true
          ]
        }
      },
      "2": {},
      "24": {},
      "4": {
        "SafeERC20._callOptionalReturn": {
          "40": [
            3735,
            3756,
            false
          ],
          "41": [
            3819,
            3849,
            true
          ]
        }
      },
      "5": {
        "Address.functionCallWithValue": {
          "36": [
            5145,
            5175,
            true
          ]
        },
        "Address.verifyCallResult": {
          "37": [
            7735,
            7742,
            false
          ],
          "38": [
            7876,
            7897,
            false
          ]
        }
      },
      "6": {},
      "8": {}
    },
    "statements": {
      "0": {
        "Ownable._transferOwnership": {
          "21": [
            2378,
            2395
          ],
          "22": [
            2405,
            2450
          ]
        },
        "Ownable.owner": {
          "0": [
            1101,
            1114
          ]
        },
        "Ownable.renounceOwnership": {
          "8": [
            1732,
            1762
          ]
        },
        "Ownable.transferOwnership": {
          "19": [
            1998,
            2071
          ],
          "20": [
            2081,
            2109
          ]
        }
      },
      "10": {
        "FillManager.addAllowedLP": {
          "6": [
            6120,
            6144
          ],
          "7": [
            6155,
            6174
          ]
        },
        "FillManager.fillRequest": {
          "11": [
            3605,
            3662
          ],
          "13": [
            3908,
            3967
          ],
          "14": [
            4029,
            4094
          ],
          "15": [
            4257,
            4322
          ],
          "16": [
            4333,
            4375
          ],
          "17": [
            4386,
            4573
          ],
          "18": [
            4584,
            4610
          ]
        },
        "FillManager.invalidateFill": {
          "2": [
            5496,
            5554
          ],
          "3": [
            5564,
            5703
          ],
          "4": [
            5713,
            5764
          ]
        },
        "FillManager.removeAllowedLP": {
          "9": [
            6470,
            6494
          ],
          "10": [
            6505,
            6526
          ]
        }
      },
      "2": {},
      "24": {},
      "4": {
        "SafeERC20._callOptionalReturn": {
          "24": [
            3811,
            3896
          ]
        },
        "SafeERC20.safeTransferFrom": {
          "23": [
            1050,
            1146
          ]
        }
      },
      "5": {
        "Address.functionCall": {
          "25": [
            4018,
            4077
          ]
        },
        "Address.functionCallWithValue": {
          "26": [
            5137,
            5218
          ],
          "28": [
            5228,
            5288
          ],
          "29": [
            5382,
            5440
          ]
        },
        "Address.isContract": {
          "27": [
            1458,
            1488
          ]
        },
        "Address.verifyCallResult": {
          "30": [
            7758,
            7775
          ],
          "31": [
            8202,
            8222
          ]
        }
      },
      "6": {
        "Context._msgSender": {
          "5": [
            712,
            729
          ]
        }
      },
      "8": {
        "BeamerUtils.createFillHash": {
          "1": [
            874,
            929
          ]
        },
        "BeamerUtils.createRequestHash": {
          "12": [
            424,
            730
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.5.0/Address",
    "BeamerUtils",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/IERC20",
    "IProofSubmitter",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/Ownable",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/SafeERC20"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101675780638da5cb5b1461016f578063935beb1a14610180578063afc4827b14610193578063efd39926146101a6578063f2fde38b146101b957600080fd5b806303fc4c37146100ae5780631cb2eaf9146100c357806320158c44146100d657806335aeea7b14610109578063587533571461013c575b600080fd5b6100c16100bc366004610a43565b6101cc565b005b6100c16100d1366004610a8b565b6102f6565b6100f66100e4366004610aa6565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b61012c610117366004610a8b565b60046020526000908152604090205460ff1681565b6040519015158152602001610100565b60025461014f906001600160a01b031681565b6040516001600160a01b039091168152602001610100565b6100c161037b565b6000546001600160a01b031661014f565b60015461014f906001600160a01b031681565b6100c16101a1366004610a8b565b6103b1565b6100f66101b4366004610abf565b61042c565b6100c16101c7366004610a8b565b61069e565b60408051602080820186905281830185905282518083038401815260609092018352815191810191909120600086815260039092529190205481900361024b5760405162461bcd60e51b815260206004820152600f60248201526e119a5b1b081a185cda081d985b1a59608a1b60448201526064015b60405180910390fd5b600254600154604051637760a2e560e01b81526001600160a01b039182166004820152602481018590526044810187905260648101869052911690637760a2e590608401600060405180830381600087803b1580156102a957600080fd5b505af11580156102bd573d6000803e3d6000fd5b505050508083857fd708c5c6a823a3e0499d43d17cd8f42261ff3e464ebfec0ed0ff56533999e00d60405160405180910390a450505050565b6000546001600160a01b031633146103205760405162461bcd60e51b815260040161024290610b0d565b6001600160a01b038116600081815260046020908152604091829020805460ff1916600117905590519182527fc852021e30b95510f55086d8cc9bc5d15d20f2cb411766a7da04804f4ad2fba291015b60405180910390a150565b6000546001600160a01b031633146103a55760405162461bcd60e51b815260040161024290610b0d565b6103af6000610739565b565b6000546001600160a01b031633146103db5760405162461bcd60e51b815260040161024290610b0d565b6001600160a01b038116600081815260046020908152604091829020805460ff1916905590519182527f1abfc08c9d8e95dc2f77c443843422fe9ef89aafb40a5814f65e9c4f557f1faa9101610370565b3360009081526004602052604081205460ff166104845760405162461bcd60e51b815260206004820152601660248201527514d95b99195c881b9bdd081dda1a5d195b1a5cdd195960521b6044820152606401610242565b604080516020808201899052818301889052466060808401919091526bffffffffffffffffffffffff1988821b811660808501529087901b16609483015260a88083018690528351808403909101815260c89092019092528051910120600090600081815260036020526040902054909150156105345760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e48199a5b1b195960921b6044820152606401610242565b8461054a6001600160a01b038216338787610789565b600254600154604051631ec0f4f960e31b81526001600160a01b039182166004820152602481018a905260448101859052336064820152600092919091169063f607a7c89060840160408051808303816000875af11580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190610b42565b80519091506000036106285760405162461bcd60e51b815260206004820152601c60248201527f5375626d697474696e672070726f6f662064617461206661696c6564000000006044820152606401610242565b6020818101516000858152600383526040908190209190915582518151908152339281019290925281018690526001600160a01b0388169089908b907f036973204944f64cc25b32e5318bd0611f917fedcd9cb77a11651723db2c63239060600160405180910390a45198975050505050505050565b6000546001600160a01b031633146106c85760405162461bcd60e51b815260040161024290610b0d565b6001600160a01b03811661072d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610242565b61073681610739565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526107e39085906107e9565b50505050565b600061083e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108c09092919063ffffffff16565b8051909150156108bb578080602001905181019061085c9190610b9f565b6108bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610242565b505050565b60606108cf84846000856108d9565b90505b9392505050565b60608247101561093a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610242565b6001600160a01b0385163b6109915760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610242565b600080866001600160a01b031685876040516109ad9190610bed565b60006040518083038185875af1925050503d80600081146109ea576040519150601f19603f3d011682016040523d82523d6000602084013e6109ef565b606091505b50915091506109ff828286610a0a565b979650505050505050565b60608315610a195750816108d2565b825115610a295782518084602001fd5b8160405162461bcd60e51b81526004016102429190610c09565b600080600060608486031215610a5857600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b0381168114610a8657600080fd5b919050565b600060208284031215610a9d57600080fd5b6108d282610a6f565b600060208284031215610ab857600080fd5b5035919050565b600080600080600060a08688031215610ad757600080fd5b8535945060208601359350610aee60408701610a6f565b9250610afc60608701610a6f565b949793965091946080013592915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060408284031215610b5457600080fd5b6040516040810181811067ffffffffffffffff82111715610b8557634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b600060208284031215610bb157600080fd5b815180151581146108d257600080fd5b60005b83811015610bdc578181015183820152602001610bc4565b838111156107e35750506000910152565b60008251610bff818460208701610bc1565b9190910192915050565b6020815260008251806020840152610c28816040850160208701610bc1565b601f01601f1916919091016040019291505056fea264697066735822122064d3eeb9e723a9ba88f4726b12568b49a404af7eacd24895015c040a00783a5464736f6c634300080d0033",
  "deployedSourceMap": "734:5801:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5287:484;;;;;;:::i;:::-;;:::i;:::-;;6056:125;;;;;;:::i;:::-;;:::i;2168:40::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1035:25:25;;;1023:2;1008:18;2168:40:10;;;;;;;;2289:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1236:14:25;;1229:22;1211:41;;1199:2;1184:18;2289:42:10;1071:187:25;2080:37:10;;;;;-1:-1:-1;;;;;2080:37:10;;;;;;-1:-1:-1;;;;;1451:32:25;;;1433:51;;1421:2;1406:18;2080:37:10;1263:227:25;1668:101:0;;;:::i;1036:85::-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;1036:85;;1852:25:10;;;;;-1:-1:-1;;;;;1852:25:10;;;6403:130;;;;;;:::i;:::-;;:::i;3384:1233::-;;;;;;:::i;:::-;;:::i;1918:198:0:-;;;;;;:::i;:::-;;:::i;5287:484:10:-;891:37:8;;;;;;;6326:19:25;;;6361:12;;;6354:28;;;891:37:8;;;;;;;;;6398:12:25;;;;891:37:8;;881:48;;;;;;;;;-1:-1:-1;5504:18:10;;;:5;:18;;;;;;;:30;;;5496:58;;;;-1:-1:-1;;;5496:58:10;;2376:2:25;5496:58:10;;;2358:21:25;2415:2;2395:18;;;2388:30;-1:-1:-1;;;2434:18:25;;;2427:45;2489:18;;5496:58:10;;;;;;;;;5564:14;;;5611:10;5564:139;;-1:-1:-1;;;5564:139:10;;-1:-1:-1;;;;;5611:10:10;;;5564:139;;;2749:51:25;2816:18;;;2809:34;;;2859:18;;;2852:34;;;2902:18;;;2895:34;;;5564:14:10;;;:33;;2721:19:25;;5564:139:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5755:8;5747:6;5734:11;5718:46;;;;;;;;;;5410:361;5287:484;;;:::o;6056:125::-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;6120:17:10;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;;:24;;-1:-1:-1;;6120:24:10::1;6140:4;6120:24;::::0;;6160:14;;1433:51:25;;;6160:14:10::1;::::0;1406:18:25;6160:14:10::1;;;;;;;;6056:125:::0;:::o;1668:101:0:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;6403:130:10:-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;6477:17:10;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;;6470:24;;-1:-1:-1;;6470:24:10::1;::::0;;6510:16;;1433:51:25;;;6510:16:10::1;::::0;1406:18:25;6510:16:10::1;1263:227:25::0;3384:1233:10;3624:10;3586:7;3613:22;;;:10;:22;;;;;;;;3605:57;;;;-1:-1:-1;;;3605:57:10;;3503:2:25;3605:57:10;;;3485:21:25;3542:2;3522:18;;;3515:30;-1:-1:-1;;;3561:18:25;;;3554:52;3623:18;;3605:57:10;3301:346:25;3605:57:10;470:246:8;;;;;;;6690:19:25;;;6725:12;;;6718:28;;;3787:13:10;6762:12:25;;;;6755:28;;;;-1:-1:-1;;6867:15:25;;;6863:24;;6849:12;;;6842:46;6923:15;;;;6919:24;6904:13;;;6897:47;6960:13;;;;6953:29;;;470:246:8;;;;;;;;;;6998:13:25;;;;470:246:8;;;443:287;;;;;3672:19:10;;3946:1;3916:18;;;:5;:18;;;;;;3672:225;;-1:-1:-1;3916:32:10;3908:59;;;;-1:-1:-1;;;3908:59:10;;3854:2:25;3908:59:10;;;3836:21:25;3893:2;3873:18;;;3866:30;-1:-1:-1;;;3912:18:25;;;3905:44;3966:18;;3908:59:10;3652:338:25;3908:59:10;4000:18;4029:65;-1:-1:-1;;;;;4029:22:10;;4052:10;4064:21;4087:6;4029:22;:65::i;:::-;4156:14;;;4196:10;4156:91;;-1:-1:-1;;;4156:91:10;;-1:-1:-1;;;;;4196:10:10;;;4156:91;;;4264:34:25;4314:18;;;4307:34;;;4357:18;;;4350:34;;;4236:10:10;4400:18:25;;;4393:43;4105:48:10;;4156:14;;;;;:39;;4198:19:25;;4156:91:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4265:19;;4105:142;;-1:-1:-1;4265:19:10;:24;4257:65;;;;-1:-1:-1;;;4257:65:10;;5257:2:25;4257:65:10;;;5239:21:25;5296:2;5276:18;;;5269:30;5335;5315:18;;;5308:58;5383:18;;4257:65:10;5055:352:25;4257:65:10;4354:21;;;;;4333:18;;;;:5;:18;;;;;;;:42;;;;4441:19;;4391:182;;5614:25:25;;;4533:10:10;5655:18:25;;;5648:60;;;;5724:18;;5717:34;;;-1:-1:-1;;;;;4391:182:10;;;4474:13;;4418:9;;4391:182;;5602:2:25;5587:18;4391:182:10;;;;;;;4591:19;;3384:1233;-1:-1:-1;;;;;;;;3384:1233:10:o;1918:198:0:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;5964:2:25;1998:73:0::1;::::0;::::1;5946:21:25::0;6003:2;5983:18;;;5976:30;6042:34;6022:18;;;6015:62;-1:-1:-1;;;6093:18:25;;;6086:36;6139:19;;1998:73:0::1;5762:402:25::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;2270:187::-;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;912:241:4:-;1077:68;;;-1:-1:-1;;;;;7280:15:25;;;1077:68:4;;;7262:34:25;7332:15;;7312:18;;;7305:43;7364:18;;;;7357:34;;;1077:68:4;;;;;;;;;;7197:18:25;;;;1077:68:4;;;;;;;;-1:-1:-1;;;;;1077:68:4;-1:-1:-1;;;1077:68:4;;;1050:96;;1070:5;;1050:19;:96::i;:::-;912:241;;;;:::o;3207:706::-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;-1:-1:-1;;;;;3652:27:4;;;:69;;;;;:::i;:::-;3735:17;;3626:95;;-1:-1:-1;3735:21:4;3731:176;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;-1:-1:-1;;;3811:85:4;;7886:2:25;3811:85:4;;;7868:21:25;7925:2;7905:18;;;7898:30;7964:34;7944:18;;;7937:62;-1:-1:-1;;;8015:18:25;;;8008:40;8065:19;;3811:85:4;7684:406:25;3811:85:4;3277:636;3207:706;;:::o;3861:223:5:-;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;;3861:223;;;;;;:::o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:5;;8297:2:25;5137:81:5;;;8279:21:25;8336:2;8316:18;;;8309:30;8375:34;8355:18;;;8348:62;-1:-1:-1;;;8426:18:25;;;8419:36;8472:19;;5137:81:5;8095:402:25;5137:81:5;-1:-1:-1;;;;;1465:19:5;;;5228:60;;;;-1:-1:-1;;;5228:60:5;;8704:2:25;5228:60:5;;;8686:21:25;8743:2;8723:18;;;8716:30;8782:31;8762:18;;;8755:59;8831:18;;5228:60:5;8502:353:25;5228:60:5;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:5;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:5:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:5;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:5;;;;;;;;:::i;14:316:25:-;91:6;99;107;160:2;148:9;139:7;135:23;131:32;128:52;;;176:1;173;166:12;128:52;-1:-1:-1;;199:23:25;;;269:2;254:18;;241:32;;-1:-1:-1;320:2:25;305:18;;;292:32;;14:316;-1:-1:-1;14:316:25:o;335:173::-;403:20;;-1:-1:-1;;;;;452:31:25;;442:42;;432:70;;498:1;495;488:12;432:70;335:173;;;:::o;513:186::-;572:6;625:2;613:9;604:7;600:23;596:32;593:52;;;641:1;638;631:12;593:52;664:29;683:9;664:29;:::i;704:180::-;763:6;816:2;804:9;795:7;791:23;787:32;784:52;;;832:1;829;822:12;784:52;-1:-1:-1;855:23:25;;704:180;-1:-1:-1;704:180:25:o;1703:466::-;1798:6;1806;1814;1822;1830;1883:3;1871:9;1862:7;1858:23;1854:33;1851:53;;;1900:1;1897;1890:12;1851:53;1936:9;1923:23;1913:33;;1993:2;1982:9;1978:18;1965:32;1955:42;;2016:38;2050:2;2039:9;2035:18;2016:38;:::i;:::-;2006:48;;2073:38;2107:2;2096:9;2092:18;2073:38;:::i;:::-;1703:466;;;;-1:-1:-1;1703:466:25;;2158:3;2143:19;2130:33;;1703:466;-1:-1:-1;;1703:466:25:o;2940:356::-;3142:2;3124:21;;;3161:18;;;3154:30;3220:34;3215:2;3200:18;;3193:62;3287:2;3272:18;;2940:356::o;4447:603::-;4547:6;4600:2;4588:9;4579:7;4575:23;4571:32;4568:52;;;4616:1;4613;4606:12;4568:52;4649:2;4643:9;4691:2;4683:6;4679:15;4760:6;4748:10;4745:22;4724:18;4712:10;4709:34;4706:62;4703:185;;;4810:10;4805:3;4801:20;4798:1;4791:31;4845:4;4842:1;4835:15;4873:4;4870:1;4863:15;4703:185;4904:2;4897:22;4943:16;;4928:32;;5014:2;4999:18;;;4993:25;4976:15;;;4969:50;;;;-1:-1:-1;4935:6:25;4447:603;-1:-1:-1;4447:603:25:o;7402:277::-;7469:6;7522:2;7510:9;7501:7;7497:23;7493:32;7490:52;;;7538:1;7535;7528:12;7490:52;7570:9;7564:16;7623:5;7616:13;7609:21;7602:5;7599:32;7589:60;;7645:1;7642;7635:12;8860:258;8932:1;8942:113;8956:6;8953:1;8950:13;8942:113;;;9032:11;;;9026:18;9013:11;;;9006:39;8978:2;8971:10;8942:113;;;9073:6;9070:1;9067:13;9064:48;;;-1:-1:-1;;9108:1:25;9090:16;;9083:27;8860:258::o;9123:274::-;9252:3;9290:6;9284:13;9306:53;9352:6;9347:3;9340:4;9332:6;9328:17;9306:53;:::i;:::-;9375:16;;;;;9123:274;-1:-1:-1;;9123:274:25:o;9402:383::-;9551:2;9540:9;9533:21;9514:4;9583:6;9577:13;9626:6;9621:2;9610:9;9606:18;9599:34;9642:66;9701:6;9696:2;9685:9;9681:18;9676:2;9668:6;9664:15;9642:66;:::i;:::-;9769:2;9748:15;-1:-1:-1;;9744:29:25;9729:45;;;;9776:2;9725:54;;9402:383;-1:-1:-1;;9402:383:25:o",
  "language": "Solidity",
  "natspec": {
    "events": {
      "HashInvalidated(bytes32,bytes32,bytes32)": {
        "notice": "Emitted when a fill hash has been invalidated. .. seealso:: :sol:func:`invalidateFill`"
      },
      "LPAdded(address)": {
        "notice": "Emitted when a liquidity provider has been added to the set of allowed liquidity providers. .. seealso:: :sol:func:`addAllowedLP`"
      },
      "LPRemoved(address)": {
        "notice": "Emitted when a liquidity provider has been removed from the set of allowed liquidity providers. .. seealso:: :sol:func:`removeAllowedLP`"
      },
      "RequestFilled(uint256,bytes32,uint256,address,address,uint256)": {
        "notice": "Emitted when a request has been filled. .. seealso:: :sol:func:`fillRequest`"
      }
    },
    "kind": "dev",
    "methods": {
      "addAllowedLP(address)": {
        "notice": "Add a liquidity provider to the set of allowed liquidity providers. Only allowed liquidity providers can fill requests. .. note:: This function can only be called by the contract owner.",
        "params": {
          "newLP": "The liquidity provider."
        }
      },
      "allowedLPs(address)": {
        "notice": "The set of liquidity providers that are allowed to fill requests."
      },
      "constructor": {
        "notice": "Constructor.",
        "params": {
          "_l1Resolver": "The L1 resolver contract.",
          "_proofSubmitter": "The proof submitter."
        }
      },
      "fillRequest(uint256,uint256,address,address,uint256)": {
        "notice": "Fill the specified request. The caller must have approved at least ``amount`` tokens for :sol:contract:`FillManager` with the ERC20 token contract at ``targetTokenAddress``. The tokens will be immediately sent to ``targetReceiverAddress`` and a fill proof will be generated, which can later be used to trigger L1 resolution, if needed.",
        "params": {
          "amount": "Amount of tokens to transfer. Does not include fees.",
          "requestId": "The request ID.",
          "sourceChainId": "The source chain ID.",
          "targetReceiverAddress": "Recipient address on the target chain.",
          "targetTokenAddress": "Address of the token contract on the target chain."
        },
        "returns": {
          "_0": "The fill ID."
        }
      },
      "fills(bytes32)": {
        "notice": "Maps request hashes to fill hashes."
      },
      "invalidateFill(bytes32,bytes32,uint256)": {
        "notice": "Invalidate the specified fill. In cases that a claim has been made on the source chain, but without a corresponding fill actually happening on the target chain, anyone can call this function to mark the fill as invalid. This is typically followed by a challenge game on the source chain, which the dishonest claimer is guaranteed to lose as soon as the information about the invalid fill (so called \"non-fill proof\") is propagated to the source chain via L1 resolution.",
        "params": {
          "fillId": "The fill ID.",
          "requestHash": "The request hash.",
          "sourceChainId": "The source chain ID."
        }
      },
      "l1Resolver()": {
        "notice": "The L1 :sol:contract:`Resolver` contract to be used for L1 resolution."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proofSubmitter()": {
        "notice": "The proof submitter contract to be used for submitting L1 proofs. The specific implementation of the :sol:interface:`IProofSubmitter` interface is chain-dependent."
      },
      "removeAllowedLP(address)": {
        "notice": "Remove a liquidity provider from the set of allowed liquidity providers. .. note:: This function can only be called by the contract owner.",
        "params": {
          "oldLP": "The liquidity provider."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "notice": "The fill manager. This contract is responsible for keeping track of filled requests. In addition to allowing agents to (eventually) prove that they filled requests, it also allows anyone to invalidate a claim that a request was filled. It is the only contract that agents need to interact with on the target chain.",
    "version": 1
  },
  "offset": [
    734,
    6535
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x935BEB1A EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0xAFC4827B EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0xEFD39926 EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3FC4C37 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x1CB2EAF9 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x20158C44 EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0x35AEEA7B EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x58753357 EQ PUSH2 0x13C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0xA43 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC1 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8B JUMP JUMPDEST PUSH2 0x2F6 JUMP JUMPDEST PUSH2 0xF6 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA6 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12C PUSH2 0x117 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x100 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x14F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x100 JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x37B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x14F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8B JUMP JUMPDEST PUSH2 0x3B1 JUMP JUMPDEST PUSH2 0xF6 PUSH2 0x1B4 CALLDATASIZE PUSH1 0x4 PUSH2 0xABF JUMP JUMPDEST PUSH2 0x42C JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x1C7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8B JUMP JUMPDEST PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 DUP4 ADD DUP6 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD DUP2 SWAP1 SUB PUSH2 0x24B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x119A5B1B081A185CDA081D985B1A59 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7760A2E5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 AND SWAP1 PUSH4 0x7760A2E5 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP4 DUP6 PUSH32 0xD708C5C6A823A3E0499D43D17CD8F42261FF3E464EBFEC0ED0FF56533999E00D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x242 SWAP1 PUSH2 0xB0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xC852021E30B95510F55086D8CC9BC5D15D20F2CB411766A7DA04804F4AD2FBA2 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x242 SWAP1 PUSH2 0xB0D JUMP JUMPDEST PUSH2 0x3AF PUSH1 0x0 PUSH2 0x739 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x242 SWAP1 PUSH2 0xB0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x1ABFC08C9D8E95DC2F77C443843422FE9EF89AAFB40A5814F65E9C4F557F1FAA SWAP2 ADD PUSH2 0x370 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14D95B99195C881B9BDD081DDA1A5D195B1A5CDD1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x242 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE DUP2 DUP4 ADD DUP9 SWAP1 MSTORE CHAINID PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP9 DUP3 SHL DUP2 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 DUP8 SWAP1 SHL AND PUSH1 0x94 DUP4 ADD MSTORE PUSH1 0xA8 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC8 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x105B1C9958591E48199A5B1B1959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x242 JUMP JUMPDEST DUP5 PUSH2 0x54A PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER DUP8 DUP8 PUSH2 0x789 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1EC0F4F9 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE CALLER PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xF607A7C8 SWAP1 PUSH1 0x84 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D4 SWAP2 SWAP1 PUSH2 0xB42 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SUB PUSH2 0x628 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5375626D697474696E672070726F6F662064617461206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x242 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 DUP4 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE DUP3 MLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP10 SWAP1 DUP12 SWAP1 PUSH32 0x36973204944F64CC25B32E5318BD0611F917FEDCD9CB77A11651723DB2C6323 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 MLOAD SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x242 SWAP1 PUSH2 0xB0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x72D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x242 JUMP JUMPDEST PUSH2 0x736 DUP2 PUSH2 0x739 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x7E3 SWAP1 DUP6 SWAP1 PUSH2 0x7E9 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x83E DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8C0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x8BB JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x85C SWAP2 SWAP1 PUSH2 0xB9F JUMP JUMPDEST PUSH2 0x8BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x242 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x8CF DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x8D9 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x93A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x242 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x991 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x242 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x9AD SWAP2 SWAP1 PUSH2 0xBED JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9EA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9EF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x9FF DUP3 DUP3 DUP7 PUSH2 0xA0A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xA19 JUMPI POP DUP2 PUSH2 0x8D2 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xA29 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x242 SWAP2 SWAP1 PUSH2 0xC09 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8D2 DUP3 PUSH2 0xA6F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xAD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0xAEE PUSH1 0x40 DUP8 ADD PUSH2 0xA6F JUMP JUMPDEST SWAP3 POP PUSH2 0xAFC PUSH1 0x60 DUP8 ADD PUSH2 0xA6F JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xB85 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBDC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBC4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x7E3 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xBFF DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xBC1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC28 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xBC1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0xD3EEB9E723 0xA9 0xBA DUP9 DELEGATECALL PUSH19 0x6B12568B49A404AF7EACD24895015C040A0078 GASPRICE SLOAD PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        734,
        6535
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "CALLVALUE",
      "path": "10"
    },
    "6": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "8": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "12": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "REVERT",
      "path": "10"
    },
    "16": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "17": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "POP",
      "path": "10"
    },
    "18": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "21": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "LT",
      "path": "10"
    },
    "22": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA9"
    },
    "25": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "26": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "29": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "SHR",
      "path": "10"
    },
    "32": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "33": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x715018A6"
    },
    "38": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "GT",
      "path": "10"
    },
    "39": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "43": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "44": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x715018A6"
    },
    "49": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "50": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x167"
    },
    "53": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "54": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "55": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x8DA5CB5B"
    },
    "60": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "61": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x16F"
    },
    "64": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "65": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "66": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x935BEB1A"
    },
    "71": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "72": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x180"
    },
    "75": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "76": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "77": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xAFC4827B"
    },
    "82": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "83": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x193"
    },
    "86": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "87": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "88": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xEFD39926"
    },
    "93": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "94": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1A6"
    },
    "97": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "98": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "99": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xF2FDE38B"
    },
    "104": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "105": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1B9"
    },
    "108": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "109": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "112": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "REVERT",
      "path": "10"
    },
    "113": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "114": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "115": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x3FC4C37"
    },
    "120": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "121": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xAE"
    },
    "124": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "125": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "126": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x1CB2EAF9"
    },
    "131": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "132": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xC3"
    },
    "135": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "136": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "137": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x20158C44"
    },
    "142": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "143": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xD6"
    },
    "146": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "147": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "148": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x35AEEA7B"
    },
    "153": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "154": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x109"
    },
    "157": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "158": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "159": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x58753357"
    },
    "164": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "EQ",
      "path": "10"
    },
    "165": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x13C"
    },
    "168": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "169": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "170": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "172": {
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "DUP1",
      "path": "10"
    },
    "173": {
      "first_revert": true,
      "fn": null,
      "offset": [
        734,
        6535
      ],
      "op": "REVERT",
      "path": "10"
    },
    "174": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "175": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xC1"
    },
    "178": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xBC"
    },
    "181": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "182": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "184": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA43"
    },
    "187": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        5287,
        5771
      ],
      "op": "JUMP",
      "path": "10"
    },
    "188": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "189": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1CC"
    },
    "192": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        5287,
        5771
      ],
      "op": "JUMP",
      "path": "10"
    },
    "193": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "194": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "STOP",
      "path": "10"
    },
    "195": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "196": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xC1"
    },
    "199": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xD1"
    },
    "202": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "203": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "205": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA8B"
    },
    "208": {
      "fn": "FillManager.addAllowedLP",
      "jump": "i",
      "offset": [
        6056,
        6181
      ],
      "op": "JUMP",
      "path": "10"
    },
    "209": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "210": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F6"
    },
    "213": {
      "fn": "FillManager.addAllowedLP",
      "jump": "i",
      "offset": [
        6056,
        6181
      ],
      "op": "JUMP",
      "path": "10"
    },
    "214": {
      "offset": [
        2168,
        2208
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "215": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xF6"
    },
    "218": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xE4"
    },
    "221": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "222": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "224": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xAA6"
    },
    "227": {
      "fn": "FillManager.addAllowedLP",
      "jump": "i",
      "offset": [
        2168,
        2208
      ],
      "op": "JUMP",
      "path": "10"
    },
    "228": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "229": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3"
    },
    "231": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "233": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "234": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "236": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "237": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "DUP2",
      "path": "10"
    },
    "238": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "239": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "241": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "242": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "243": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "244": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "DUP2",
      "path": "10"
    },
    "245": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "JUMP",
      "path": "10"
    },
    "246": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "247": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "249": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "250": {
      "op": "SWAP1"
    },
    "251": {
      "op": "DUP2"
    },
    "252": {
      "op": "MSTORE"
    },
    "253": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "255": {
      "op": "ADD"
    },
    "256": {
      "offset": [
        2168,
        2208
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "257": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "259": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "260": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "DUP1",
      "path": "10"
    },
    "261": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "262": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "SUB",
      "path": "10"
    },
    "263": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "264": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2168,
        2208
      ],
      "op": "RETURN",
      "path": "10"
    },
    "265": {
      "offset": [
        2289,
        2331
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "266": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x12C"
    },
    "269": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x117"
    },
    "272": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "273": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "275": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA8B"
    },
    "278": {
      "fn": "FillManager.addAllowedLP",
      "jump": "i",
      "offset": [
        2289,
        2331
      ],
      "op": "JUMP",
      "path": "10"
    },
    "279": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "280": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "282": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "284": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "285": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "287": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "288": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "DUP2",
      "path": "10"
    },
    "289": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "290": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "292": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "293": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "294": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "295": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "297": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "AND",
      "path": "10"
    },
    "298": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "DUP2",
      "path": "10"
    },
    "299": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "JUMP",
      "path": "10"
    },
    "300": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "301": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "303": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2289,
        2331
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "304": {
      "op": "SWAP1"
    },
    "305": {
      "op": "ISZERO"
    },
    "306": {
      "op": "ISZERO"
    },
    "307": {
      "op": "DUP2"
    },
    "308": {
      "op": "MSTORE"
    },
    "309": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "311": {
      "op": "ADD"
    },
    "312": {
      "offset": [
        2289,
        2331
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "315": {
      "op": "JUMP"
    },
    "316": {
      "offset": [
        2080,
        2117
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "317": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2080,
        2117
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x2"
    },
    "319": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2080,
        2117
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "320": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2080,
        2117
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x14F"
    },
    "323": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2080,
        2117
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "324": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "326": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "328": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "330": {
      "op": "SHL"
    },
    "331": {
      "op": "SUB"
    },
    "332": {
      "offset": [
        2080,
        2117
      ],
      "op": "AND",
      "path": "10"
    },
    "333": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2080,
        2117
      ],
      "op": "DUP2",
      "path": "10"
    },
    "334": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2080,
        2117
      ],
      "op": "JUMP",
      "path": "10"
    },
    "335": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2080,
        2117
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "336": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2080,
        2117
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "338": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        2080,
        2117
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "339": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "341": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "343": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "345": {
      "op": "SHL"
    },
    "346": {
      "op": "SUB"
    },
    "347": {
      "op": "SWAP1"
    },
    "348": {
      "op": "SWAP2"
    },
    "349": {
      "op": "AND"
    },
    "350": {
      "op": "DUP2"
    },
    "351": {
      "op": "MSTORE"
    },
    "352": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "354": {
      "op": "ADD"
    },
    "355": {
      "offset": [
        2080,
        2117
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "358": {
      "op": "JUMP"
    },
    "359": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "360": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC1"
    },
    "363": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x37B"
    },
    "366": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "367": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "368": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "370": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0",
      "statement": 0
    },
    "371": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "373": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "375": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "377": {
      "op": "SHL"
    },
    "378": {
      "op": "SUB"
    },
    "379": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "380": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F"
    },
    "383": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "JUMP",
      "path": "0"
    },
    "384": {
      "offset": [
        1852,
        1877
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "385": {
      "fn": "Ownable.owner",
      "offset": [
        1852,
        1877
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "387": {
      "fn": "Ownable.owner",
      "offset": [
        1852,
        1877
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "388": {
      "fn": "Ownable.owner",
      "offset": [
        1852,
        1877
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x14F"
    },
    "391": {
      "fn": "Ownable.owner",
      "offset": [
        1852,
        1877
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "392": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "394": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "396": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "398": {
      "op": "SHL"
    },
    "399": {
      "op": "SUB"
    },
    "400": {
      "offset": [
        1852,
        1877
      ],
      "op": "AND",
      "path": "10"
    },
    "401": {
      "fn": "Ownable.owner",
      "offset": [
        1852,
        1877
      ],
      "op": "DUP2",
      "path": "10"
    },
    "402": {
      "fn": "Ownable.owner",
      "offset": [
        1852,
        1877
      ],
      "op": "JUMP",
      "path": "10"
    },
    "403": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6403,
        6533
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "404": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6403,
        6533
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xC1"
    },
    "407": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6403,
        6533
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1A1"
    },
    "410": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6403,
        6533
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "411": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6403,
        6533
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "413": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6403,
        6533
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA8B"
    },
    "416": {
      "fn": "FillManager.removeAllowedLP",
      "jump": "i",
      "offset": [
        6403,
        6533
      ],
      "op": "JUMP",
      "path": "10"
    },
    "417": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6403,
        6533
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "418": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6403,
        6533
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3B1"
    },
    "421": {
      "fn": "FillManager.removeAllowedLP",
      "jump": "i",
      "offset": [
        6403,
        6533
      ],
      "op": "JUMP",
      "path": "10"
    },
    "422": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "423": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xF6"
    },
    "426": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1B4"
    },
    "429": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "430": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "432": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xABF"
    },
    "435": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3384,
        4617
      ],
      "op": "JUMP",
      "path": "10"
    },
    "436": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "437": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x42C"
    },
    "440": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3384,
        4617
      ],
      "op": "JUMP",
      "path": "10"
    },
    "441": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "442": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC1"
    },
    "445": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C7"
    },
    "448": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "449": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "451": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA8B"
    },
    "454": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "455": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "456": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x69E"
    },
    "459": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "460": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "461": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 1,
      "value": "0x40"
    },
    "463": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "DUP1",
      "path": "8"
    },
    "464": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "465": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "467": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "DUP1",
      "path": "8"
    },
    "468": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "DUP3",
      "path": "8"
    },
    "469": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "ADD",
      "path": "8"
    },
    "470": {
      "op": "DUP7"
    },
    "471": {
      "op": "SWAP1"
    },
    "472": {
      "op": "MSTORE"
    },
    "473": {
      "op": "DUP2"
    },
    "474": {
      "op": "DUP4"
    },
    "475": {
      "op": "ADD"
    },
    "476": {
      "op": "DUP6"
    },
    "477": {
      "op": "SWAP1"
    },
    "478": {
      "op": "MSTORE"
    },
    "479": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "DUP3",
      "path": "8"
    },
    "480": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "481": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "DUP1",
      "path": "8"
    },
    "482": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "DUP4",
      "path": "8"
    },
    "483": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "SUB",
      "path": "8"
    },
    "484": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "DUP5",
      "path": "8"
    },
    "485": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "ADD",
      "path": "8"
    },
    "486": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "DUP2",
      "path": "8"
    },
    "487": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "488": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "490": {
      "op": "SWAP1"
    },
    "491": {
      "op": "SWAP3"
    },
    "492": {
      "op": "ADD"
    },
    "493": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "DUP4",
      "path": "8"
    },
    "494": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        891,
        928
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "495": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        881,
        929
      ],
      "op": "DUP2",
      "path": "8"
    },
    "496": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        881,
        929
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "497": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        881,
        929
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "498": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        881,
        929
      ],
      "op": "DUP2",
      "path": "8"
    },
    "499": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        881,
        929
      ],
      "op": "ADD",
      "path": "8"
    },
    "500": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        881,
        929
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "501": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        881,
        929
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "502": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        881,
        929
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "503": {
      "fn": "BeamerUtils.createFillHash",
      "offset": [
        881,
        929
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "504": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "506": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "DUP7",
      "path": "10",
      "statement": 2
    },
    "507": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "DUP2",
      "path": "10"
    },
    "508": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "509": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5509
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3"
    },
    "511": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "512": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "513": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "514": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "515": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "516": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "517": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5522
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "518": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5534
      ],
      "op": "DUP2",
      "path": "10"
    },
    "519": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5534
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "520": {
      "branch": 32,
      "fn": "FillManager.invalidateFill",
      "offset": [
        5504,
        5534
      ],
      "op": "SUB",
      "path": "10"
    },
    "521": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x24B"
    },
    "524": {
      "branch": 32,
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "525": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "527": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "528": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "532": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "534": {
      "op": "SHL"
    },
    "535": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "DUP2",
      "path": "10"
    },
    "536": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "537": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "539": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "541": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "DUP3",
      "path": "10"
    },
    "542": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "ADD",
      "path": "10"
    },
    "543": {
      "op": "MSTORE"
    },
    "544": {
      "op": "PUSH1",
      "value": "0xF"
    },
    "546": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "548": {
      "op": "DUP3"
    },
    "549": {
      "op": "ADD"
    },
    "550": {
      "op": "MSTORE"
    },
    "551": {
      "op": "PUSH15",
      "value": "0x119A5B1B081A185CDA081D985B1A59"
    },
    "567": {
      "op": "PUSH1",
      "value": "0x8A"
    },
    "569": {
      "op": "SHL"
    },
    "570": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "572": {
      "op": "DUP3"
    },
    "573": {
      "op": "ADD"
    },
    "574": {
      "op": "MSTORE"
    },
    "575": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "577": {
      "op": "ADD"
    },
    "578": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "579": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "581": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "582": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "DUP1",
      "path": "10"
    },
    "583": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "584": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "SUB",
      "path": "10"
    },
    "585": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "586": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "10"
    },
    "587": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5496,
        5554
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "588": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5578
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 3,
      "value": "0x2"
    },
    "590": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5578
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "591": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5578
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "593": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5611,
        5621
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "594": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "596": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "597": {
      "op": "PUSH4",
      "value": "0x7760A2E5"
    },
    "602": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "604": {
      "op": "SHL"
    },
    "605": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP2",
      "path": "10"
    },
    "606": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "607": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "609": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "611": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "613": {
      "op": "SHL"
    },
    "614": {
      "op": "SUB"
    },
    "615": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5611,
        5621
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "616": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5611,
        5621
      ],
      "op": "DUP3",
      "path": "10"
    },
    "617": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5611,
        5621
      ],
      "op": "AND",
      "path": "10"
    },
    "618": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "620": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP3",
      "path": "10"
    },
    "621": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "ADD",
      "path": "10"
    },
    "622": {
      "op": "MSTORE"
    },
    "623": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "625": {
      "op": "DUP2"
    },
    "626": {
      "op": "ADD"
    },
    "627": {
      "op": "DUP6"
    },
    "628": {
      "op": "SWAP1"
    },
    "629": {
      "op": "MSTORE"
    },
    "630": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "632": {
      "op": "DUP2"
    },
    "633": {
      "op": "ADD"
    },
    "634": {
      "op": "DUP8"
    },
    "635": {
      "op": "SWAP1"
    },
    "636": {
      "op": "MSTORE"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "639": {
      "op": "DUP2"
    },
    "640": {
      "op": "ADD"
    },
    "641": {
      "op": "DUP7"
    },
    "642": {
      "op": "SWAP1"
    },
    "643": {
      "op": "MSTORE"
    },
    "644": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5578
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "645": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5578
      ],
      "op": "AND",
      "path": "10"
    },
    "646": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5578
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "647": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5597
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x7760A2E5"
    },
    "652": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5597
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "653": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "655": {
      "op": "ADD"
    },
    "656": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "658": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "660": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "661": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP1",
      "path": "10"
    },
    "662": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP4",
      "path": "10"
    },
    "663": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "SUB",
      "path": "10"
    },
    "664": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP2",
      "path": "10"
    },
    "665": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "667": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP8",
      "path": "10"
    },
    "668": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP1",
      "path": "10"
    },
    "669": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "EXTCODESIZE",
      "path": "10"
    },
    "670": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "671": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP1",
      "path": "10"
    },
    "672": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "673": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2A9"
    },
    "676": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "677": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "679": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP1",
      "path": "10"
    },
    "680": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "REVERT",
      "path": "10"
    },
    "681": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "682": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "POP",
      "path": "10"
    },
    "683": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "GAS",
      "path": "10"
    },
    "684": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "CALL",
      "path": "10"
    },
    "685": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "686": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP1",
      "path": "10"
    },
    "687": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "688": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2BD"
    },
    "691": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "692": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "693": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "695": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "DUP1",
      "path": "10"
    },
    "696": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "RETURNDATACOPY",
      "path": "10"
    },
    "697": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "698": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "700": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "REVERT",
      "path": "10"
    },
    "701": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "702": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "POP",
      "path": "10"
    },
    "703": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "POP",
      "path": "10"
    },
    "704": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "POP",
      "path": "10"
    },
    "705": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5564,
        5703
      ],
      "op": "POP",
      "path": "10"
    },
    "706": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5755,
        5763
      ],
      "op": "DUP1",
      "path": "10",
      "statement": 4
    },
    "707": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5747,
        5753
      ],
      "op": "DUP4",
      "path": "10"
    },
    "708": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5734,
        5745
      ],
      "op": "DUP6",
      "path": "10"
    },
    "709": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0xD708C5C6A823A3E0499D43D17CD8F42261FF3E464EBFEC0ED0FF56533999E00D"
    },
    "742": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "744": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "745": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "747": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "748": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "DUP1",
      "path": "10"
    },
    "749": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "750": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "SUB",
      "path": "10"
    },
    "751": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "752": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5718,
        5764
      ],
      "op": "LOG4",
      "path": "10"
    },
    "753": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5410,
        5771
      ],
      "op": "POP",
      "path": "10"
    },
    "754": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "POP",
      "path": "10"
    },
    "755": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "POP",
      "path": "10"
    },
    "756": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5287,
        5771
      ],
      "op": "POP",
      "path": "10"
    },
    "757": {
      "fn": "FillManager.invalidateFill",
      "jump": "o",
      "offset": [
        5287,
        5771
      ],
      "op": "JUMP",
      "path": "10"
    },
    "758": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "759": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "761": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "762": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "764": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "766": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "768": {
      "op": "SHL"
    },
    "769": {
      "op": "SUB"
    },
    "770": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "771": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "6",
      "statement": 5
    },
    "772": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "773": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x320"
    },
    "776": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "777": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "779": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "780": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "784": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "786": {
      "op": "SHL"
    },
    "787": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "788": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "789": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "791": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "792": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x242"
    },
    "795": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "796": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB0D"
    },
    "799": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "800": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "801": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "803": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "805": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "807": {
      "op": "SHL"
    },
    "808": {
      "op": "SUB"
    },
    "809": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "DUP2",
      "path": "10",
      "statement": 6
    },
    "810": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "AND",
      "path": "10"
    },
    "811": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "813": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "DUP2",
      "path": "10"
    },
    "814": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "DUP2",
      "path": "10"
    },
    "815": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "816": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6130
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "818": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "820": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "821": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "DUP2",
      "path": "10"
    },
    "822": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "823": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "825": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "826": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "DUP3",
      "path": "10"
    },
    "827": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "828": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6137
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "829": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6144
      ],
      "op": "DUP1",
      "path": "10"
    },
    "830": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6144
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "831": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "833": {
      "op": "NOT"
    },
    "834": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6144
      ],
      "op": "AND",
      "path": "10"
    },
    "835": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6140,
        6144
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "837": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6144
      ],
      "op": "OR",
      "path": "10"
    },
    "838": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6144
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "839": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6120,
        6144
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "840": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "SWAP1",
      "path": "10",
      "statement": 7
    },
    "841": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "842": {
      "op": "SWAP2"
    },
    "843": {
      "op": "DUP3"
    },
    "844": {
      "op": "MSTORE"
    },
    "845": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0xC852021E30B95510F55086D8CC9BC5D15D20F2CB411766A7DA04804F4AD2FBA2"
    },
    "878": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "879": {
      "op": "ADD"
    },
    "880": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "881": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "883": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "884": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "DUP1",
      "path": "10"
    },
    "885": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "886": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "SUB",
      "path": "10"
    },
    "887": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "888": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6160,
        6174
      ],
      "op": "LOG1",
      "path": "10"
    },
    "889": {
      "fn": "FillManager.addAllowedLP",
      "offset": [
        6056,
        6181
      ],
      "op": "POP",
      "path": "10"
    },
    "890": {
      "fn": "FillManager.addAllowedLP",
      "jump": "o",
      "offset": [
        6056,
        6181
      ],
      "op": "JUMP",
      "path": "10"
    },
    "891": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "892": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "894": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "895": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "897": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "899": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "901": {
      "op": "SHL"
    },
    "902": {
      "op": "SUB"
    },
    "903": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "904": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "6"
    },
    "905": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "906": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3A5"
    },
    "909": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "910": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "912": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "913": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "917": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "919": {
      "op": "SHL"
    },
    "920": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "921": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "922": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "924": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "925": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x242"
    },
    "928": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "929": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB0D"
    },
    "932": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "933": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "934": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 8,
      "value": "0x3AF"
    },
    "937": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1759,
        1760
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "939": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1750
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x739"
    },
    "942": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMP",
      "path": "0"
    },
    "943": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "944": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "945": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6403,
        6533
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "946": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "948": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "949": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "951": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "953": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "955": {
      "op": "SHL"
    },
    "956": {
      "op": "SUB"
    },
    "957": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "958": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "6"
    },
    "959": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "960": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3DB"
    },
    "963": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "964": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "966": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "967": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "971": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "973": {
      "op": "SHL"
    },
    "974": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "975": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "976": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "978": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "979": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x242"
    },
    "982": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "983": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB0D"
    },
    "986": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "987": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "988": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "990": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "992": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "994": {
      "op": "SHL"
    },
    "995": {
      "op": "SUB"
    },
    "996": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "DUP2",
      "path": "10",
      "statement": 9
    },
    "997": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "AND",
      "path": "10"
    },
    "998": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1000": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1001": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1002": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1003": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6487
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1005": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1007": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1008": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1009": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1010": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1012": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1013": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1014": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1015": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6477,
        6494
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1016": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6470,
        6494
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1017": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6470,
        6494
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1018": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1020": {
      "op": "NOT"
    },
    "1021": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6470,
        6494
      ],
      "op": "AND",
      "path": "10"
    },
    "1022": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6470,
        6494
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1023": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6470,
        6494
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "1024": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6510,
        6526
      ],
      "op": "SWAP1",
      "path": "10",
      "statement": 10
    },
    "1025": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6510,
        6526
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1026": {
      "op": "SWAP2"
    },
    "1027": {
      "op": "DUP3"
    },
    "1028": {
      "op": "MSTORE"
    },
    "1029": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6510,
        6526
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x1ABFC08C9D8E95DC2F77C443843422FE9EF89AAFB40A5814F65E9C4F557F1FAA"
    },
    "1062": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6510,
        6526
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1063": {
      "op": "ADD"
    },
    "1064": {
      "fn": "FillManager.removeAllowedLP",
      "offset": [
        6510,
        6526
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x370"
    },
    "1067": {
      "op": "JUMP"
    },
    "1068": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1069": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3624,
        3634
      ],
      "op": "CALLER",
      "path": "10",
      "statement": 11
    },
    "1070": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3586,
        3593
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1072": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1073": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1074": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1075": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3623
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1077": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1079": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1080": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1082": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1083": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1084": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1085": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "1087": {
      "branch": 33,
      "fn": "FillManager.fillRequest",
      "offset": [
        3613,
        3635
      ],
      "op": "AND",
      "path": "10"
    },
    "1088": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x484"
    },
    "1091": {
      "branch": 33,
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1092": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1094": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1095": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1099": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1101": {
      "op": "SHL"
    },
    "1102": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1103": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1104": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1106": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1108": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1109": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "ADD",
      "path": "10"
    },
    "1110": {
      "op": "MSTORE"
    },
    "1111": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "1113": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1115": {
      "op": "DUP3"
    },
    "1116": {
      "op": "ADD"
    },
    "1117": {
      "op": "MSTORE"
    },
    "1118": {
      "op": "PUSH22",
      "value": "0x14D95B99195C881B9BDD081DDA1A5D195B1A5CDD1959"
    },
    "1141": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "1143": {
      "op": "SHL"
    },
    "1144": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1146": {
      "op": "DUP3"
    },
    "1147": {
      "op": "ADD"
    },
    "1148": {
      "op": "MSTORE"
    },
    "1149": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1151": {
      "op": "ADD"
    },
    "1152": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x242"
    },
    "1155": {
      "op": "JUMP"
    },
    "1156": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3605,
        3662
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1157": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 12,
      "value": "0x40"
    },
    "1159": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1160": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1161": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "1163": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1164": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1165": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "ADD",
      "path": "8"
    },
    "1166": {
      "op": "DUP10"
    },
    "1167": {
      "op": "SWAP1"
    },
    "1168": {
      "op": "MSTORE"
    },
    "1169": {
      "op": "DUP2"
    },
    "1170": {
      "op": "DUP4"
    },
    "1171": {
      "op": "ADD"
    },
    "1172": {
      "op": "DUP9"
    },
    "1173": {
      "op": "SWAP1"
    },
    "1174": {
      "op": "MSTORE"
    },
    "1175": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3787,
        3800
      ],
      "op": "CHAINID",
      "path": "10"
    },
    "1176": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1178": {
      "op": "DUP1"
    },
    "1179": {
      "op": "DUP5"
    },
    "1180": {
      "op": "ADD"
    },
    "1181": {
      "op": "SWAP2"
    },
    "1182": {
      "op": "SWAP1"
    },
    "1183": {
      "op": "SWAP2"
    },
    "1184": {
      "op": "MSTORE"
    },
    "1185": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "1198": {
      "op": "NOT"
    },
    "1199": {
      "op": "DUP9"
    },
    "1200": {
      "op": "DUP3"
    },
    "1201": {
      "op": "SHL"
    },
    "1202": {
      "op": "DUP2"
    },
    "1203": {
      "op": "AND"
    },
    "1204": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1206": {
      "op": "DUP6"
    },
    "1207": {
      "op": "ADD"
    },
    "1208": {
      "op": "MSTORE"
    },
    "1209": {
      "op": "SWAP1"
    },
    "1210": {
      "op": "DUP8"
    },
    "1211": {
      "op": "SWAP1"
    },
    "1212": {
      "op": "SHL"
    },
    "1213": {
      "op": "AND"
    },
    "1214": {
      "op": "PUSH1",
      "value": "0x94"
    },
    "1216": {
      "op": "DUP4"
    },
    "1217": {
      "op": "ADD"
    },
    "1218": {
      "op": "MSTORE"
    },
    "1219": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "1221": {
      "op": "DUP1"
    },
    "1222": {
      "op": "DUP4"
    },
    "1223": {
      "op": "ADD"
    },
    "1224": {
      "op": "DUP7"
    },
    "1225": {
      "op": "SWAP1"
    },
    "1226": {
      "op": "MSTORE"
    },
    "1227": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "DUP4",
      "path": "8"
    },
    "1228": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1229": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1230": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "DUP5",
      "path": "8"
    },
    "1231": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "SUB",
      "path": "8"
    },
    "1232": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1233": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1234": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "ADD",
      "path": "8"
    },
    "1235": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1236": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1237": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "1239": {
      "op": "SWAP1"
    },
    "1240": {
      "op": "SWAP3"
    },
    "1241": {
      "op": "ADD"
    },
    "1242": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1243": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "1244": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        470,
        716
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1245": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        443,
        730
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1246": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        443,
        730
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1247": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        443,
        730
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1248": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        443,
        730
      ],
      "op": "ADD",
      "path": "8"
    },
    "1249": {
      "fn": "BeamerUtils.createRequestHash",
      "offset": [
        443,
        730
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "1250": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3691
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1252": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3691
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1253": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3946,
        3947
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 13,
      "value": "0x0"
    },
    "1255": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3934
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1256": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3934
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1257": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3934
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1258": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3921
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3"
    },
    "1260": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3934
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1262": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3934
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1263": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3934
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1265": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3934
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1266": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3934
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1267": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3934
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1268": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3897
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1269": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3672,
        3897
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1270": {
      "op": "POP"
    },
    "1271": {
      "branch": 34,
      "fn": "FillManager.fillRequest",
      "offset": [
        3916,
        3948
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1272": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x534"
    },
    "1275": {
      "branch": 34,
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1276": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1278": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1279": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1283": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1285": {
      "op": "SHL"
    },
    "1286": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1287": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1288": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1290": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1292": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1293": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "ADD",
      "path": "10"
    },
    "1294": {
      "op": "MSTORE"
    },
    "1295": {
      "op": "PUSH1",
      "value": "0xE"
    },
    "1297": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1299": {
      "op": "DUP3"
    },
    "1300": {
      "op": "ADD"
    },
    "1301": {
      "op": "MSTORE"
    },
    "1302": {
      "op": "PUSH14",
      "value": "0x105B1C9958591E48199A5B1B1959"
    },
    "1317": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "1319": {
      "op": "SHL"
    },
    "1320": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1322": {
      "op": "DUP3"
    },
    "1323": {
      "op": "ADD"
    },
    "1324": {
      "op": "MSTORE"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1327": {
      "op": "ADD"
    },
    "1328": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x242"
    },
    "1331": {
      "op": "JUMP"
    },
    "1332": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3908,
        3967
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1333": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4000,
        4018
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1334": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4029,
        4094
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 14,
      "value": "0x54A"
    },
    "1337": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1339": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1341": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1343": {
      "op": "SHL"
    },
    "1344": {
      "op": "SUB"
    },
    "1345": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4029,
        4051
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1346": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4029,
        4051
      ],
      "op": "AND",
      "path": "10"
    },
    "1347": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4052,
        4062
      ],
      "op": "CALLER",
      "path": "10"
    },
    "1348": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4064,
        4085
      ],
      "op": "DUP8",
      "path": "10"
    },
    "1349": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4087,
        4093
      ],
      "op": "DUP8",
      "path": "10"
    },
    "1350": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4029,
        4051
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x789"
    },
    "1353": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        4029,
        4094
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1354": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4029,
        4094
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1355": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4170
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x2"
    },
    "1357": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4170
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1358": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4170
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "1360": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4196,
        4206
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1361": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1363": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1364": {
      "op": "PUSH4",
      "value": "0x1EC0F4F9"
    },
    "1369": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "1371": {
      "op": "SHL"
    },
    "1372": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1373": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1374": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1380": {
      "op": "SHL"
    },
    "1381": {
      "op": "SUB"
    },
    "1382": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4196,
        4206
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1383": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4196,
        4206
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1384": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4196,
        4206
      ],
      "op": "AND",
      "path": "10"
    },
    "1385": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1387": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1388": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "ADD",
      "path": "10"
    },
    "1389": {
      "op": "MSTORE"
    },
    "1390": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1392": {
      "op": "DUP2"
    },
    "1393": {
      "op": "ADD"
    },
    "1394": {
      "op": "DUP11"
    },
    "1395": {
      "op": "SWAP1"
    },
    "1396": {
      "op": "MSTORE"
    },
    "1397": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1399": {
      "op": "DUP2"
    },
    "1400": {
      "op": "ADD"
    },
    "1401": {
      "op": "DUP6"
    },
    "1402": {
      "op": "SWAP1"
    },
    "1403": {
      "op": "MSTORE"
    },
    "1404": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4236,
        4246
      ],
      "op": "CALLER",
      "path": "10"
    },
    "1405": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1407": {
      "op": "DUP3"
    },
    "1408": {
      "op": "ADD"
    },
    "1409": {
      "op": "MSTORE"
    },
    "1410": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4105,
        4153
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1412": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4105,
        4153
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "1413": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4170
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1414": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4170
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1415": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4170
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1416": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4170
      ],
      "op": "AND",
      "path": "10"
    },
    "1417": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4170
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1418": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4195
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xF607A7C8"
    },
    "1423": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4195
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1424": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1426": {
      "op": "ADD"
    },
    "1427": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1429": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1430": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1431": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1432": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1433": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "SUB",
      "path": "10"
    },
    "1434": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1435": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1437": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP8",
      "path": "10"
    },
    "1438": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "GAS",
      "path": "10"
    },
    "1439": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "CALL",
      "path": "10"
    },
    "1440": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1441": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1442": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1443": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5B0"
    },
    "1446": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1447": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "1448": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1450": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1451": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "RETURNDATACOPY",
      "path": "10"
    },
    "1452": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "1453": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1455": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "REVERT",
      "path": "10"
    },
    "1456": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1457": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "POP",
      "path": "10"
    },
    "1458": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "POP",
      "path": "10"
    },
    "1459": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "POP",
      "path": "10"
    },
    "1460": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "POP",
      "path": "10"
    },
    "1461": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1463": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1464": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "1465": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1F"
    },
    "1467": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "NOT",
      "path": "10"
    },
    "1468": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1F"
    },
    "1470": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1471": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "ADD",
      "path": "10"
    },
    "1472": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "AND",
      "path": "10"
    },
    "1473": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1474": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "ADD",
      "path": "10"
    },
    "1475": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1476": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1478": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1479": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "POP",
      "path": "10"
    },
    "1480": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1481": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "ADD",
      "path": "10"
    },
    "1482": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1483": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5D4"
    },
    "1486": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1487": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1488": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xB42"
    },
    "1491": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        4156,
        4247
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1492": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4156,
        4247
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1493": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4265,
        4284
      ],
      "op": "DUP1",
      "path": "10",
      "statement": 15
    },
    "1494": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4265,
        4284
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1495": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4105,
        4247
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1496": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4105,
        4247
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1497": {
      "op": "POP"
    },
    "1498": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4265,
        4284
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1500": {
      "branch": 35,
      "fn": "FillManager.fillRequest",
      "offset": [
        4265,
        4289
      ],
      "op": "SUB",
      "path": "10"
    },
    "1501": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x628"
    },
    "1504": {
      "branch": 35,
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1505": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1507": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1508": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1512": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1514": {
      "op": "SHL"
    },
    "1515": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1516": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1517": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1519": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1521": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1522": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "ADD",
      "path": "10"
    },
    "1523": {
      "op": "MSTORE"
    },
    "1524": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "1526": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1528": {
      "op": "DUP3"
    },
    "1529": {
      "op": "ADD"
    },
    "1530": {
      "op": "MSTORE"
    },
    "1531": {
      "op": "PUSH32",
      "value": "0x5375626D697474696E672070726F6F662064617461206661696C656400000000"
    },
    "1564": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1566": {
      "op": "DUP3"
    },
    "1567": {
      "op": "ADD"
    },
    "1568": {
      "op": "MSTORE"
    },
    "1569": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1571": {
      "op": "ADD"
    },
    "1572": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x242"
    },
    "1575": {
      "op": "JUMP"
    },
    "1576": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4257,
        4322
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1577": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4354,
        4375
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 16,
      "value": "0x20"
    },
    "1579": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4354,
        4375
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1580": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4354,
        4375
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1581": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4354,
        4375
      ],
      "op": "ADD",
      "path": "10"
    },
    "1582": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4354,
        4375
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1583": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1585": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "DUP6",
      "path": "10"
    },
    "1586": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1587": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1588": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4338
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3"
    },
    "1590": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1591": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1592": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1594": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1595": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1596": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1597": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4351
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1598": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4375
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1599": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4375
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1600": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4375
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1601": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4333,
        4375
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "1602": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4441,
        4460
      ],
      "op": "DUP3",
      "path": "10",
      "statement": 17
    },
    "1603": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4441,
        4460
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1604": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1605": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1606": {
      "op": "SWAP1"
    },
    "1607": {
      "op": "DUP2"
    },
    "1608": {
      "op": "MSTORE"
    },
    "1609": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4533,
        4543
      ],
      "op": "CALLER",
      "path": "10"
    },
    "1610": {
      "op": "SWAP3"
    },
    "1611": {
      "op": "DUP2"
    },
    "1612": {
      "op": "ADD"
    },
    "1613": {
      "op": "SWAP3"
    },
    "1614": {
      "op": "SWAP1"
    },
    "1615": {
      "op": "SWAP3"
    },
    "1616": {
      "op": "MSTORE"
    },
    "1617": {
      "op": "DUP2"
    },
    "1618": {
      "op": "ADD"
    },
    "1619": {
      "op": "DUP7"
    },
    "1620": {
      "op": "SWAP1"
    },
    "1621": {
      "op": "MSTORE"
    },
    "1622": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1624": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1626": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1628": {
      "op": "SHL"
    },
    "1629": {
      "op": "SUB"
    },
    "1630": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "DUP9",
      "path": "10"
    },
    "1631": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "AND",
      "path": "10"
    },
    "1632": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1633": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4474,
        4487
      ],
      "op": "DUP10",
      "path": "10"
    },
    "1634": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4474,
        4487
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1635": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4418,
        4427
      ],
      "op": "DUP12",
      "path": "10"
    },
    "1636": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4418,
        4427
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1637": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x36973204944F64CC25B32E5318BD0611F917FEDCD9CB77A11651723DB2C6323"
    },
    "1670": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1671": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1673": {
      "op": "ADD"
    },
    "1674": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1676": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1677": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1678": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1679": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "SUB",
      "path": "10"
    },
    "1680": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1681": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4391,
        4573
      ],
      "op": "LOG4",
      "path": "10"
    },
    "1682": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4591,
        4610
      ],
      "op": "MLOAD",
      "path": "10",
      "statement": 18
    },
    "1683": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4591,
        4610
      ],
      "op": "SWAP9",
      "path": "10"
    },
    "1684": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3384,
        4617
      ],
      "op": "SWAP8",
      "path": "10"
    },
    "1685": {
      "op": "POP"
    },
    "1686": {
      "op": "POP"
    },
    "1687": {
      "op": "POP"
    },
    "1688": {
      "op": "POP"
    },
    "1689": {
      "op": "POP"
    },
    "1690": {
      "op": "POP"
    },
    "1691": {
      "op": "POP"
    },
    "1692": {
      "op": "POP"
    },
    "1693": {
      "fn": "FillManager.fillRequest",
      "jump": "o",
      "offset": [
        3384,
        4617
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1694": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1695": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1697": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1698": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1700": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1702": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1704": {
      "op": "SHL"
    },
    "1705": {
      "op": "SUB"
    },
    "1706": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "1707": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "6"
    },
    "1708": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "1709": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6C8"
    },
    "1712": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1713": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1715": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1716": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1720": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1722": {
      "op": "SHL"
    },
    "1723": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1724": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1725": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1727": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "1728": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x242"
    },
    "1731": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1732": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB0D"
    },
    "1735": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1736": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1739": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1741": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1743": {
      "op": "SHL"
    },
    "1744": {
      "op": "SUB"
    },
    "1745": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 19
    },
    "1746": {
      "branch": 39,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "AND",
      "path": "0"
    },
    "1747": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x72D"
    },
    "1750": {
      "branch": 39,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1751": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1753": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1754": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1758": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1760": {
      "op": "SHL"
    },
    "1761": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1762": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1763": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1765": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1767": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1768": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "ADD",
      "path": "0"
    },
    "1769": {
      "op": "MSTORE"
    },
    "1770": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1772": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1774": {
      "op": "DUP3"
    },
    "1775": {
      "op": "ADD"
    },
    "1776": {
      "op": "MSTORE"
    },
    "1777": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "1810": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1812": {
      "op": "DUP3"
    },
    "1813": {
      "op": "ADD"
    },
    "1814": {
      "op": "MSTORE"
    },
    "1815": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "1822": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "1824": {
      "op": "SHL"
    },
    "1825": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1827": {
      "op": "DUP3"
    },
    "1828": {
      "op": "ADD"
    },
    "1829": {
      "op": "MSTORE"
    },
    "1830": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1832": {
      "op": "ADD"
    },
    "1833": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x242"
    },
    "1836": {
      "op": "JUMP"
    },
    "1837": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1838": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2109
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 20,
      "value": "0x736"
    },
    "1841": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2100,
        2108
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1842": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2099
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x739"
    },
    "1845": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2109
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1846": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2109
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1847": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "POP",
      "path": "0"
    },
    "1848": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1849": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1850": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1852": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1853": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1856": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1858": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1860": {
      "op": "SHL"
    },
    "1861": {
      "op": "SUB"
    },
    "1862": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 21
    },
    "1863": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1864": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "1865": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1867": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1869": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1871": {
      "op": "SHL"
    },
    "1872": {
      "op": "SUB"
    },
    "1873": {
      "op": "NOT"
    },
    "1874": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1875": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "1876": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1877": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "OR",
      "path": "0"
    },
    "1878": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1879": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1880": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 22,
      "value": "0x40"
    },
    "1882": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1883": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1884": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1885": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1886": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "AND",
      "path": "0"
    },
    "1887": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1888": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1889": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1890": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "1923": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1924": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1925": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "LOG3",
      "path": "0"
    },
    "1926": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2333,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "1927": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "1928": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1929": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        912,
        1153
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1930": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 23,
      "value": "0x40"
    },
    "1932": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1933": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1934": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1936": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1938": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1940": {
      "op": "SHL"
    },
    "1941": {
      "op": "SUB"
    },
    "1942": {
      "op": "DUP6"
    },
    "1943": {
      "op": "DUP2"
    },
    "1944": {
      "op": "AND"
    },
    "1945": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x24"
    },
    "1947": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1948": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "ADD",
      "path": "4"
    },
    "1949": {
      "op": "MSTORE"
    },
    "1950": {
      "op": "DUP5"
    },
    "1951": {
      "op": "AND"
    },
    "1952": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1954": {
      "op": "DUP3"
    },
    "1955": {
      "op": "ADD"
    },
    "1956": {
      "op": "MSTORE"
    },
    "1957": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1959": {
      "op": "DUP1"
    },
    "1960": {
      "op": "DUP3"
    },
    "1961": {
      "op": "ADD"
    },
    "1962": {
      "op": "DUP5"
    },
    "1963": {
      "op": "SWAP1"
    },
    "1964": {
      "op": "MSTORE"
    },
    "1965": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "DUP3",
      "path": "4"
    },
    "1966": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1967": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1968": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "DUP4",
      "path": "4"
    },
    "1969": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "SUB",
      "path": "4"
    },
    "1970": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1971": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1972": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "ADD",
      "path": "4"
    },
    "1973": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1974": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1975": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1977": {
      "op": "SWAP1"
    },
    "1978": {
      "op": "SWAP2"
    },
    "1979": {
      "op": "ADD"
    },
    "1980": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1981": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "1982": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "1983": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "1985": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "DUP2",
      "path": "4"
    },
    "1986": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "ADD",
      "path": "4"
    },
    "1987": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "DUP1",
      "path": "4"
    },
    "1988": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "1989": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1991": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1993": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1995": {
      "op": "SHL"
    },
    "1996": {
      "op": "SUB"
    },
    "1997": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "AND",
      "path": "4"
    },
    "1998": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2003": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2005": {
      "op": "SHL"
    },
    "2006": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "OR",
      "path": "4"
    },
    "2007": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2008": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1077,
        1145
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2009": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1050,
        1146
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x7E3"
    },
    "2012": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1050,
        1146
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2013": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1070,
        1075
      ],
      "op": "DUP6",
      "path": "4"
    },
    "2014": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1070,
        1075
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2015": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1050,
        1069
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x7E9"
    },
    "2018": {
      "fn": "SafeERC20.safeTransferFrom",
      "jump": "i",
      "offset": [
        1050,
        1146
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2019": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1050,
        1146
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2020": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        912,
        1153
      ],
      "op": "POP",
      "path": "4"
    },
    "2021": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        912,
        1153
      ],
      "op": "POP",
      "path": "4"
    },
    "2022": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        912,
        1153
      ],
      "op": "POP",
      "path": "4"
    },
    "2023": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        912,
        1153
      ],
      "op": "POP",
      "path": "4"
    },
    "2024": {
      "fn": "SafeERC20.safeTransferFrom",
      "jump": "o",
      "offset": [
        912,
        1153
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2025": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3207,
        3913
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2026": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3626,
        3649
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "2028": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x83E"
    },
    "2031": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3680,
        3684
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2032": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2034": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2035": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "DUP1",
      "path": "4"
    },
    "2036": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2038": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "ADD",
      "path": "4"
    },
    "2039": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2041": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2042": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "DUP1",
      "path": "4"
    },
    "2043": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "2045": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2046": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2047": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "2049": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "ADD",
      "path": "4"
    },
    "2050": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
    },
    "2083": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2084": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2085": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "POP",
      "path": "4"
    },
    "2086": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3660,
        3665
      ],
      "op": "DUP6",
      "path": "4"
    },
    "2087": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2089": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2091": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2093": {
      "op": "SHL"
    },
    "2094": {
      "op": "SUB"
    },
    "2095": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3679
      ],
      "op": "AND",
      "path": "4"
    },
    "2096": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3679
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x8C0"
    },
    "2099": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3679
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2100": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "SWAP3",
      "path": "4"
    },
    "2101": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2102": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2103": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xFFFFFFFF"
    },
    "2108": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "AND",
      "path": "4"
    },
    "2109": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3652,
        3721
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2110": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3652,
        3721
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2111": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3735,
        3752
      ],
      "op": "DUP1",
      "path": "4"
    },
    "2112": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3735,
        3752
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2113": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3626,
        3721
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2114": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3626,
        3721
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2115": {
      "op": "POP"
    },
    "2116": {
      "branch": 40,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3735,
        3756
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "2117": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3731,
        3907
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x8BB"
    },
    "2120": {
      "branch": 40,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3731,
        3907
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "2121": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3830,
        3840
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 24
    },
    "2122": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "DUP1",
      "path": "4"
    },
    "2123": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "2125": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "ADD",
      "path": "4"
    },
    "2126": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2127": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2128": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2129": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "ADD",
      "path": "4"
    },
    "2130": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2131": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x85C"
    },
    "2134": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "2135": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2136": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xB9F"
    },
    "2139": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3819,
        3849
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2140": {
      "branch": 41,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3819,
        3849
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2141": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x8BB"
    },
    "2144": {
      "branch": 41,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "2145": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "2147": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "2148": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2152": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2154": {
      "op": "SHL"
    },
    "2155": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "DUP2",
      "path": "4"
    },
    "2156": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "2157": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2159": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "2161": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "DUP3",
      "path": "4"
    },
    "2162": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "ADD",
      "path": "4"
    },
    "2163": {
      "op": "MSTORE"
    },
    "2164": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "2166": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2168": {
      "op": "DUP3"
    },
    "2169": {
      "op": "ADD"
    },
    "2170": {
      "op": "MSTORE"
    },
    "2171": {
      "op": "PUSH32",
      "value": "0x5361666545524332303A204552433230206F7065726174696F6E20646964206E"
    },
    "2204": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2206": {
      "op": "DUP3"
    },
    "2207": {
      "op": "ADD"
    },
    "2208": {
      "op": "MSTORE"
    },
    "2209": {
      "op": "PUSH10",
      "value": "0x1BDD081CDD58D8D95959"
    },
    "2220": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "2222": {
      "op": "SHL"
    },
    "2223": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2225": {
      "op": "DUP3"
    },
    "2226": {
      "op": "ADD"
    },
    "2227": {
      "op": "MSTORE"
    },
    "2228": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2230": {
      "op": "ADD"
    },
    "2231": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x242"
    },
    "2234": {
      "op": "JUMP"
    },
    "2235": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3811,
        3896
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2236": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3277,
        3913
      ],
      "op": "POP",
      "path": "4"
    },
    "2237": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3207,
        3913
      ],
      "op": "POP",
      "path": "4"
    },
    "2238": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3207,
        3913
      ],
      "op": "POP",
      "path": "4"
    },
    "2239": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "o",
      "offset": [
        3207,
        3913
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2240": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2241": {
      "fn": "Address.functionCall",
      "offset": [
        3994,
        4006
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "2243": {
      "fn": "Address.functionCall",
      "offset": [
        4025,
        4077
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 25,
      "value": "0x8CF"
    },
    "2246": {
      "fn": "Address.functionCall",
      "offset": [
        4047,
        4053
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2247": {
      "fn": "Address.functionCall",
      "offset": [
        4055,
        4059
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2248": {
      "fn": "Address.functionCall",
      "offset": [
        4061,
        4062
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2250": {
      "fn": "Address.functionCall",
      "offset": [
        4064,
        4076
      ],
      "op": "DUP6",
      "path": "5"
    },
    "2251": {
      "fn": "Address.functionCall",
      "offset": [
        4025,
        4046
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x8D9"
    },
    "2254": {
      "fn": "Address.functionCall",
      "jump": "i",
      "offset": [
        4025,
        4077
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2255": {
      "fn": "Address.functionCall",
      "offset": [
        4025,
        4077
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2256": {
      "fn": "Address.functionCall",
      "offset": [
        4018,
        4077
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2257": {
      "fn": "Address.functionCall",
      "offset": [
        4018,
        4077
      ],
      "op": "POP",
      "path": "5"
    },
    "2258": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2259": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "2260": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2261": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "POP",
      "path": "5"
    },
    "2262": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "POP",
      "path": "5"
    },
    "2263": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "POP",
      "path": "5"
    },
    "2264": {
      "fn": "Address.functionCall",
      "jump": "o",
      "offset": [
        3861,
        4084
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2265": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4948,
        5447
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2266": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5113,
        5125
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "2268": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5170,
        5175
      ],
      "op": "DUP3",
      "path": "5",
      "statement": 26
    },
    "2269": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5145,
        5166
      ],
      "op": "SELFBALANCE",
      "path": "5"
    },
    "2270": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5145,
        5175
      ],
      "op": "LT",
      "path": "5"
    },
    "2271": {
      "branch": 36,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5145,
        5175
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2272": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x93A"
    },
    "2275": {
      "branch": 36,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2276": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2278": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2279": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2283": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2285": {
      "op": "SHL"
    },
    "2286": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2287": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2288": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2290": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2292": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2293": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "ADD",
      "path": "5"
    },
    "2294": {
      "op": "MSTORE"
    },
    "2295": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "2297": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2299": {
      "op": "DUP3"
    },
    "2300": {
      "op": "ADD"
    },
    "2301": {
      "op": "MSTORE"
    },
    "2302": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "2335": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2337": {
      "op": "DUP3"
    },
    "2338": {
      "op": "ADD"
    },
    "2339": {
      "op": "MSTORE"
    },
    "2340": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "2347": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "2349": {
      "op": "SHL"
    },
    "2350": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2352": {
      "op": "DUP3"
    },
    "2353": {
      "op": "ADD"
    },
    "2354": {
      "op": "MSTORE"
    },
    "2355": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2357": {
      "op": "ADD"
    },
    "2358": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x242"
    },
    "2361": {
      "op": "JUMP"
    },
    "2362": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2363": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2365": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2367": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2369": {
      "op": "SHL"
    },
    "2370": {
      "op": "SUB"
    },
    "2371": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "DUP6",
      "path": "5",
      "statement": 27
    },
    "2372": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "AND",
      "path": "5"
    },
    "2373": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "EXTCODESIZE",
      "path": "5"
    },
    "2374": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 28,
      "value": "0x991"
    },
    "2377": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2378": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2380": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2381": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2385": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2387": {
      "op": "SHL"
    },
    "2388": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2389": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2390": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2392": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2394": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2395": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "ADD",
      "path": "5"
    },
    "2396": {
      "op": "MSTORE"
    },
    "2397": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "2399": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2401": {
      "op": "DUP3"
    },
    "2402": {
      "op": "ADD"
    },
    "2403": {
      "op": "MSTORE"
    },
    "2404": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "2437": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2439": {
      "op": "DUP3"
    },
    "2440": {
      "op": "ADD"
    },
    "2441": {
      "op": "MSTORE"
    },
    "2442": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2444": {
      "op": "ADD"
    },
    "2445": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x242"
    },
    "2448": {
      "op": "JUMP"
    },
    "2449": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2450": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5300,
        5312
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2452": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5314,
        5337
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2453": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5347
      ],
      "op": "DUP7",
      "path": "5"
    },
    "2454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2456": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2458": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2460": {
      "op": "SHL"
    },
    "2461": {
      "op": "SUB"
    },
    "2462": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5352
      ],
      "op": "AND",
      "path": "5"
    },
    "2463": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5360,
        5365
      ],
      "op": "DUP6",
      "path": "5"
    },
    "2464": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5367,
        5371
      ],
      "op": "DUP8",
      "path": "5"
    },
    "2465": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2467": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2468": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9AD"
    },
    "2471": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2472": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2473": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xBED"
    },
    "2476": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2477": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2478": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2480": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2482": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2483": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2484": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2485": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SUB",
      "path": "5"
    },
    "2486": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2487": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP6",
      "path": "5"
    },
    "2488": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP8",
      "path": "5"
    },
    "2489": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "GAS",
      "path": "5"
    },
    "2490": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "CALL",
      "path": "5"
    },
    "2491": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2492": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "5"
    },
    "2493": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "5"
    },
    "2494": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "5"
    },
    "2495": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2496": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2497": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2499": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2500": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "EQ",
      "path": "5"
    },
    "2501": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9EA"
    },
    "2504": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2505": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2507": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2508": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2509": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "5"
    },
    "2510": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2512": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "NOT",
      "path": "5"
    },
    "2513": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3F"
    },
    "2515": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2516": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "ADD",
      "path": "5"
    },
    "2517": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "AND",
      "path": "5"
    },
    "2518": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2519": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "ADD",
      "path": "5"
    },
    "2520": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2522": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2523": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2524": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2525": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2526": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2527": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2529": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2531": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2532": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "ADD",
      "path": "5"
    },
    "2533": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATACOPY",
      "path": "5"
    },
    "2534": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9EF"
    },
    "2537": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2538": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2539": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "2541": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2542": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "5"
    },
    "2543": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2544": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "5"
    },
    "2545": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2546": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "POP",
      "path": "5"
    },
    "2547": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2548": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "POP",
      "path": "5"
    },
    "2549": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5389,
        5440
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 29,
      "value": "0x9FF"
    },
    "2552": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5406,
        5413
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2553": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5415,
        5425
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2554": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5427,
        5439
      ],
      "op": "DUP7",
      "path": "5"
    },
    "2555": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5389,
        5405
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA0A"
    },
    "2558": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5389,
        5440
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2559": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5389,
        5440
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2560": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5382,
        5440
      ],
      "op": "SWAP8",
      "path": "5"
    },
    "2561": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4948,
        5447
      ],
      "op": "SWAP7",
      "path": "5"
    },
    "2562": {
      "op": "POP"
    },
    "2563": {
      "op": "POP"
    },
    "2564": {
      "op": "POP"
    },
    "2565": {
      "op": "POP"
    },
    "2566": {
      "op": "POP"
    },
    "2567": {
      "op": "POP"
    },
    "2568": {
      "op": "POP"
    },
    "2569": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4948,
        5447
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2570": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7561,
        8253
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2571": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7707,
        7719
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "2573": {
      "branch": 37,
      "fn": "Address.verifyCallResult",
      "offset": [
        7735,
        7742
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2574": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2575": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA19"
    },
    "2578": {
      "branch": 37,
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2579": {
      "op": "POP"
    },
    "2580": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7765,
        7775
      ],
      "op": "DUP2",
      "path": "5",
      "statement": 30
    },
    "2581": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7758,
        7775
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x8D2"
    },
    "2584": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7758,
        7775
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2585": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8247
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2586": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2587": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7893
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2588": {
      "branch": 38,
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7897
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2589": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8237
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA29"
    },
    "2592": {
      "branch": 38,
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8237
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2593": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8070,
        8080
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2594": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8064,
        8081
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2595": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8130,
        8145
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2596": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8117,
        8127
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2597": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8113,
        8115
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2599": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8109,
        8128
      ],
      "op": "ADD",
      "path": "5"
    },
    "2600": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8102,
        8146
      ],
      "op": "REVERT",
      "path": "5"
    },
    "2601": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8237
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2602": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8209,
        8221
      ],
      "op": "DUP2",
      "path": "5",
      "statement": 31
    },
    "2603": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2605": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2606": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2610": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2612": {
      "op": "SHL"
    },
    "2613": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2614": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2615": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2617": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "ADD",
      "path": "5"
    },
    "2618": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x242"
    },
    "2621": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2622": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2623": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8202,
        8222
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC09"
    },
    "2626": {
      "fn": "Address.verifyCallResult",
      "jump": "i",
      "offset": [
        8202,
        8222
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2627": {
      "op": "JUMPDEST"
    },
    "2628": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2630": {
      "op": "DUP1"
    },
    "2631": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2633": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2635": {
      "op": "DUP5"
    },
    "2636": {
      "op": "DUP7"
    },
    "2637": {
      "op": "SUB"
    },
    "2638": {
      "op": "SLT"
    },
    "2639": {
      "op": "ISZERO"
    },
    "2640": {
      "op": "PUSH2",
      "value": "0xA58"
    },
    "2643": {
      "op": "JUMPI"
    },
    "2644": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2646": {
      "op": "DUP1"
    },
    "2647": {
      "op": "REVERT"
    },
    "2648": {
      "op": "JUMPDEST"
    },
    "2649": {
      "op": "POP"
    },
    "2650": {
      "op": "POP"
    },
    "2651": {
      "op": "DUP2"
    },
    "2652": {
      "op": "CALLDATALOAD"
    },
    "2653": {
      "op": "SWAP4"
    },
    "2654": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2656": {
      "op": "DUP4"
    },
    "2657": {
      "op": "ADD"
    },
    "2658": {
      "op": "CALLDATALOAD"
    },
    "2659": {
      "op": "SWAP4"
    },
    "2660": {
      "op": "POP"
    },
    "2661": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2663": {
      "op": "SWAP1"
    },
    "2664": {
      "op": "SWAP3"
    },
    "2665": {
      "op": "ADD"
    },
    "2666": {
      "op": "CALLDATALOAD"
    },
    "2667": {
      "op": "SWAP2"
    },
    "2668": {
      "op": "SWAP1"
    },
    "2669": {
      "op": "POP"
    },
    "2670": {
      "jump": "o",
      "op": "JUMP"
    },
    "2671": {
      "op": "JUMPDEST"
    },
    "2672": {
      "op": "DUP1"
    },
    "2673": {
      "op": "CALLDATALOAD"
    },
    "2674": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2678": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2680": {
      "op": "SHL"
    },
    "2681": {
      "op": "SUB"
    },
    "2682": {
      "op": "DUP2"
    },
    "2683": {
      "op": "AND"
    },
    "2684": {
      "op": "DUP2"
    },
    "2685": {
      "op": "EQ"
    },
    "2686": {
      "op": "PUSH2",
      "value": "0xA86"
    },
    "2689": {
      "op": "JUMPI"
    },
    "2690": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2692": {
      "op": "DUP1"
    },
    "2693": {
      "op": "REVERT"
    },
    "2694": {
      "op": "JUMPDEST"
    },
    "2695": {
      "op": "SWAP2"
    },
    "2696": {
      "op": "SWAP1"
    },
    "2697": {
      "op": "POP"
    },
    "2698": {
      "jump": "o",
      "op": "JUMP"
    },
    "2699": {
      "op": "JUMPDEST"
    },
    "2700": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2702": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2704": {
      "op": "DUP3"
    },
    "2705": {
      "op": "DUP5"
    },
    "2706": {
      "op": "SUB"
    },
    "2707": {
      "op": "SLT"
    },
    "2708": {
      "op": "ISZERO"
    },
    "2709": {
      "op": "PUSH2",
      "value": "0xA9D"
    },
    "2712": {
      "op": "JUMPI"
    },
    "2713": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2715": {
      "op": "DUP1"
    },
    "2716": {
      "op": "REVERT"
    },
    "2717": {
      "op": "JUMPDEST"
    },
    "2718": {
      "op": "PUSH2",
      "value": "0x8D2"
    },
    "2721": {
      "op": "DUP3"
    },
    "2722": {
      "op": "PUSH2",
      "value": "0xA6F"
    },
    "2725": {
      "jump": "i",
      "op": "JUMP"
    },
    "2726": {
      "op": "JUMPDEST"
    },
    "2727": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2729": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2731": {
      "op": "DUP3"
    },
    "2732": {
      "op": "DUP5"
    },
    "2733": {
      "op": "SUB"
    },
    "2734": {
      "op": "SLT"
    },
    "2735": {
      "op": "ISZERO"
    },
    "2736": {
      "op": "PUSH2",
      "value": "0xAB8"
    },
    "2739": {
      "op": "JUMPI"
    },
    "2740": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2742": {
      "op": "DUP1"
    },
    "2743": {
      "op": "REVERT"
    },
    "2744": {
      "op": "JUMPDEST"
    },
    "2745": {
      "op": "POP"
    },
    "2746": {
      "op": "CALLDATALOAD"
    },
    "2747": {
      "op": "SWAP2"
    },
    "2748": {
      "op": "SWAP1"
    },
    "2749": {
      "op": "POP"
    },
    "2750": {
      "jump": "o",
      "op": "JUMP"
    },
    "2751": {
      "op": "JUMPDEST"
    },
    "2752": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2754": {
      "op": "DUP1"
    },
    "2755": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2757": {
      "op": "DUP1"
    },
    "2758": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2760": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2762": {
      "op": "DUP7"
    },
    "2763": {
      "op": "DUP9"
    },
    "2764": {
      "op": "SUB"
    },
    "2765": {
      "op": "SLT"
    },
    "2766": {
      "op": "ISZERO"
    },
    "2767": {
      "op": "PUSH2",
      "value": "0xAD7"
    },
    "2770": {
      "op": "JUMPI"
    },
    "2771": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2773": {
      "op": "DUP1"
    },
    "2774": {
      "op": "REVERT"
    },
    "2775": {
      "op": "JUMPDEST"
    },
    "2776": {
      "op": "DUP6"
    },
    "2777": {
      "op": "CALLDATALOAD"
    },
    "2778": {
      "op": "SWAP5"
    },
    "2779": {
      "op": "POP"
    },
    "2780": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2782": {
      "op": "DUP7"
    },
    "2783": {
      "op": "ADD"
    },
    "2784": {
      "op": "CALLDATALOAD"
    },
    "2785": {
      "op": "SWAP4"
    },
    "2786": {
      "op": "POP"
    },
    "2787": {
      "op": "PUSH2",
      "value": "0xAEE"
    },
    "2790": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2792": {
      "op": "DUP8"
    },
    "2793": {
      "op": "ADD"
    },
    "2794": {
      "op": "PUSH2",
      "value": "0xA6F"
    },
    "2797": {
      "jump": "i",
      "op": "JUMP"
    },
    "2798": {
      "op": "JUMPDEST"
    },
    "2799": {
      "op": "SWAP3"
    },
    "2800": {
      "op": "POP"
    },
    "2801": {
      "op": "PUSH2",
      "value": "0xAFC"
    },
    "2804": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2806": {
      "op": "DUP8"
    },
    "2807": {
      "op": "ADD"
    },
    "2808": {
      "op": "PUSH2",
      "value": "0xA6F"
    },
    "2811": {
      "jump": "i",
      "op": "JUMP"
    },
    "2812": {
      "op": "JUMPDEST"
    },
    "2813": {
      "op": "SWAP5"
    },
    "2814": {
      "op": "SWAP8"
    },
    "2815": {
      "op": "SWAP4"
    },
    "2816": {
      "op": "SWAP7"
    },
    "2817": {
      "op": "POP"
    },
    "2818": {
      "op": "SWAP2"
    },
    "2819": {
      "op": "SWAP5"
    },
    "2820": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2822": {
      "op": "ADD"
    },
    "2823": {
      "op": "CALLDATALOAD"
    },
    "2824": {
      "op": "SWAP3"
    },
    "2825": {
      "op": "SWAP2"
    },
    "2826": {
      "op": "POP"
    },
    "2827": {
      "op": "POP"
    },
    "2828": {
      "jump": "o",
      "op": "JUMP"
    },
    "2829": {
      "op": "JUMPDEST"
    },
    "2830": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2832": {
      "op": "DUP1"
    },
    "2833": {
      "op": "DUP3"
    },
    "2834": {
      "op": "MSTORE"
    },
    "2835": {
      "op": "DUP2"
    },
    "2836": {
      "op": "DUP2"
    },
    "2837": {
      "op": "ADD"
    },
    "2838": {
      "op": "MSTORE"
    },
    "2839": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "2872": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2874": {
      "op": "DUP3"
    },
    "2875": {
      "op": "ADD"
    },
    "2876": {
      "op": "MSTORE"
    },
    "2877": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2879": {
      "op": "ADD"
    },
    "2880": {
      "op": "SWAP1"
    },
    "2881": {
      "jump": "o",
      "op": "JUMP"
    },
    "2882": {
      "op": "JUMPDEST"
    },
    "2883": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2885": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2887": {
      "op": "DUP3"
    },
    "2888": {
      "op": "DUP5"
    },
    "2889": {
      "op": "SUB"
    },
    "2890": {
      "op": "SLT"
    },
    "2891": {
      "op": "ISZERO"
    },
    "2892": {
      "op": "PUSH2",
      "value": "0xB54"
    },
    "2895": {
      "op": "JUMPI"
    },
    "2896": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2898": {
      "op": "DUP1"
    },
    "2899": {
      "op": "REVERT"
    },
    "2900": {
      "op": "JUMPDEST"
    },
    "2901": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2903": {
      "op": "MLOAD"
    },
    "2904": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2906": {
      "op": "DUP2"
    },
    "2907": {
      "op": "ADD"
    },
    "2908": {
      "op": "DUP2"
    },
    "2909": {
      "op": "DUP2"
    },
    "2910": {
      "op": "LT"
    },
    "2911": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2920": {
      "op": "DUP3"
    },
    "2921": {
      "op": "GT"
    },
    "2922": {
      "op": "OR"
    },
    "2923": {
      "op": "ISZERO"
    },
    "2924": {
      "op": "PUSH2",
      "value": "0xB85"
    },
    "2927": {
      "op": "JUMPI"
    },
    "2928": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2933": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2935": {
      "op": "SHL"
    },
    "2936": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2938": {
      "op": "MSTORE"
    },
    "2939": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "2941": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2943": {
      "op": "MSTORE"
    },
    "2944": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2946": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2948": {
      "op": "REVERT"
    },
    "2949": {
      "op": "JUMPDEST"
    },
    "2950": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2952": {
      "op": "MSTORE"
    },
    "2953": {
      "op": "DUP3"
    },
    "2954": {
      "op": "MLOAD"
    },
    "2955": {
      "op": "DUP2"
    },
    "2956": {
      "op": "MSTORE"
    },
    "2957": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2959": {
      "op": "SWAP3"
    },
    "2960": {
      "op": "DUP4"
    },
    "2961": {
      "op": "ADD"
    },
    "2962": {
      "op": "MLOAD"
    },
    "2963": {
      "op": "SWAP3"
    },
    "2964": {
      "op": "DUP2"
    },
    "2965": {
      "op": "ADD"
    },
    "2966": {
      "op": "SWAP3"
    },
    "2967": {
      "op": "SWAP1"
    },
    "2968": {
      "op": "SWAP3"
    },
    "2969": {
      "op": "MSTORE"
    },
    "2970": {
      "op": "POP"
    },
    "2971": {
      "op": "SWAP2"
    },
    "2972": {
      "op": "SWAP1"
    },
    "2973": {
      "op": "POP"
    },
    "2974": {
      "jump": "o",
      "op": "JUMP"
    },
    "2975": {
      "op": "JUMPDEST"
    },
    "2976": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2978": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2980": {
      "op": "DUP3"
    },
    "2981": {
      "op": "DUP5"
    },
    "2982": {
      "op": "SUB"
    },
    "2983": {
      "op": "SLT"
    },
    "2984": {
      "op": "ISZERO"
    },
    "2985": {
      "op": "PUSH2",
      "value": "0xBB1"
    },
    "2988": {
      "op": "JUMPI"
    },
    "2989": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2991": {
      "op": "DUP1"
    },
    "2992": {
      "op": "REVERT"
    },
    "2993": {
      "op": "JUMPDEST"
    },
    "2994": {
      "op": "DUP2"
    },
    "2995": {
      "op": "MLOAD"
    },
    "2996": {
      "op": "DUP1"
    },
    "2997": {
      "op": "ISZERO"
    },
    "2998": {
      "op": "ISZERO"
    },
    "2999": {
      "op": "DUP2"
    },
    "3000": {
      "op": "EQ"
    },
    "3001": {
      "op": "PUSH2",
      "value": "0x8D2"
    },
    "3004": {
      "op": "JUMPI"
    },
    "3005": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3007": {
      "op": "DUP1"
    },
    "3008": {
      "op": "REVERT"
    },
    "3009": {
      "op": "JUMPDEST"
    },
    "3010": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3012": {
      "op": "JUMPDEST"
    },
    "3013": {
      "op": "DUP4"
    },
    "3014": {
      "op": "DUP2"
    },
    "3015": {
      "op": "LT"
    },
    "3016": {
      "op": "ISZERO"
    },
    "3017": {
      "op": "PUSH2",
      "value": "0xBDC"
    },
    "3020": {
      "op": "JUMPI"
    },
    "3021": {
      "op": "DUP2"
    },
    "3022": {
      "op": "DUP2"
    },
    "3023": {
      "op": "ADD"
    },
    "3024": {
      "op": "MLOAD"
    },
    "3025": {
      "op": "DUP4"
    },
    "3026": {
      "op": "DUP3"
    },
    "3027": {
      "op": "ADD"
    },
    "3028": {
      "op": "MSTORE"
    },
    "3029": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3031": {
      "op": "ADD"
    },
    "3032": {
      "op": "PUSH2",
      "value": "0xBC4"
    },
    "3035": {
      "op": "JUMP"
    },
    "3036": {
      "op": "JUMPDEST"
    },
    "3037": {
      "op": "DUP4"
    },
    "3038": {
      "op": "DUP2"
    },
    "3039": {
      "op": "GT"
    },
    "3040": {
      "op": "ISZERO"
    },
    "3041": {
      "op": "PUSH2",
      "value": "0x7E3"
    },
    "3044": {
      "op": "JUMPI"
    },
    "3045": {
      "op": "POP"
    },
    "3046": {
      "op": "POP"
    },
    "3047": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3049": {
      "op": "SWAP2"
    },
    "3050": {
      "op": "ADD"
    },
    "3051": {
      "op": "MSTORE"
    },
    "3052": {
      "jump": "o",
      "op": "JUMP"
    },
    "3053": {
      "op": "JUMPDEST"
    },
    "3054": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3056": {
      "op": "DUP3"
    },
    "3057": {
      "op": "MLOAD"
    },
    "3058": {
      "op": "PUSH2",
      "value": "0xBFF"
    },
    "3061": {
      "op": "DUP2"
    },
    "3062": {
      "op": "DUP5"
    },
    "3063": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3065": {
      "op": "DUP8"
    },
    "3066": {
      "op": "ADD"
    },
    "3067": {
      "op": "PUSH2",
      "value": "0xBC1"
    },
    "3070": {
      "jump": "i",
      "op": "JUMP"
    },
    "3071": {
      "op": "JUMPDEST"
    },
    "3072": {
      "op": "SWAP2"
    },
    "3073": {
      "op": "SWAP1"
    },
    "3074": {
      "op": "SWAP2"
    },
    "3075": {
      "op": "ADD"
    },
    "3076": {
      "op": "SWAP3"
    },
    "3077": {
      "op": "SWAP2"
    },
    "3078": {
      "op": "POP"
    },
    "3079": {
      "op": "POP"
    },
    "3080": {
      "jump": "o",
      "op": "JUMP"
    },
    "3081": {
      "op": "JUMPDEST"
    },
    "3082": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3084": {
      "op": "DUP2"
    },
    "3085": {
      "op": "MSTORE"
    },
    "3086": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3088": {
      "op": "DUP3"
    },
    "3089": {
      "op": "MLOAD"
    },
    "3090": {
      "op": "DUP1"
    },
    "3091": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3093": {
      "op": "DUP5"
    },
    "3094": {
      "op": "ADD"
    },
    "3095": {
      "op": "MSTORE"
    },
    "3096": {
      "op": "PUSH2",
      "value": "0xC28"
    },
    "3099": {
      "op": "DUP2"
    },
    "3100": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3102": {
      "op": "DUP6"
    },
    "3103": {
      "op": "ADD"
    },
    "3104": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3106": {
      "op": "DUP8"
    },
    "3107": {
      "op": "ADD"
    },
    "3108": {
      "op": "PUSH2",
      "value": "0xBC1"
    },
    "3111": {
      "jump": "i",
      "op": "JUMP"
    },
    "3112": {
      "op": "JUMPDEST"
    },
    "3113": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3115": {
      "op": "ADD"
    },
    "3116": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3118": {
      "op": "NOT"
    },
    "3119": {
      "op": "AND"
    },
    "3120": {
      "op": "SWAP2"
    },
    "3121": {
      "op": "SWAP1"
    },
    "3122": {
      "op": "SWAP2"
    },
    "3123": {
      "op": "ADD"
    },
    "3124": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3126": {
      "op": "ADD"
    },
    "3127": {
      "op": "SWAP3"
    },
    "3128": {
      "op": "SWAP2"
    },
    "3129": {
      "op": "POP"
    },
    "3130": {
      "op": "POP"
    },
    "3131": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "61d19f0fc7cfe246fb6146512acfa03a77419869",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/IERC20.sol\";\nimport \"OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/access/Ownable.sol\";\nimport \"../interfaces/IProofSubmitter.sol\";\nimport \"./BeamerUtils.sol\";\n\n/// The fill manager.\n///\n/// This contract is responsible for keeping track of filled requests. In addition to allowing\n/// agents to (eventually) prove that they filled requests, it also allows anyone to invalidate\n/// a claim that a request was filled.\n///\n/// It is the only contract that agents need to interact with on the target chain.\ncontract FillManager is Ownable {\n    using SafeERC20 for IERC20;\n\n    /// Emitted when a request has been filled.\n    ///\n    /// .. seealso:: :sol:func:`fillRequest`\n    event RequestFilled(\n        uint256 indexed requestId,\n        bytes32 fillId,\n        uint256 indexed sourceChainId,\n        address indexed targetTokenAddress,\n        address filler,\n        uint256 amount\n    );\n\n    /// Emitted when a fill hash has been invalidated.\n    ///\n    /// .. seealso:: :sol:func:`invalidateFill`\n    event HashInvalidated(\n        bytes32 indexed requestHash,\n        bytes32 indexed fillId,\n        bytes32 indexed fillHash\n    );\n\n    /// Emitted when a liquidity provider has been added to the set of allowed\n    /// liquidity providers.\n    ///\n    /// .. seealso:: :sol:func:`addAllowedLP`\n    event LPAdded(address lp);\n\n    /// Emitted when a liquidity provider has been removed from the set of allowed\n    /// liquidity providers.\n    ///\n    /// .. seealso:: :sol:func:`removeAllowedLP`\n    event LPRemoved(address lp);\n\n    /// The L1 :sol:contract:`Resolver` contract to be used for L1 resolution.\n    address public l1Resolver;\n\n    /// The proof submitter contract to be used for submitting L1 proofs.\n    ///\n    /// The specific implementation of the :sol:interface:`IProofSubmitter` interface\n    /// is chain-dependent.\n    IProofSubmitter public proofSubmitter;\n\n    /// Maps request hashes to fill hashes.\n    mapping(bytes32 => bytes32) public fills;\n\n    /// The set of liquidity providers that are allowed to fill requests.\n    mapping(address => bool) public allowedLPs;\n\n    /// Constructor.\n    ///\n    /// @param _l1Resolver The L1 resolver contract.\n    /// @param _proofSubmitter The proof submitter.\n    constructor(address _l1Resolver, address _proofSubmitter) {\n        l1Resolver = _l1Resolver;\n        proofSubmitter = IProofSubmitter(_proofSubmitter);\n    }\n\n    /// Fill the specified request.\n    ///\n    /// The caller must have approved at least ``amount`` tokens for :sol:contract:`FillManager`\n    /// with the ERC20 token contract at ``targetTokenAddress``. The tokens will be immediately\n    /// sent to ``targetReceiverAddress`` and a fill proof will be generated, which can later\n    /// be used to trigger L1 resolution, if needed.\n    ///\n    /// @param requestId The request ID.\n    /// @param sourceChainId The source chain ID.\n    /// @param targetTokenAddress Address of the token contract on the target chain.\n    /// @param targetReceiverAddress Recipient address on the target chain.\n    /// @param amount Amount of tokens to transfer. Does not include fees.\n    /// @return The fill ID.\n    function fillRequest(\n        uint256 requestId,\n        uint256 sourceChainId,\n        address targetTokenAddress,\n        address targetReceiverAddress,\n        uint256 amount\n    ) external returns (bytes32) {\n        require(allowedLPs[msg.sender], \"Sender not whitelisted\");\n        bytes32 requestHash = BeamerUtils.createRequestHash(\n            requestId,\n            sourceChainId,\n            block.chainid,\n            targetTokenAddress,\n            targetReceiverAddress,\n            amount\n        );\n\n        require(fills[requestHash] == bytes32(0), \"Already filled\");\n\n        IERC20 token = IERC20(targetTokenAddress);\n        token.safeTransferFrom(msg.sender, targetReceiverAddress, amount);\n\n        IProofSubmitter.ProofReceipt memory proofReceipt = proofSubmitter\n            .submitProof(l1Resolver, sourceChainId, requestHash, msg.sender);\n        require(proofReceipt.fillId != 0, \"Submitting proof data failed\");\n\n        fills[requestHash] = proofReceipt.fillHash;\n\n        emit RequestFilled(\n            requestId,\n            proofReceipt.fillId,\n            sourceChainId,\n            targetTokenAddress,\n            msg.sender,\n            amount\n        );\n\n        return proofReceipt.fillId;\n    }\n\n    /// Invalidate the specified fill.\n    ///\n    /// In cases that a claim has been made on the source chain, but without a corresponding fill\n    /// actually happening on the target chain, anyone can call this function to mark the fill\n    /// as invalid. This is typically followed by a challenge game on the source chain, which\n    /// the dishonest claimer is guaranteed to lose as soon as the information about the invalid\n    /// fill (so called \"non-fill proof\") is propagated to the source chain via L1 resolution.\n    ///\n    /// @param requestHash The request hash.\n    /// @param fillId The fill ID.\n    /// @param sourceChainId The source chain ID.\n    function invalidateFill(\n        bytes32 requestHash,\n        bytes32 fillId,\n        uint256 sourceChainId\n    ) external {\n        bytes32 fillHash = BeamerUtils.createFillHash(requestHash, fillId);\n        require(fills[requestHash] != fillHash, \"Fill hash valid\");\n        proofSubmitter.submitNonFillProof(\n            l1Resolver,\n            sourceChainId,\n            requestHash,\n            fillId\n        );\n        emit HashInvalidated(requestHash, fillId, fillHash);\n    }\n\n    /// Add a liquidity provider to the set of allowed liquidity providers.\n    ///\n    /// Only allowed liquidity providers can fill requests.\n    ///\n    /// .. note:: This function can only be called by the contract owner.\n    ///\n    /// @param newLP The liquidity provider.\n    function addAllowedLP(address newLP) public onlyOwner {\n        allowedLPs[newLP] = true;\n\n        emit LPAdded(newLP);\n    }\n\n    /// Remove a liquidity provider from the set of allowed liquidity providers.\n    ///\n    /// .. note:: This function can only be called by the contract owner.\n    ///\n    /// @param oldLP The liquidity provider.\n    function removeAllowedLP(address oldLP) public onlyOwner {\n        delete allowedLPs[oldLP];\n\n        emit LPRemoved(oldLP);\n    }\n}\n",
  "sourceMap": "734:5801:10:-:0;;;2472:158;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;921:32:0;719:10:6;921:18:0;:32::i;:::-;2540:10:10;:24;;-1:-1:-1;;;;;2540:24:10;;;-1:-1:-1;;;;;;2540:24:10;;;;;;;2574:14;:49;;;;;;;;;;;734:5801;;2270:187:0;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;14:177:25:-;93:13;;-1:-1:-1;;;;;135:31:25;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;:::-;734:5801:10;;;;;;",
  "sourcePath": "contracts/contracts/FillManager.sol",
  "type": "contract"
}