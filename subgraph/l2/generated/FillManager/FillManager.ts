// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class HashInvalidated extends ethereum.Event {
  get params(): HashInvalidated__Params {
    return new HashInvalidated__Params(this);
  }
}

export class HashInvalidated__Params {
  _event: HashInvalidated;

  constructor(event: HashInvalidated) {
    this._event = event;
  }

  get requestHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get fillId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get fillHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class LPAdded extends ethereum.Event {
  get params(): LPAdded__Params {
    return new LPAdded__Params(this);
  }
}

export class LPAdded__Params {
  _event: LPAdded;

  constructor(event: LPAdded) {
    this._event = event;
  }

  get lp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LPRemoved extends ethereum.Event {
  get params(): LPRemoved__Params {
    return new LPRemoved__Params(this);
  }
}

export class LPRemoved__Params {
  _event: LPRemoved;

  constructor(event: LPRemoved) {
    this._event = event;
  }

  get lp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FillManagerOwnershipTransferred extends ethereum.Event {
  get params(): FillManagerOwnershipTransferred__Params {
    return new FillManagerOwnershipTransferred__Params(this);
  }
}

export class FillManagerOwnershipTransferred__Params {
  _event: FillManagerOwnershipTransferred;

  constructor(event: FillManagerOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestFilled extends ethereum.Event {
  get params(): RequestFilled__Params {
    return new RequestFilled__Params(this);
  }
}

export class RequestFilled__Params {
  _event: RequestFilled;

  constructor(event: RequestFilled) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fillId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get sourceChainId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get targetTokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get filler(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class FillManager extends ethereum.SmartContract {
  static bind(address: Address): FillManager {
    return new FillManager("FillManager", address);
  }

  allowedLPs(param0: Address): boolean {
    let result = super.call("allowedLPs", "allowedLPs(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_allowedLPs(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("allowedLPs", "allowedLPs(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fillRequest(
    requestId: BigInt,
    sourceChainId: BigInt,
    targetTokenAddress: Address,
    targetReceiverAddress: Address,
    amount: BigInt
  ): Bytes {
    let result = super.call(
      "fillRequest",
      "fillRequest(uint256,uint256,address,address,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromUnsignedBigInt(sourceChainId),
        ethereum.Value.fromAddress(targetTokenAddress),
        ethereum.Value.fromAddress(targetReceiverAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBytes();
  }

  try_fillRequest(
    requestId: BigInt,
    sourceChainId: BigInt,
    targetTokenAddress: Address,
    targetReceiverAddress: Address,
    amount: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "fillRequest",
      "fillRequest(uint256,uint256,address,address,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromUnsignedBigInt(sourceChainId),
        ethereum.Value.fromAddress(targetTokenAddress),
        ethereum.Value.fromAddress(targetReceiverAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fills(param0: Bytes): Bytes {
    let result = super.call("fills", "fills(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBytes();
  }

  try_fills(param0: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("fills", "fills(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  l1Resolver(): Address {
    let result = super.call("l1Resolver", "l1Resolver():(address)", []);

    return result[0].toAddress();
  }

  try_l1Resolver(): ethereum.CallResult<Address> {
    let result = super.tryCall("l1Resolver", "l1Resolver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proofSubmitter(): Address {
    let result = super.call("proofSubmitter", "proofSubmitter():(address)", []);

    return result[0].toAddress();
  }

  try_proofSubmitter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proofSubmitter",
      "proofSubmitter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _l1Resolver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _proofSubmitter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAllowedLPCall extends ethereum.Call {
  get inputs(): AddAllowedLPCall__Inputs {
    return new AddAllowedLPCall__Inputs(this);
  }

  get outputs(): AddAllowedLPCall__Outputs {
    return new AddAllowedLPCall__Outputs(this);
  }
}

export class AddAllowedLPCall__Inputs {
  _call: AddAllowedLPCall;

  constructor(call: AddAllowedLPCall) {
    this._call = call;
  }

  get newLP(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAllowedLPCall__Outputs {
  _call: AddAllowedLPCall;

  constructor(call: AddAllowedLPCall) {
    this._call = call;
  }
}

export class FillRequestCall extends ethereum.Call {
  get inputs(): FillRequestCall__Inputs {
    return new FillRequestCall__Inputs(this);
  }

  get outputs(): FillRequestCall__Outputs {
    return new FillRequestCall__Outputs(this);
  }
}

export class FillRequestCall__Inputs {
  _call: FillRequestCall;

  constructor(call: FillRequestCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sourceChainId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get targetTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get targetReceiverAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class FillRequestCall__Outputs {
  _call: FillRequestCall;

  constructor(call: FillRequestCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InvalidateFillCall extends ethereum.Call {
  get inputs(): InvalidateFillCall__Inputs {
    return new InvalidateFillCall__Inputs(this);
  }

  get outputs(): InvalidateFillCall__Outputs {
    return new InvalidateFillCall__Outputs(this);
  }
}

export class InvalidateFillCall__Inputs {
  _call: InvalidateFillCall;

  constructor(call: InvalidateFillCall) {
    this._call = call;
  }

  get requestHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get fillId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sourceChainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InvalidateFillCall__Outputs {
  _call: InvalidateFillCall;

  constructor(call: InvalidateFillCall) {
    this._call = call;
  }
}

export class RemoveAllowedLPCall extends ethereum.Call {
  get inputs(): RemoveAllowedLPCall__Inputs {
    return new RemoveAllowedLPCall__Inputs(this);
  }

  get outputs(): RemoveAllowedLPCall__Outputs {
    return new RemoveAllowedLPCall__Outputs(this);
  }
}

export class RemoveAllowedLPCall__Inputs {
  _call: RemoveAllowedLPCall;

  constructor(call: RemoveAllowedLPCall) {
    this._call = call;
  }

  get oldLP(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAllowedLPCall__Outputs {
  _call: RemoveAllowedLPCall;

  constructor(call: RemoveAllowedLPCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
