// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChainUpdated extends ethereum.Event {
  get params(): ChainUpdated__Params {
    return new ChainUpdated__Params(this);
  }
}

export class ChainUpdated__Params {
  _event: ChainUpdated;

  constructor(event: ChainUpdated) {
    this._event = event;
  }

  get chainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get finalityPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get transferCost(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get targetWeightPPM(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimMade extends ethereum.Event {
  get params(): ClaimMade__Params {
    return new ClaimMade__Params(this);
  }
}

export class ClaimMade__Params {
  _event: ClaimMade;

  constructor(event: ClaimMade) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get claimId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get claimer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get claimerStake(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lastChallenger(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get challengerStakeTotal(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get termination(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fillId(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }
}

export class ClaimStakeWithdrawn extends ethereum.Event {
  get params(): ClaimStakeWithdrawn__Params {
    return new ClaimStakeWithdrawn__Params(this);
  }
}

export class ClaimStakeWithdrawn__Params {
  _event: ClaimStakeWithdrawn;

  constructor(event: ClaimStakeWithdrawn) {
    this._event = event;
  }

  get claimId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requestId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get stakeRecipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DepositWithdrawn extends ethereum.Event {
  get params(): DepositWithdrawn__Params {
    return new DepositWithdrawn__Params(this);
  }
}

export class DepositWithdrawn__Params {
  _event: DepositWithdrawn;

  constructor(event: DepositWithdrawn) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeesUpdated extends ethereum.Event {
  get params(): FeesUpdated__Params {
    return new FeesUpdated__Params(this);
  }
}

export class FeesUpdated__Params {
  _event: FeesUpdated;

  constructor(event: FeesUpdated) {
    this._event = event;
  }

  get minFeePPM(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lpFeePPM(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get protocolFeePPM(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FillInvalidatedResolved extends ethereum.Event {
  get params(): FillInvalidatedResolved__Params {
    return new FillInvalidatedResolved__Params(this);
  }
}

export class FillInvalidatedResolved__Params {
  _event: FillInvalidatedResolved;

  constructor(event: FillInvalidatedResolved) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get fillId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class LpAdded extends ethereum.Event {
  get params(): LpAdded__Params {
    return new LpAdded__Params(this);
  }
}

export class LpAdded__Params {
  _event: LpAdded;

  constructor(event: LpAdded) {
    this._event = event;
  }

  get lp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LpRemoved extends ethereum.Event {
  get params(): LpRemoved__Params {
    return new LpRemoved__Params(this);
  }
}

export class LpRemoved__Params {
  _event: LpRemoved;

  constructor(event: LpRemoved) {
    this._event = event;
  }

  get lp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RequestCreated extends ethereum.Event {
  get params(): RequestCreated__Params {
    return new RequestCreated__Params(this);
  }
}

export class RequestCreated__Params {
  _event: RequestCreated;

  constructor(event: RequestCreated) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get targetChainId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sourceTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get targetTokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get sourceAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get targetAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get validUntil(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get lpFee(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get protocolFee(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class RequestResolved extends ethereum.Event {
  get params(): RequestResolved__Params {
    return new RequestResolved__Params(this);
  }
}

export class RequestResolved__Params {
  _event: RequestResolved;

  constructor(event: RequestResolved) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get filler(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fillId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class TokenUpdated extends ethereum.Event {
  get params(): TokenUpdated__Params {
    return new TokenUpdated__Params(this);
  }
}

export class TokenUpdated__Params {
  _event: TokenUpdated;

  constructor(event: TokenUpdated) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transferLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ethInToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RequestManager__chainsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getFinalityPeriod(): BigInt {
    return this.value0;
  }

  getTransferCost(): BigInt {
    return this.value1;
  }

  getTargetWeightPPM(): BigInt {
    return this.value2;
  }
}

export class RequestManager__claimsResult {
  value0: Bytes;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: Bytes;

  constructor(
    value0: Bytes,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromFixedBytes(this.value7));
    return map;
  }

  getRequestId(): Bytes {
    return this.value0;
  }

  getClaimer(): Address {
    return this.value1;
  }

  getClaimerStake(): BigInt {
    return this.value2;
  }

  getLastChallenger(): Address {
    return this.value3;
  }

  getChallengerStakeTotal(): BigInt {
    return this.value4;
  }

  getWithdrawnAmount(): BigInt {
    return this.value5;
  }

  getTermination(): BigInt {
    return this.value6;
  }

  getFillId(): Bytes {
    return this.value7;
  }
}

export class RequestManager__requestsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: Address;
  value10: Bytes;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: Address,
    value10: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    map.set("value10", ethereum.Value.fromFixedBytes(this.value10));
    return map;
  }

  getSender(): Address {
    return this.value0;
  }

  getSourceTokenAddress(): Address {
    return this.value1;
  }

  getTargetChainId(): BigInt {
    return this.value2;
  }

  getAmount(): BigInt {
    return this.value3;
  }

  getValidUntil(): BigInt {
    return this.value4;
  }

  getLpFee(): BigInt {
    return this.value5;
  }

  getProtocolFee(): BigInt {
    return this.value6;
  }

  getActiveClaims(): BigInt {
    return this.value7;
  }

  getWithdrawClaimId(): BigInt {
    return this.value8;
  }

  getFiller(): Address {
    return this.value9;
  }

  getFillId(): Bytes {
    return this.value10;
  }
}

export class RequestManager__tokensResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTransferLimit(): BigInt {
    return this.value0;
  }

  getEthInToken(): BigInt {
    return this.value1;
  }

  getCollectedProtocolFees(): BigInt {
    return this.value2;
  }
}

export class RequestManager extends ethereum.SmartContract {
  static bind(address: Address): RequestManager {
    return new RequestManager("RequestManager", address);
  }

  CLAIM_ID_WITHDRAWN_EXPIRED(): BigInt {
    let result = super.call(
      "CLAIM_ID_WITHDRAWN_EXPIRED",
      "CLAIM_ID_WITHDRAWN_EXPIRED():(uint96)",
      []
    );

    return result[0].toBigInt();
  }

  try_CLAIM_ID_WITHDRAWN_EXPIRED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CLAIM_ID_WITHDRAWN_EXPIRED",
      "CLAIM_ID_WITHDRAWN_EXPIRED():(uint96)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_VALIDITY_PERIOD(): BigInt {
    let result = super.call(
      "MAX_VALIDITY_PERIOD",
      "MAX_VALIDITY_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_VALIDITY_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_VALIDITY_PERIOD",
      "MAX_VALIDITY_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_VALIDITY_PERIOD(): BigInt {
    let result = super.call(
      "MIN_VALIDITY_PERIOD",
      "MIN_VALIDITY_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_VALIDITY_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_VALIDITY_PERIOD",
      "MIN_VALIDITY_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedLps(lp: Address): boolean {
    let result = super.call("allowedLps", "allowedLps(address):(bool)", [
      ethereum.Value.fromAddress(lp)
    ]);

    return result[0].toBoolean();
  }

  try_allowedLps(lp: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("allowedLps", "allowedLps(address):(bool)", [
      ethereum.Value.fromAddress(lp)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  callers(callerChainId: BigInt, param1: BigInt): Address {
    let result = super.call("callers", "callers(uint256,uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(callerChainId),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_callers(
    callerChainId: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "callers",
      "callers(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(callerChainId),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  chains(chainId: BigInt): RequestManager__chainsResult {
    let result = super.call(
      "chains",
      "chains(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(chainId)]
    );

    return new RequestManager__chainsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_chains(
    chainId: BigInt
  ): ethereum.CallResult<RequestManager__chainsResult> {
    let result = super.tryCall(
      "chains",
      "chains(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(chainId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RequestManager__chainsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  challengePeriodExtension(): BigInt {
    let result = super.call(
      "challengePeriodExtension",
      "challengePeriodExtension():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_challengePeriodExtension(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "challengePeriodExtension",
      "challengePeriodExtension():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimPeriod(): BigInt {
    let result = super.call("claimPeriod", "claimPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimPeriod", "claimPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRequestExtension(): BigInt {
    let result = super.call(
      "claimRequestExtension",
      "claimRequestExtension():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_claimRequestExtension(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRequestExtension",
      "claimRequestExtension():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimStake(): BigInt {
    let result = super.call("claimStake", "claimStake():(uint96)", []);

    return result[0].toBigInt();
  }

  try_claimStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimStake", "claimStake():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claims(claimId: BigInt): RequestManager__claimsResult {
    let result = super.call(
      "claims",
      "claims(uint96):(bytes32,address,uint96,address,uint96,uint256,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(claimId)]
    );

    return new RequestManager__claimsResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBytes()
    );
  }

  try_claims(
    claimId: BigInt
  ): ethereum.CallResult<RequestManager__claimsResult> {
    let result = super.tryCall(
      "claims",
      "claims(uint96):(bytes32,address,uint96,address,uint96,uint256,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(claimId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RequestManager__claimsResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBytes()
      )
    );
  }

  createRequest(
    targetChainId: BigInt,
    sourceTokenAddress: Address,
    targetTokenAddress: Address,
    targetAddress: Address,
    amount: BigInt,
    validityPeriod: BigInt
  ): Bytes {
    let result = super.call(
      "createRequest",
      "createRequest(uint256,address,address,address,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(targetChainId),
        ethereum.Value.fromAddress(sourceTokenAddress),
        ethereum.Value.fromAddress(targetTokenAddress),
        ethereum.Value.fromAddress(targetAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(validityPeriod)
      ]
    );

    return result[0].toBytes();
  }

  try_createRequest(
    targetChainId: BigInt,
    sourceTokenAddress: Address,
    targetTokenAddress: Address,
    targetAddress: Address,
    amount: BigInt,
    validityPeriod: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createRequest",
      "createRequest(uint256,address,address,address,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(targetChainId),
        ethereum.Value.fromAddress(sourceTokenAddress),
        ethereum.Value.fromAddress(targetTokenAddress),
        ethereum.Value.fromAddress(targetAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(validityPeriod)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  currentNonce(): BigInt {
    let result = super.call("currentNonce", "currentNonce():(uint96)", []);

    return result[0].toBigInt();
  }

  try_currentNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentNonce", "currentNonce():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isInvalidFill(requestId: Bytes, fillId: Bytes): boolean {
    let result = super.call(
      "isInvalidFill",
      "isInvalidFill(bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(requestId),
        ethereum.Value.fromFixedBytes(fillId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isInvalidFill(
    requestId: Bytes,
    fillId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInvalidFill",
      "isInvalidFill(bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(requestId),
        ethereum.Value.fromFixedBytes(fillId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWithdrawn(requestId: Bytes): boolean {
    let result = super.call("isWithdrawn", "isWithdrawn(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(requestId)
    ]);

    return result[0].toBoolean();
  }

  try_isWithdrawn(requestId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isWithdrawn", "isWithdrawn(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(requestId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lpFee(targetChainId: BigInt, tokenAddress: Address, amount: BigInt): BigInt {
    let result = super.call(
      "lpFee",
      "lpFee(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(targetChainId),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_lpFee(
    targetChainId: BigInt,
    tokenAddress: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lpFee",
      "lpFee(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(targetChainId),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpFeePPM(): BigInt {
    let result = super.call("lpFeePPM", "lpFeePPM():(uint32)", []);

    return result[0].toBigInt();
  }

  try_lpFeePPM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lpFeePPM", "lpFeePPM():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minFeePPM(): BigInt {
    let result = super.call("minFeePPM", "minFeePPM():(uint32)", []);

    return result[0].toBigInt();
  }

  try_minFeePPM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minFeePPM", "minFeePPM():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minLpFee(targetChainId: BigInt, tokenAddress: Address): BigInt {
    let result = super.call("minLpFee", "minLpFee(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(targetChainId),
      ethereum.Value.fromAddress(tokenAddress)
    ]);

    return result[0].toBigInt();
  }

  try_minLpFee(
    targetChainId: BigInt,
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minLpFee",
      "minLpFee(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(targetChainId),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocolFee(amount: BigInt): BigInt {
    let result = super.call("protocolFee", "protocolFee(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_protocolFee(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFee",
      "protocolFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeePPM(): BigInt {
    let result = super.call("protocolFeePPM", "protocolFeePPM():(uint32)", []);

    return result[0].toBigInt();
  }

  try_protocolFeePPM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeePPM",
      "protocolFeePPM():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requests(requestId: Bytes): RequestManager__requestsResult {
    let result = super.call(
      "requests",
      "requests(bytes32):(address,address,uint256,uint256,uint32,uint256,uint256,uint32,uint96,address,bytes32)",
      [ethereum.Value.fromFixedBytes(requestId)]
    );

    return new RequestManager__requestsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toAddress(),
      result[10].toBytes()
    );
  }

  try_requests(
    requestId: Bytes
  ): ethereum.CallResult<RequestManager__requestsResult> {
    let result = super.tryCall(
      "requests",
      "requests(bytes32):(address,address,uint256,uint256,uint32,uint256,uint256,uint32,uint96,address,bytes32)",
      [ethereum.Value.fromFixedBytes(requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RequestManager__requestsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toAddress(),
        value[10].toBytes()
      )
    );
  }

  tokens(tokenAddress: Address): RequestManager__tokensResult {
    let result = super.call(
      "tokens",
      "tokens(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return new RequestManager__tokensResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_tokens(
    tokenAddress: Address
  ): ethereum.CallResult<RequestManager__tokensResult> {
    let result = super.tryCall(
      "tokens",
      "tokens(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RequestManager__tokensResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  totalFee(
    targetChainId: BigInt,
    tokenAddress: Address,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "totalFee",
      "totalFee(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(targetChainId),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalFee(
    targetChainId: BigInt,
    tokenAddress: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFee",
      "totalFee(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(targetChainId),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferableAmount(
    targetChainId: BigInt,
    tokenAddress: Address,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "transferableAmount",
      "transferableAmount(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(targetChainId),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferableAmount(
    targetChainId: BigInt,
    tokenAddress: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferableAmount",
      "transferableAmount(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(targetChainId),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(participant: Address, claimId: BigInt): Address {
    let result = super.call("withdraw", "withdraw(address,uint96):(address)", [
      ethereum.Value.fromAddress(participant),
      ethereum.Value.fromUnsignedBigInt(claimId)
    ]);

    return result[0].toAddress();
  }

  try_withdraw(
    participant: Address,
    claimId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(address,uint96):(address)",
      [
        ethereum.Value.fromAddress(participant),
        ethereum.Value.fromUnsignedBigInt(claimId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdraw1(claimId: BigInt): Address {
    let result = super.call("withdraw", "withdraw(uint96):(address)", [
      ethereum.Value.fromUnsignedBigInt(claimId)
    ]);

    return result[0].toAddress();
  }

  try_withdraw1(claimId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("withdraw", "withdraw(uint96):(address)", [
      ethereum.Value.fromUnsignedBigInt(claimId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _claimStake(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _claimRequestExtension(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _claimPeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _challengePeriodExtension(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAllowedLpCall extends ethereum.Call {
  get inputs(): AddAllowedLpCall__Inputs {
    return new AddAllowedLpCall__Inputs(this);
  }

  get outputs(): AddAllowedLpCall__Outputs {
    return new AddAllowedLpCall__Outputs(this);
  }
}

export class AddAllowedLpCall__Inputs {
  _call: AddAllowedLpCall;

  constructor(call: AddAllowedLpCall) {
    this._call = call;
  }

  get newLp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAllowedLpCall__Outputs {
  _call: AddAllowedLpCall;

  constructor(call: AddAllowedLpCall) {
    this._call = call;
  }
}

export class AddCallerCall extends ethereum.Call {
  get inputs(): AddCallerCall__Inputs {
    return new AddCallerCall__Inputs(this);
  }

  get outputs(): AddCallerCall__Outputs {
    return new AddCallerCall__Outputs(this);
  }
}

export class AddCallerCall__Inputs {
  _call: AddCallerCall;

  constructor(call: AddCallerCall) {
    this._call = call;
  }

  get callerChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get caller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get messenger(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddCallerCall__Outputs {
  _call: AddCallerCall;

  constructor(call: AddCallerCall) {
    this._call = call;
  }
}

export class AddCaller1Call extends ethereum.Call {
  get inputs(): AddCaller1Call__Inputs {
    return new AddCaller1Call__Inputs(this);
  }

  get outputs(): AddCaller1Call__Outputs {
    return new AddCaller1Call__Outputs(this);
  }
}

export class AddCaller1Call__Inputs {
  _call: AddCaller1Call;

  constructor(call: AddCaller1Call) {
    this._call = call;
  }

  get caller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddCaller1Call__Outputs {
  _call: AddCaller1Call;

  constructor(call: AddCaller1Call) {
    this._call = call;
  }
}

export class ChallengeClaimCall extends ethereum.Call {
  get inputs(): ChallengeClaimCall__Inputs {
    return new ChallengeClaimCall__Inputs(this);
  }

  get outputs(): ChallengeClaimCall__Outputs {
    return new ChallengeClaimCall__Outputs(this);
  }
}

export class ChallengeClaimCall__Inputs {
  _call: ChallengeClaimCall;

  constructor(call: ChallengeClaimCall) {
    this._call = call;
  }

  get claimId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChallengeClaimCall__Outputs {
  _call: ChallengeClaimCall;

  constructor(call: ChallengeClaimCall) {
    this._call = call;
  }
}

export class ClaimRequestCall extends ethereum.Call {
  get inputs(): ClaimRequestCall__Inputs {
    return new ClaimRequestCall__Inputs(this);
  }

  get outputs(): ClaimRequestCall__Outputs {
    return new ClaimRequestCall__Outputs(this);
  }
}

export class ClaimRequestCall__Inputs {
  _call: ClaimRequestCall;

  constructor(call: ClaimRequestCall) {
    this._call = call;
  }

  get claimer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get requestId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get fillId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ClaimRequestCall__Outputs {
  _call: ClaimRequestCall;

  constructor(call: ClaimRequestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimRequest1Call extends ethereum.Call {
  get inputs(): ClaimRequest1Call__Inputs {
    return new ClaimRequest1Call__Inputs(this);
  }

  get outputs(): ClaimRequest1Call__Outputs {
    return new ClaimRequest1Call__Outputs(this);
  }
}

export class ClaimRequest1Call__Inputs {
  _call: ClaimRequest1Call;

  constructor(call: ClaimRequest1Call) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get fillId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ClaimRequest1Call__Outputs {
  _call: ClaimRequest1Call;

  constructor(call: ClaimRequest1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateRequestCall extends ethereum.Call {
  get inputs(): CreateRequestCall__Inputs {
    return new CreateRequestCall__Inputs(this);
  }

  get outputs(): CreateRequestCall__Outputs {
    return new CreateRequestCall__Outputs(this);
  }
}

export class CreateRequestCall__Inputs {
  _call: CreateRequestCall;

  constructor(call: CreateRequestCall) {
    this._call = call;
  }

  get targetChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sourceTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get targetTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get targetAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get validityPeriod(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateRequestCall__Outputs {
  _call: CreateRequestCall;

  constructor(call: CreateRequestCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InvalidateFillCall extends ethereum.Call {
  get inputs(): InvalidateFillCall__Inputs {
    return new InvalidateFillCall__Inputs(this);
  }

  get outputs(): InvalidateFillCall__Outputs {
    return new InvalidateFillCall__Outputs(this);
  }
}

export class InvalidateFillCall__Inputs {
  _call: InvalidateFillCall;

  constructor(call: InvalidateFillCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get fillId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get resolutionChainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InvalidateFillCall__Outputs {
  _call: InvalidateFillCall;

  constructor(call: InvalidateFillCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveAllowedLpCall extends ethereum.Call {
  get inputs(): RemoveAllowedLpCall__Inputs {
    return new RemoveAllowedLpCall__Inputs(this);
  }

  get outputs(): RemoveAllowedLpCall__Outputs {
    return new RemoveAllowedLpCall__Outputs(this);
  }
}

export class RemoveAllowedLpCall__Inputs {
  _call: RemoveAllowedLpCall;

  constructor(call: RemoveAllowedLpCall) {
    this._call = call;
  }

  get oldLp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAllowedLpCall__Outputs {
  _call: RemoveAllowedLpCall;

  constructor(call: RemoveAllowedLpCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResolveRequestCall extends ethereum.Call {
  get inputs(): ResolveRequestCall__Inputs {
    return new ResolveRequestCall__Inputs(this);
  }

  get outputs(): ResolveRequestCall__Outputs {
    return new ResolveRequestCall__Outputs(this);
  }
}

export class ResolveRequestCall__Inputs {
  _call: ResolveRequestCall;

  constructor(call: ResolveRequestCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get fillId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get resolutionChainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get filler(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ResolveRequestCall__Outputs {
  _call: ResolveRequestCall;

  constructor(call: ResolveRequestCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateChainCall extends ethereum.Call {
  get inputs(): UpdateChainCall__Inputs {
    return new UpdateChainCall__Inputs(this);
  }

  get outputs(): UpdateChainCall__Outputs {
    return new UpdateChainCall__Outputs(this);
  }
}

export class UpdateChainCall__Inputs {
  _call: UpdateChainCall;

  constructor(call: UpdateChainCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get finalityPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get transferCost(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get targetWeightPPM(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateChainCall__Outputs {
  _call: UpdateChainCall;

  constructor(call: UpdateChainCall) {
    this._call = call;
  }
}

export class UpdateFeesCall extends ethereum.Call {
  get inputs(): UpdateFeesCall__Inputs {
    return new UpdateFeesCall__Inputs(this);
  }

  get outputs(): UpdateFeesCall__Outputs {
    return new UpdateFeesCall__Outputs(this);
  }
}

export class UpdateFeesCall__Inputs {
  _call: UpdateFeesCall;

  constructor(call: UpdateFeesCall) {
    this._call = call;
  }

  get _minFeePPM(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpFeePPM(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _protocolFeePPM(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateFeesCall__Outputs {
  _call: UpdateFeesCall;

  constructor(call: UpdateFeesCall) {
    this._call = call;
  }
}

export class UpdateTokenCall extends ethereum.Call {
  get inputs(): UpdateTokenCall__Inputs {
    return new UpdateTokenCall__Inputs(this);
  }

  get outputs(): UpdateTokenCall__Outputs {
    return new UpdateTokenCall__Outputs(this);
  }
}

export class UpdateTokenCall__Inputs {
  _call: UpdateTokenCall;

  constructor(call: UpdateTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transferLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ethInToken(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateTokenCall__Outputs {
  _call: UpdateTokenCall;

  constructor(call: UpdateTokenCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get participant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get claimId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Withdraw1Call extends ethereum.Call {
  get inputs(): Withdraw1Call__Inputs {
    return new Withdraw1Call__Inputs(this);
  }

  get outputs(): Withdraw1Call__Outputs {
    return new Withdraw1Call__Outputs(this);
  }
}

export class Withdraw1Call__Inputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }

  get claimId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Withdraw1Call__Outputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class WithdrawExpiredRequestCall extends ethereum.Call {
  get inputs(): WithdrawExpiredRequestCall__Inputs {
    return new WithdrawExpiredRequestCall__Inputs(this);
  }

  get outputs(): WithdrawExpiredRequestCall__Outputs {
    return new WithdrawExpiredRequestCall__Outputs(this);
  }
}

export class WithdrawExpiredRequestCall__Inputs {
  _call: WithdrawExpiredRequestCall;

  constructor(call: WithdrawExpiredRequestCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class WithdrawExpiredRequestCall__Outputs {
  _call: WithdrawExpiredRequestCall;

  constructor(call: WithdrawExpiredRequestCall) {
    this._call = call;
  }
}

export class WithdrawProtocolFeesCall extends ethereum.Call {
  get inputs(): WithdrawProtocolFeesCall__Inputs {
    return new WithdrawProtocolFeesCall__Inputs(this);
  }

  get outputs(): WithdrawProtocolFeesCall__Outputs {
    return new WithdrawProtocolFeesCall__Outputs(this);
  }
}

export class WithdrawProtocolFeesCall__Inputs {
  _call: WithdrawProtocolFeesCall;

  constructor(call: WithdrawProtocolFeesCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawProtocolFeesCall__Outputs {
  _call: WithdrawProtocolFeesCall;

  constructor(call: WithdrawProtocolFeesCall) {
    this._call = call;
  }
}
