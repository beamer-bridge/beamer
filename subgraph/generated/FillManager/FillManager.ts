// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FillInvalidated extends ethereum.Event {
  get params(): FillInvalidated__Params {
    return new FillInvalidated__Params(this);
  }
}

export class FillInvalidated__Params {
  _event: FillInvalidated;

  constructor(event: FillInvalidated) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get fillId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class LpAdded extends ethereum.Event {
  get params(): LpAdded__Params {
    return new LpAdded__Params(this);
  }
}

export class LpAdded__Params {
  _event: LpAdded;

  constructor(event: LpAdded) {
    this._event = event;
  }

  get lp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LpRemoved extends ethereum.Event {
  get params(): LpRemoved__Params {
    return new LpRemoved__Params(this);
  }
}

export class LpRemoved__Params {
  _event: LpRemoved;

  constructor(event: LpRemoved) {
    this._event = event;
  }

  get lp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestFilled extends ethereum.Event {
  get params(): RequestFilled__Params {
    return new RequestFilled__Params(this);
  }
}

export class RequestFilled__Params {
  _event: RequestFilled;

  constructor(event: RequestFilled) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get fillId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get sourceChainId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get targetTokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get filler(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class FillManager extends ethereum.SmartContract {
  static bind(address: Address): FillManager {
    return new FillManager("FillManager", address);
  }

  allowedLps(lp: Address): boolean {
    let result = super.call("allowedLps", "allowedLps(address):(bool)", [
      ethereum.Value.fromAddress(lp)
    ]);

    return result[0].toBoolean();
  }

  try_allowedLps(lp: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("allowedLps", "allowedLps(address):(bool)", [
      ethereum.Value.fromAddress(lp)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fillRequest(
    sourceChainId: BigInt,
    targetTokenAddress: Address,
    targetReceiverAddress: Address,
    amount: BigInt,
    nonce: BigInt
  ): Bytes {
    let result = super.call(
      "fillRequest",
      "fillRequest(uint256,address,address,uint256,uint96):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(sourceChainId),
        ethereum.Value.fromAddress(targetTokenAddress),
        ethereum.Value.fromAddress(targetReceiverAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );

    return result[0].toBytes();
  }

  try_fillRequest(
    sourceChainId: BigInt,
    targetTokenAddress: Address,
    targetReceiverAddress: Address,
    amount: BigInt,
    nonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "fillRequest",
      "fillRequest(uint256,address,address,uint256,uint96):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(sourceChainId),
        ethereum.Value.fromAddress(targetTokenAddress),
        ethereum.Value.fromAddress(targetReceiverAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fills(requestID: Bytes): Bytes {
    let result = super.call("fills", "fills(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(requestID)
    ]);

    return result[0].toBytes();
  }

  try_fills(requestID: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("fills", "fills(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(requestID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  l1Resolver(): Address {
    let result = super.call("l1Resolver", "l1Resolver():(address)", []);

    return result[0].toAddress();
  }

  try_l1Resolver(): ethereum.CallResult<Address> {
    let result = super.tryCall("l1Resolver", "l1Resolver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  messenger(): Address {
    let result = super.call("messenger", "messenger():(address)", []);

    return result[0].toAddress();
  }

  try_messenger(): ethereum.CallResult<Address> {
    let result = super.tryCall("messenger", "messenger():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _messenger(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAllowedLpCall extends ethereum.Call {
  get inputs(): AddAllowedLpCall__Inputs {
    return new AddAllowedLpCall__Inputs(this);
  }

  get outputs(): AddAllowedLpCall__Outputs {
    return new AddAllowedLpCall__Outputs(this);
  }
}

export class AddAllowedLpCall__Inputs {
  _call: AddAllowedLpCall;

  constructor(call: AddAllowedLpCall) {
    this._call = call;
  }

  get newLp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAllowedLpCall__Outputs {
  _call: AddAllowedLpCall;

  constructor(call: AddAllowedLpCall) {
    this._call = call;
  }
}

export class FillRequestCall extends ethereum.Call {
  get inputs(): FillRequestCall__Inputs {
    return new FillRequestCall__Inputs(this);
  }

  get outputs(): FillRequestCall__Outputs {
    return new FillRequestCall__Outputs(this);
  }
}

export class FillRequestCall__Inputs {
  _call: FillRequestCall;

  constructor(call: FillRequestCall) {
    this._call = call;
  }

  get sourceChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get targetTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get targetReceiverAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class FillRequestCall__Outputs {
  _call: FillRequestCall;

  constructor(call: FillRequestCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InvalidateFillCall extends ethereum.Call {
  get inputs(): InvalidateFillCall__Inputs {
    return new InvalidateFillCall__Inputs(this);
  }

  get outputs(): InvalidateFillCall__Outputs {
    return new InvalidateFillCall__Outputs(this);
  }
}

export class InvalidateFillCall__Inputs {
  _call: InvalidateFillCall;

  constructor(call: InvalidateFillCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get fillId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sourceChainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InvalidateFillCall__Outputs {
  _call: InvalidateFillCall;

  constructor(call: InvalidateFillCall) {
    this._call = call;
  }
}

export class RemoveAllowedLpCall extends ethereum.Call {
  get inputs(): RemoveAllowedLpCall__Inputs {
    return new RemoveAllowedLpCall__Inputs(this);
  }

  get outputs(): RemoveAllowedLpCall__Outputs {
    return new RemoveAllowedLpCall__Outputs(this);
  }
}

export class RemoveAllowedLpCall__Inputs {
  _call: RemoveAllowedLpCall;

  constructor(call: RemoveAllowedLpCall) {
    this._call = call;
  }

  get oldLp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAllowedLpCall__Outputs {
  _call: RemoveAllowedLpCall;

  constructor(call: RemoveAllowedLpCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetResolverCall extends ethereum.Call {
  get inputs(): SetResolverCall__Inputs {
    return new SetResolverCall__Inputs(this);
  }

  get outputs(): SetResolverCall__Outputs {
    return new SetResolverCall__Outputs(this);
  }
}

export class SetResolverCall__Inputs {
  _call: SetResolverCall;

  constructor(call: SetResolverCall) {
    this._call = call;
  }

  get _l1Resolver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetResolverCall__Outputs {
  _call: SetResolverCall;

  constructor(call: SetResolverCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
