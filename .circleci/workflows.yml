version: 2.1

orbs:
    node: circleci/node@5.0.2

commands:
  restore-python:
    steps:
      # Restore cached Python installation at /opt/circleci/.pyenv
      - restore_cache:
          name: Restore cached Python installation
          key: python-3.10.10-{{ .Environment.CACHE_VERSION }}

  restore-python-packages:
    steps:
      # Restore the cached Python virtualenv packages and ~/.bashrc.
      # The latter is useful to enter the virtualenv when the shell starts.
      - restore_cache:
          name: Restore cached Python packages
          key: beamer-dependencies-{{ checksum "poetry.lock" }}-{{ .Environment.CACHE_VERSION }}

  restore-node-packages:
    steps:
      # Restore node runtime and packages at /opt/circleci/.nvm
      - restore_cache:
          name: Restore node runtime and packages
          key: node18-packages-{{ .Environment.CACHE_VERSION }}

  ensure-node-environment:
    steps:
      - run: if grep -q "nvm.sh" "${BASH_ENV}"; then circleci-agent step halt; fi
      - run: echo "source /opt/circleci/.nvm/nvm.sh" >> "${BASH_ENV}"
      - run: echo "nvm use --silent default" >> "${BASH_ENV}"

  initialize-environment:
    steps:
      # Attach the git repo checkout at ~/beamer
      - attach_workspace:
          at: /

      - restore-python
      - restore-python-packages
      - restore-node-packages

      # Restore ape packages at /home/circleci/.ape.
      - restore_cache:
          name: Restore cached solc and ape packages
          key: solc-ape-packages-{{ checksum "ape-config.yaml" }}-{{ .Environment.CACHE_VERSION }}

      - ensure-node-environment

  build-frontend:
    parameters:
      mode:
        type: enum
        enum: [development, staging, production]
        default: production
    steps:
      - node/install-packages:
          pkg-manager: yarn
          app-dir: ~/beamer/frontend
      - run:
          name: Build
          command: yarn build --mode <<parameters.mode >>

parameters:
  action:
    type: enum
    enum: [default, frontend-mainnet-deployment, frontend-testnet-deployment, frontend-shadow-deployment]
    default: default
  docs-updated:
    type: boolean
    default: false
  backend-updated:
    type: boolean
    default: false
  frontend-updated:
    type: boolean
    default: false
  subgraph-updated:
    type: boolean
    default: false
  relayer-updated:
    type: boolean
    default: false
  deployment-artifacts-updated:
    type: boolean
    default: false
  deployment-package-json-updated:
    type: boolean
    default: false
  trigger-frontend-deployment:
    type: enum
    enum: [none, mainnet, testnet, shadow]
    default: none


executors:
  vm:
    machine:
      image: ubuntu-2204:2023.02.1
      docker_layer_caching: true
    working_directory: ~/beamer

jobs:
  checkout:
    executor: vm
    steps:
      - checkout
      - persist_to_workspace:
          root: /
          paths:
            - home/circleci/beamer

  install-python:
    executor: vm
    steps:
      - run: for ver in /opt/circleci/.pyenv/versions/*; do pyenv uninstall -f $(basename $ver); done
      - attach_workspace:
          at: /

      - restore-python
      - restore-python-packages

      # make sure pyenv is up to date and able to install our Python version
      - run: |
          cd $PYENV_ROOT
          git fetch --tags
          git checkout $(git tag --sort=-committerdate |head -n1)

      - run: pyenv install --skip-existing 3.10.10
      - run: pyenv global 3.10.10
      - run: pip install -U pip
      - run: pip install poetry==1.4.1
      - run: poetry --no-ansi install -vvv
      - run: grep -q /home/circleci/.+/bin/activate ~/.bashrc || echo "source $(poetry --no-ansi env info -p)/bin/activate" >> ~/.bashrc

      - save_cache:
          key: beamer-dependencies-{{ checksum "poetry.lock" }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - ~/.cache/pypoetry/virtualenvs
            - ~/.bashrc

      - save_cache:
          key: python-3.10.10-{{ .Environment.CACHE_VERSION }}
          paths:
            - /opt/circleci/.pyenv

  install-npm-packages:
    executor: vm
    steps:
      - attach_workspace:
          at: /
      - restore-node-packages
      - run:
          name: Install node v18
          command: |
            nvm install --default v18
            # Remove other versions so they don't end up in the cache.
            for x in $(ls -1 ${NVM_DIR}/versions/node | grep -v $(nvm version default)); do nvm uninstall $x; done
      - run: npm install yarn --location=global
      - run: npm install ganache@7.7.7 --location=global
      - run: yarn install --frozen-lockfile
      - save_cache:
          key: node18-packages-{{ .Environment.CACHE_VERSION }}
          paths:
            - /opt/circleci/.nvm/versions
            - /opt/circleci/.nvm/alias/default
            - /home/circleci/beamer/node_modules

  create-relayers:
    executor: vm
    steps:
      - attach_workspace:
          at: /
      - restore-node-packages
      - ensure-node-environment
      - run: make relayers
      - persist_to_workspace:
          root: /
          paths:
            - home/circleci/beamer/relayer/relayer-*

  lint:
    executor: vm
    steps:
      - initialize-environment
      - run: make lint

  test-contracts:
    executor: vm
    steps:
      - initialize-environment
      - run: poetry --no-ansi run ape test -s --gas beamer/tests/contracts

  compile-contracts:
    executor: vm
    steps:
      - initialize-environment
      - run: ape compile
      - persist_to_workspace:
          root: /
          paths:
            - home/circleci/beamer/contracts/.build
      - save_cache:
          key: solc-ape-packages-{{ checksum "ape-config.yaml" }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - /home/circleci/.ape
            - /home/circleci/.solcx

  test-beamer:
    executor: vm
    steps:
      - initialize-environment
      - run: poetry --no-ansi run ape test beamer/tests/{agent,config,health} -s --gas --cov beamer --cov-report=term

  e2e-test-ethereum:
    executor: vm
    steps:
      - initialize-environment
      - run: bash docker/ethereum/ethereum.sh up
      - run: bash docker/ethereum/ethereum.sh deploy-beamer
      - run: bash docker/ethereum/ethereum.sh e2e-test
      - run: bash docker/ethereum/ethereum.sh down

  e2e-test-optimism:
    executor: vm
    environment:
      OPTIMISM_FOLDER: "docker/optimism"
    steps:
      - initialize-environment
      - run: bash $OPTIMISM_FOLDER/optimism.sh up
      - run: bash $OPTIMISM_FOLDER/optimism.sh deploy-beamer
      - run: bash $OPTIMISM_FOLDER/optimism.sh e2e-test
      - run: bash $OPTIMISM_FOLDER/optimism.sh down

  e2e-test-arbitrum:
    executor: vm
    environment:
      ARBITRUM_FOLDER: "docker/arbitrum"
    steps:
      - initialize-environment
      - run: git submodule status $ARBITRUM_FOLDER/nitro | awk '{print $1;}' > "/tmp/arbitrum-commit-hash"
      - restore_cache:
          key: arbitrum-submodule-{{ checksum "/tmp/arbitrum-commit-hash" }}-{{ .Environment.CACHE_VERSION }}
      - run: |
          git submodule update --init $ARBITRUM_FOLDER/nitro
          cd $ARBITRUM_FOLDER/nitro
          git submodule update --init blockscout brotli fastcache go-ethereum \
                                      arbitrator/wasm-libraries/soft-float/SoftFloat
      - save_cache:
          key: arbitrum-submodule-{{ checksum "/tmp/arbitrum-commit-hash" }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - docker/arbitrum/nitro
            - .git/modules/docker/arbitrum
      - run: bash $ARBITRUM_FOLDER/arbitrum.sh up
      - run: bash $ARBITRUM_FOLDER/arbitrum.sh deploy-beamer
      - run: bash $ARBITRUM_FOLDER/arbitrum.sh e2e-test
      - run: bash $ARBITRUM_FOLDER/arbitrum.sh down

  e2e-test-polygon-zkevm:
    executor: vm
    environment: 
      POLYGON_ZKEVM_FOLDER: "docker/polygon_zkevm"
    steps:
      # Temporarily disable polygon-zkevm tests
      - run: circleci-agent step halt
      - initialize-environment
      - run: bash $POLYGON_ZKEVM_FOLDER/polygon_zkevm.sh up
      - run: bash $POLYGON_ZKEVM_FOLDER/polygon_zkevm.sh deploy-beamer
      - run: bash $POLYGON_ZKEVM_FOLDER/polygon_zkevm.sh e2e-test
      - run: bash $POLYGON_ZKEVM_FOLDER/polygon_zkevm.sh down

  build-docs:
    executor: vm
    steps:
      - attach_workspace:
          at: /
      - restore-python
      - restore-python-packages
      - run: sudo apt-get install graphviz
      - run: make docs
      - persist_to_workspace:
          root: /
          paths:
            - home/circleci/beamer/docs/build/html

  publish-docs:
    docker:
      - image: cimg/base:current
    environment:
      REPO_URL: git@github.com:beamer-bridge/docs.git
      TMP_DIR: /tmp/docs
    steps:
      - attach_workspace:
          at: /
      - add_ssh_keys:
          fingerprints:
            - fa:ea:e4:24:f1:7e:28:96:41:35:83:1b:89:e4:8f:a1
      - run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com > ~/.ssh/known_hosts
          git clone --depth=1 "${REPO_URL}" -b gh-pages "${TMP_DIR}"
          rm -rf "${TMP_DIR}"/*
          cp -r ~/beamer/docs/build/html/* "${TMP_DIR}"
          cd "${TMP_DIR}"
          # Bring back the CNAME file we deleted.
          echo docs.beamerbridge.com > CNAME
          git config user.name "${CIRCLE_USERNAME}"
          git config user.email "${CIRCLE_USERNAME}@users.noreply.github.com"
          git add --all
          git commit -m "Auto-generated docs based on beamer ${CIRCLE_SHA1}"
          git push origin gh-pages

  build-and-test-frontend:
    executor: node/default
    working_directory: ~/beamer/frontend
    steps:
      - checkout:
          path: ~/beamer
      - build-frontend
      - run:
          name: Lint
          command: yarn lint
      - run:
          name: Unit tests
          command: yarn test:unit

  build-and-release-deployment-artifacts-and-abis-to-npm:
    executor: vm
    steps:
      - initialize-environment
      - node/install-packages:
          pkg-manager: yarn
          app-dir: ~/beamer/deployments-npm-package
      - run:
          name: Test npm package generation
          command: yarn test:package
          working_directory: ~/beamer/deployments-npm-package
      - run:
          name: Log in to npm
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - when:
          condition:
            and:
              - equal: [ main, <<pipeline.git.branch>> ]
              - equal: [ true, <<pipeline.parameters.deployment-package-json-updated>> ]
          steps:
            - run:
                name: Build
                command: make npm-package
                working_directory: ~/beamer
            - run:
                name: Publish to npm
                command: yarn publish dist/beamer-bridge-deployments.tgz
                working_directory: ~/beamer/deployments-npm-package
      - when:
          condition:
            and: 
              - not:
                  equal: [ main, <<pipeline.git.branch>> ]
              - equal: [ true, <<pipeline.parameters.deployment-artifacts-updated>> ]
          steps:
            - run:
                name: Update to prerelease version
                command: yarn version --prerelease --no-git-tag-version --preid $(git rev-parse --short HEAD)-$(date +%s)
                working_directory: ~/beamer/deployments-npm-package
            - run:
                name: Build
                command: make npm-package
                working_directory: ~/beamer    
            - run:
                name: Publish to npm
                command: yarn publish dist/beamer-bridge-deployments.tgz --tag dev
                working_directory: ~/beamer/deployments-npm-package

  test-relayer:
    executor: node/default
    working_directory: ~/beamer/relayer
    steps:
      - checkout:
          path: ~/beamer
      - node/install-packages:
          pkg-manager: yarn
          app-dir: ~/beamer/relayer
      - run:
          name: Lint
          command: yarn lint
      - run:
          name: Unit tests
          command: yarn test:unit

  build-and-publish-container-image:
    executor: vm
    environment:
      IMAGE_NAME: ghcr.io/beamer-bridge/beamer
    steps:
      - initialize-environment
      - run:
          name: Build a beamer image
          command: make container-image IMAGE_NAME=${IMAGE_NAME}
      - run:
          name: Compile contracts
          command: ape compile
      - run:
          name: Test the container image
          command: bash docker/scripts/test-container-image.sh ${IMAGE_NAME}:sha-$(git rev-parse HEAD)
      - when:
          condition:
             equal: [ main, <<pipeline.git.branch>> ]
          steps:
            - run:
                name: Log in to github container registry
                command: echo ${GHCR_PAT} | docker login -u istankovic --password-stdin ghcr.io
            - run:
                name: Push the image to github container registry
                command: docker push -a ${IMAGE_NAME}
  
  deploy-frontend:
    executor: node/default
    working_directory: ~/beamer/frontend
    environment:
      REPO_URL: git@github.com:beamer-bridge/frontend-deployment.git
      TMP_DIR: /tmp/frontend-deployment
    steps:
      - checkout:
          path: ~/beamer
      - when:
          condition:
            or:
              - equal: [mainnet, <<pipeline.parameters.trigger-frontend-deployment>>]
              - equal: [shadow, <<pipeline.parameters.trigger-frontend-deployment>>]
          steps:
            - build-frontend:
                mode: production
      - when:
          condition:
            equal: [testnet, <<pipeline.parameters.trigger-frontend-deployment>>]
          steps:
            - build-frontend:
                mode: staging
      - add_ssh_keys:
          fingerprints:
            - 3a:6e:26:54:04:d8:58:3f:63:7c:3d:00:a1:d7:c2:be
      - run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com > ~/.ssh/known_hosts
          git clone "${REPO_URL}" -b <<pipeline.parameters.trigger-frontend-deployment>> "${TMP_DIR}"
          rm -rf "${TMP_DIR}"/*
          cp -r ~/beamer/frontend/dist/* "${TMP_DIR}"
          cd "${TMP_DIR}"
          git config user.name "${CIRCLE_USERNAME}"
          git config user.email "${CIRCLE_USERNAME}@users.noreply.github.com"
          git add --all
          git commit -m "Deployment ${CIRCLE_SHA1}"
          git push origin <<pipeline.parameters.trigger-frontend-deployment>>

                                             
workflows:
  npm-release:
    when: 
      or: 
        - equal: [ true, <<pipeline.parameters.deployment-artifacts-updated>> ]
        - equal: [ true, <<pipeline.parameters.deployment-package-json-updated>> ]
    jobs:
      - checkout
      - install-npm-packages:
          requires:
            - checkout
      - install-python:
          requires:
            - checkout
      - build-and-release-deployment-artifacts-and-abis-to-npm:
          requires:
            - install-npm-packages
            - install-python

  backend:
    when: <<pipeline.parameters.backend-updated>>
    jobs:
      - checkout
      - install-npm-packages:
          requires:
            - checkout
      - install-python:
          requires:
            - checkout
      - lint:
          requires:
            - install-python
            - install-npm-packages
      - create-relayers:
          requires:
            - checkout
            - install-npm-packages
      - compile-contracts:
          requires:
            - install-python
            - install-npm-packages
      - test-contracts:
          requires:
            - compile-contracts
      - test-beamer:
          requires:
            - compile-contracts
      - e2e-test-ethereum:
          requires:
            - compile-contracts
            - create-relayers
      - e2e-test-optimism:
          requires:
            - compile-contracts
            - create-relayers
      - e2e-test-arbitrum:
          requires:
            - compile-contracts
            - create-relayers
      - e2e-test-polygon-zkevm:
          requires:
            - compile-contracts
            - create-relayers
      - build-and-publish-container-image:
          requires:
            - test-contracts
            - test-beamer
            - e2e-test-ethereum
            - e2e-test-optimism
            - e2e-test-arbitrum
            - e2e-test-polygon-zkevm

  docs:
    when: <<pipeline.parameters.docs-updated>>
    jobs:
      - checkout
      - install-python:
          requires:
            - checkout
      - build-docs:
          requires:
            - checkout
            - install-python
      - publish-docs:
          requires:
            - build-docs
          filters:
            branches:
              only: main

  frontend:
    when: <<pipeline.parameters.frontend-updated>>
    jobs:
      - build-and-test-frontend

  relayer:
    when: <<pipeline.parameters.relayer-updated>>
    jobs:
      - checkout
      - install-python:
          requires:
            - checkout
      - install-npm-packages:
          requires:
            - checkout
      - create-relayers:
          requires:
            - install-npm-packages
      - compile-contracts:
          requires:
            - install-python
            - install-npm-packages
      - test-relayer:
          requires:
            - install-npm-packages
      - e2e-test-ethereum:
          requires:
            - compile-contracts
            - create-relayers
      - e2e-test-optimism:
          requires:
            - compile-contracts
            - create-relayers
      - e2e-test-arbitrum:
          requires:
            - compile-contracts
            - create-relayers
      - e2e-test-polygon-zkevm:
          requires:
            - compile-contracts
            - create-relayers
      - build-and-publish-container-image:
          requires:
            - test-relayer
            - e2e-test-ethereum
            - e2e-test-optimism
            - e2e-test-arbitrum
            - e2e-test-polygon-zkevm

  frontend-deployment:
    unless: 
      equal: [none, <<pipeline.parameters.trigger-frontend-deployment>>]
    jobs:
      - deploy-frontend
