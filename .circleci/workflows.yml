version: 2.1

orbs:
    node: circleci/node@5.0.2

commands:
  restore-python:
    steps:
      # Restore cached Python installation at /opt/circleci/.pyenv
      - restore_cache:
          name: Restore cached Python installation
          key: python-3.10.6-{{ .Environment.CACHE_VERSION }}

  restore-python-packages:
    steps:
      # Restore the cached Python virtualenv packages and ~/.bashrc.
      # The latter is useful to enter the virtualenv when the shell starts.
      - restore_cache:
          name: Restore cached Python packages
          key: beamer-dependencies-{{ checksum "poetry.lock" }}-{{ .Environment.CACHE_VERSION }}

  restore-node-packages:
    steps:
      # Restore node runtime and packages at /opt/circleci/.nvm
      - restore_cache:
          name: Restore node runtime and packages
          key: node18-packages-{{ .Environment.CACHE_VERSION }}

  ensure-node-environment:
    steps:
      - run: if grep -q "nvm.sh" "${BASH_ENV}"; then circleci-agent step halt; fi
      - run: echo "source /opt/circleci/.nvm/nvm.sh" >> "${BASH_ENV}"
      - run: echo "nvm use --silent default" >> "${BASH_ENV}"

  initialize-environment:
    steps:
      # Attach the git repo checkout at ~/beamer
      - attach_workspace:
          at: /

      - restore-python
      - restore-python-packages
      - restore-node-packages

      # Restore brownie packages at /home/circleci/.brownie.
      - restore_cache:
          name: Restore cached solc and brownie packages
          key: solc-brownie-packages-{{ checksum "brownie-config.yaml" }}-{{ .Environment.CACHE_VERSION }}

      - ensure-node-environment

parameters:
  docs-updated:
    type: boolean
    default: false
  backend-updated:
    type: boolean
    default: false
  frontend-updated:
    type: boolean
    default: false
  subgraph-updated:
    type: boolean
    default: false

executors:
  vm:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    working_directory: ~/beamer

jobs:
  checkout:
    executor: vm
    steps:
      - checkout
      - persist_to_workspace:
          root: /
          paths:
            - home/circleci/beamer

  install-python:
    executor: vm
    steps:
      - run: for ver in /opt/circleci/.pyenv/versions/*; do pyenv uninstall -f $(basename $ver); done
      - attach_workspace:
          at: /

      - restore-python
      - restore-python-packages

      - run: pyenv install --skip-existing 3.10.6
      - run: pyenv global 3.10.6
      - run: pip install -U pip
      - run: pip install poetry==1.2.2
      - run: poetry install -vvv
      - run: grep -q /home/circleci/.+/bin/activate ~/.bashrc || echo "source $(poetry env info -p)/bin/activate" >> ~/.bashrc

      - save_cache:
          key: beamer-dependencies-{{ checksum "poetry.lock" }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - ~/.cache/pypoetry/virtualenvs
            - ~/.bashrc

      - save_cache:
          key: python-3.10.6-{{ .Environment.CACHE_VERSION }}
          paths:
            - /opt/circleci/.pyenv

  install-npm-packages:
    executor: vm
    steps:
      - attach_workspace:
          at: /
      - restore-node-packages
      - run:
          name: Install node v18
          command: |
            nvm install --default v18
            # Remove other versions so they don't end up in the cache.
            for x in $(ls -1 ${NVM_DIR}/versions/node | grep -v $(nvm version default)); do nvm uninstall $x; done
      - run: npm install yarn --location=global
      - run: npm install ganache@7.5.0 --location=global
      - run: yarn install --frozen-lockfile
      - save_cache:
          key: node18-packages-{{ .Environment.CACHE_VERSION }}
          paths:
            - /opt/circleci/.nvm/versions
            - /opt/circleci/.nvm/alias/default
            - /home/circleci/beamer/node_modules

  create-relayers:
    executor: vm
    steps:
      - attach_workspace:
          at: /
      - restore-node-packages
      - ensure-node-environment
      - run: make ~/beamer relayers
      - persist_to_workspace:
          root: /
          paths:
            - home/circleci/beamer/relayer/relayer-*

  lint:
    executor: vm
    steps:
      - initialize-environment
      - run: make lint

  test-contracts:
    executor: vm
    steps:
      - initialize-environment
      - run: poetry run brownie test -v -G beamer/tests/contracts

  compile-contracts:
    executor: vm
    steps:
      - initialize-environment
      - run: brownie compile
      - persist_to_workspace:
          root: /
          paths:
            - home/circleci/beamer/contracts/build
      - save_cache:
          key: solc-brownie-packages-{{ checksum "brownie-config.yaml" }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - /home/circleci/.brownie
            - /home/circleci/.solcx

  test-agent:
    executor: vm
    steps:
      - initialize-environment
      - run: poetry run brownie test beamer/tests/agent -v -G --cov beamer --cov-report=term

  e2e-test-optimism:
    executor: vm
    environment:
      OPTIMISM: "docker/optimism"
    steps:
      - initialize-environment
      - run: git submodule status $OPTIMISM/optimism | awk '{print $1;}' > "/tmp/optimism-commit-hash"
      - restore_cache:
          key: optimism-submodule-{{ checksum "/tmp/optimism-commit-hash" }}-{{ .Environment.CACHE_VERSION }}
      - run: git submodule update --init $OPTIMISM/optimism
      - save_cache:
          key: optimism-submodule-{{ checksum "/tmp/optimism-commit-hash" }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - docker/optimism/optimism
            - .git/modules/docker/optimism
      - run: bash $OPTIMISM/optimism.sh up
      - run: bash $OPTIMISM/optimism.sh deploy-beamer
      - run: bash $OPTIMISM/optimism.sh e2e-test
      - run: bash $OPTIMISM/optimism.sh down

  build-docs:
    executor: vm
    steps:
      - when:
          condition: <<pipeline.parameters.docs-updated>>
          steps:
            - attach_workspace:
                at: /
            - restore-python
            - restore-python-packages
            - run: sudo apt-get install graphviz
            - run: make docs
            - persist_to_workspace:
                root: /
                paths:
                  - home/circleci/beamer/docs/build/html
      # The step below is here in order to pass CircleCI schema validation.
      - run: echo -n > /dev/null

  publish-docs:
    docker:
      - image: cimg/base:current
    environment:
      REPO_URL: git@github.com:beamer-bridge/docs.git
      TMP_DIR: /tmp/docs
    steps:
      - attach_workspace:
          at: /
      - add_ssh_keys:
          fingerprints:
            - fa:ea:e4:24:f1:7e:28:96:41:35:83:1b:89:e4:8f:a1
      - run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com > ~/.ssh/known_hosts
          git clone --depth=1 "${REPO_URL}" -b gh-pages "${TMP_DIR}"
          rm -rf "${TMP_DIR}"/*
          cp -r ~/beamer/docs/build/html/* "${TMP_DIR}"
          cd "${TMP_DIR}"
          # Bring back the CNAME file we deleted.
          echo docs.beamerbridge.com > CNAME
          git config user.name "${CIRCLE_USERNAME}"
          git config user.email "${CIRCLE_USERNAME}@users.noreply.github.com"
          git add --all
          git commit -m "Auto-generated docs based on beamer ${CIRCLE_SHA1}"
          git push origin gh-pages

  build-and-test-frontend:
    executor: node/default
    working_directory: ~/beamer/frontend
    steps:
      - checkout:
          path: ~/beamer
      - node/install-packages:
          pkg-manager: yarn
          app-dir: ~/beamer/frontend
      - run:
          name: Build
          command: yarn build
      - run:
          name: Lint
          command: yarn lint
      - run:
          name: Unit tests
          command: yarn test:unit

  build-and-publish-container-image:
    executor: vm
    environment:
      IMAGE_NAME: ghcr.io/beamer-bridge/beamer-agent
    steps:
      - attach_workspace:
          at: /
      - restore-node-packages
      - ensure-node-environment
      - run:
          name: Log in to github container registry
          command: echo ${GHCR_PAT} | docker login -u istankovic --password-stdin ghcr.io
      - run:
          name: Build a beamer-agent image
          command: cd ~/beamer && make container-image IMAGE_NAME=${IMAGE_NAME}
      - run:
          name: Push the image to github container registry
          command: docker push -a ${IMAGE_NAME}

workflows:
  backend:
    when: <<pipeline.parameters.backend-updated>>
    jobs:
      - checkout
      - install-npm-packages:
          requires:
            - checkout
      - install-python:
          requires:
            - checkout
      - lint:
          requires:
            - install-python
            - install-npm-packages
      - build-docs:
          requires:
            - install-python
      - create-relayers:
          requires:
            - checkout
            - install-npm-packages
      - compile-contracts:
          requires:
            - install-python
            - install-npm-packages
      - test-contracts:
          requires:
            - compile-contracts
      - test-agent:
          requires:
            - compile-contracts
      - e2e-test-optimism:
          requires:
            - compile-contracts

  publish-docs:
    when:
      and:
        - <<pipeline.parameters.docs-updated>>
        - equal: [ main, <<pipeline.git.branch>> ]
    jobs:
      - checkout
      - install-python:
          requires:
            - checkout
      - build-docs:
          requires:
            - checkout
            - install-python
      - publish-docs:
          requires:
            - build-docs

  frontend:
    when: <<pipeline.parameters.frontend-updated>>
    jobs:
      - build-and-test-frontend

  build-and-publish-container-image:
    when:
      and:
        - <<pipeline.parameters.backend-updated>>
        - or:
          - equal: [ main, <<pipeline.git.branch>> ]
          - <<pipeline.git.tag>>
    jobs:
      - checkout
      - install-npm-packages:
          requires:
              - checkout
      - create-relayers:
          requires:
            - install-npm-packages
      - build-and-publish-container-image:
          requires:
            - create-relayers
