{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messenger",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fillId",
          "type": "bytes32"
        }
      ],
      "name": "FillInvalidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "LpAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "LpRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fillId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "filler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RequestFilled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLp",
          "type": "address"
        }
      ],
      "name": "addAllowedLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedLps",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "targetReceiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "fillRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fills",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "fillId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        }
      ],
      "name": "invalidateFill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "contract IMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLp",
          "type": "address"
        }
      ],
      "name": "removeAllowedLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/legape/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/access/Ownable.sol",
    "15": "contracts/contracts/BeamerUtils.sol",
    "16": "contracts/contracts/FillManager.sol",
    "17": "contracts/contracts/LpWhitelist.sol",
    "2": "/home/legape/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC20/IERC20.sol",
    "27": "contracts/interfaces/IMessenger.sol",
    "4": "/home/legape/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
    "5": "/home/legape/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC20/utils/SafeERC20.sol",
    "6": "/home/legape/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/utils/Address.sol",
    "7": "/home/legape/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "contracts/contracts/FillManager.sol",
    "exportedSymbols": {
      "Address": [
        5251
      ],
      "BeamerUtils": [
        32
      ],
      "Context": [
        4920
      ],
      "FillManager": [
        292
      ],
      "IERC20": [
        3038
      ],
      "IERC20Permit": [
        4956
      ],
      "IMessenger": [
        3341
      ],
      "LpWhitelist": [
        364
      ],
      "Math": [
        4431
      ],
      "Ownable": [
        2960
      ],
      "RequestManager": [
        2009
      ],
      "Resolver": [
        2177
      ],
      "RestrictedCalls": [
        2332
      ],
      "SafeERC20": [
        3319
      ]
    },
    "id": 293,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 34,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:16"
      },
      {
        "absolutePath": "/home/legape/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC20/IERC20.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC20/IERC20.sol",
        "id": 35,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 293,
        "sourceUnit": 3039,
        "src": "58:84:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/legape/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC20/utils/SafeERC20.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC20/utils/SafeERC20.sol",
        "id": 36,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 293,
        "sourceUnit": 3320,
        "src": "143:93:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/legape/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/access/Ownable.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/access/Ownable.sol",
        "id": 37,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 293,
        "sourceUnit": 2961,
        "src": "237:80:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/LpWhitelist.sol",
        "file": "./LpWhitelist.sol",
        "id": 38,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 293,
        "sourceUnit": 365,
        "src": "318:27:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/interfaces/IMessenger.sol",
        "file": "../interfaces/IMessenger.sol",
        "id": 39,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 293,
        "sourceUnit": 3342,
        "src": "346:38:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/BeamerUtils.sol",
        "file": "./BeamerUtils.sol",
        "id": 40,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 293,
        "sourceUnit": 33,
        "src": "385:27:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/Resolver.sol",
        "file": "./Resolver.sol",
        "id": 41,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 293,
        "sourceUnit": 2178,
        "src": "413:24:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 43,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2960,
              "src": "806:7:16"
            },
            "id": 44,
            "nodeType": "InheritanceSpecifier",
            "src": "806:7:16"
          },
          {
            "baseName": {
              "id": 45,
              "name": "LpWhitelist",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 364,
              "src": "815:11:16"
            },
            "id": 46,
            "nodeType": "InheritanceSpecifier",
            "src": "815:11:16"
          }
        ],
        "canonicalName": "FillManager",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 42,
          "nodeType": "StructuredDocumentation",
          "src": "439:343:16",
          "text": "The fill manager.\n This contract is responsible for keeping track of filled requests. In addition to allowing\n agents to (eventually) prove that they filled requests, it also allows anyone to invalidate\n a claim that a request was filled.\n It is the only contract that agents need to interact with on the target chain."
        },
        "fullyImplemented": true,
        "id": 292,
        "linearizedBaseContracts": [
          292,
          364,
          2960,
          4920
        ],
        "name": "FillManager",
        "nameLocation": "791:11:16",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 50,
            "libraryName": {
              "id": 47,
              "name": "SafeERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3319,
              "src": "839:9:16"
            },
            "nodeType": "UsingForDirective",
            "src": "833:27:16",
            "typeName": {
              "id": 49,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 48,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3038,
                "src": "853:6:16"
              },
              "referencedDeclaration": 3038,
              "src": "853:6:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$3038",
                "typeString": "contract IERC20"
              }
            }
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 51,
              "nodeType": "StructuredDocumentation",
              "src": "866:96:16",
              "text": "Emitted when a request has been filled.\n .. seealso:: :sol:func:`fillRequest`"
            },
            "eventSelector": "2995401b199bc45ea8c8b79c27fb204b270cfb74444d546b1a100935e3443887",
            "id": 65,
            "name": "RequestFilled",
            "nameLocation": "973:13:16",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 53,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "1012:9:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "996:25:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 52,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "996:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fillId",
                  "nameLocation": "1039:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1031:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 54,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1031:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sourceChainId",
                  "nameLocation": "1071:13:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1055:29:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 56,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1055:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "targetTokenAddress",
                  "nameLocation": "1110:18:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1094:34:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1094:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "filler",
                  "nameLocation": "1146:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1138:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 60,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1138:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 63,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1170:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1162:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 62,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1162:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "986:196:16"
            },
            "src": "967:216:16"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 66,
              "nodeType": "StructuredDocumentation",
              "src": "1189:101:16",
              "text": "Emitted when a fill has been invalidated.\n .. seealso:: :sol:func:`invalidateFill`"
            },
            "eventSelector": "931b401cf9baede43dc97f7d9dd4017d44f22bfa0a69668d527d9b5fff42b90a",
            "id": 72,
            "name": "FillInvalidated",
            "nameLocation": "1301:15:16",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 71,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 68,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "1333:9:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 72,
                  "src": "1317:25:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 67,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1317:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 70,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "fillId",
                  "nameLocation": "1360:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 72,
                  "src": "1344:22:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 69,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1344:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1316:51:16"
            },
            "src": "1295:73:16"
          },
          {
            "constant": false,
            "functionSelector": "3cb747bf",
            "id": 75,
            "mutability": "mutable",
            "name": "messenger",
            "nameLocation": "1583:9:16",
            "nodeType": "VariableDeclaration",
            "scope": 292,
            "src": "1565:27:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IMessenger_$3341",
              "typeString": "contract IMessenger"
            },
            "typeName": {
              "id": 74,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 73,
                "name": "IMessenger",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3341,
                "src": "1565:10:16"
              },
              "referencedDeclaration": 3341,
              "src": "1565:10:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IMessenger_$3341",
                "typeString": "contract IMessenger"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 76,
              "nodeType": "StructuredDocumentation",
              "src": "1599:74:16",
              "text": "The L1 :sol:contract:`Resolver` contract to be used for L1 resolution."
            },
            "functionSelector": "935beb1a",
            "id": 78,
            "mutability": "mutable",
            "name": "l1Resolver",
            "nameLocation": "1693:10:16",
            "nodeType": "VariableDeclaration",
            "scope": 292,
            "src": "1678:25:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 77,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1678:7:16",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 79,
              "nodeType": "StructuredDocumentation",
              "src": "1710:33:16",
              "text": "Maps request IDs to fill IDs."
            },
            "functionSelector": "20158c44",
            "id": 83,
            "mutability": "mutable",
            "name": "fills",
            "nameLocation": "1783:5:16",
            "nodeType": "VariableDeclaration",
            "scope": 292,
            "src": "1748:40:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 82,
              "keyType": {
                "id": 80,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "1756:7:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "1748:27:16",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 81,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "1767:7:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "1897:51:16",
              "statements": [
                {
                  "expression": {
                    "id": 93,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 89,
                      "name": "messenger",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 75,
                      "src": "1907:9:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IMessenger_$3341",
                        "typeString": "contract IMessenger"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 91,
                          "name": "_messenger",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 86,
                          "src": "1930:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 90,
                        "name": "IMessenger",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3341,
                        "src": "1919:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IMessenger_$3341_$",
                          "typeString": "type(contract IMessenger)"
                        }
                      },
                      "id": 92,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1919:22:16",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IMessenger_$3341",
                        "typeString": "contract IMessenger"
                      }
                    },
                    "src": "1907:34:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IMessenger_$3341",
                      "typeString": "contract IMessenger"
                    }
                  },
                  "id": 94,
                  "nodeType": "ExpressionStatement",
                  "src": "1907:34:16"
                }
              ]
            },
            "documentation": {
              "id": 84,
              "nodeType": "StructuredDocumentation",
              "src": "1795:65:16",
              "text": "Constructor.\n @param _messenger The messenger."
            },
            "id": 96,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 87,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 86,
                  "mutability": "mutable",
                  "name": "_messenger",
                  "nameLocation": "1885:10:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 96,
                  "src": "1877:18:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 85,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1877:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1876:20:16"
            },
            "returnParameters": {
              "id": 88,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1897:0:16"
            },
            "scope": 292,
            "src": "1865:83:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "2207:108:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 110,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 105,
                          "name": "l1Resolver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "2225:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 108,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2247:1:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 107,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2239:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 106,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2239:7:16",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 109,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2239:10:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2225:24:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265736f6c76657220616c726561647920736574",
                        "id": 111,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2251:22:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5d46d8f4f2917bfa810842fb8788f6e03c6217d9a792f3a7cc38a1f7b9eddaf3",
                          "typeString": "literal_string \"Resolver already set\""
                        },
                        "value": "Resolver already set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5d46d8f4f2917bfa810842fb8788f6e03c6217d9a792f3a7cc38a1f7b9eddaf3",
                          "typeString": "literal_string \"Resolver already set\""
                        }
                      ],
                      "id": 104,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2217:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2217:57:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 113,
                  "nodeType": "ExpressionStatement",
                  "src": "2217:57:16"
                },
                {
                  "expression": {
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 114,
                      "name": "l1Resolver",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 78,
                      "src": "2284:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 115,
                      "name": "_l1Resolver",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 99,
                      "src": "2297:11:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2284:24:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 117,
                  "nodeType": "ExpressionStatement",
                  "src": "2284:24:16"
                }
              ]
            },
            "documentation": {
              "id": 97,
              "nodeType": "StructuredDocumentation",
              "src": "1954:189:16",
              "text": "Set the resolver's address\n Can only ever be set once. Before it is set, no fills or invalidations are possible\n @param _l1Resolver The L1 resolver address"
            },
            "functionSelector": "4e543b26",
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 102,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 101,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2879,
                  "src": "2197:9:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "2197:9:16"
              }
            ],
            "name": "setResolver",
            "nameLocation": "2157:11:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 100,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 99,
                  "mutability": "mutable",
                  "name": "_l1Resolver",
                  "nameLocation": "2177:11:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 119,
                  "src": "2169:19:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 98,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2169:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2168:21:16"
            },
            "returnParameters": {
              "id": 103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2207:0:16"
            },
            "scope": 292,
            "src": "2148:167:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 234,
              "nodeType": "Block",
              "src": "3311:1021:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 143,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 138,
                          "name": "l1Resolver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "3329:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 141,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3351:1:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 140,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3343:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 139,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3343:7:16",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 142,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3343:10:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3329:24:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265736f6c7665722061646472657373206e6f7420736574",
                        "id": 144,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3355:26:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_53618f21af364c2b61c8ddd72d086a9c267143d1b8d772550a171d844dc43660",
                          "typeString": "literal_string \"Resolver address not set\""
                        },
                        "value": "Resolver address not set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_53618f21af364c2b61c8ddd72d086a9c267143d1b8d772550a171d844dc43660",
                          "typeString": "literal_string \"Resolver address not set\""
                        }
                      ],
                      "id": 137,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3321:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 145,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3321:61:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 146,
                  "nodeType": "ExpressionStatement",
                  "src": "3321:61:16"
                },
                {
                  "assignments": [
                    148
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 148,
                      "mutability": "mutable",
                      "name": "requestId",
                      "nameLocation": "3400:9:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 234,
                      "src": "3392:17:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 147,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3392:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 159,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 151,
                        "name": "sourceChainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 122,
                        "src": "3453:13:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 152,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "3480:5:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "chainid",
                        "nodeType": "MemberAccess",
                        "src": "3480:13:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 154,
                        "name": "targetTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 124,
                        "src": "3507:18:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 155,
                        "name": "targetReceiverAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 126,
                        "src": "3539:21:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 156,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 128,
                        "src": "3574:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 157,
                        "name": "nonce",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 130,
                        "src": "3594:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 149,
                        "name": "BeamerUtils",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 32,
                        "src": "3412:11:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_BeamerUtils_$32_$",
                          "typeString": "type(library BeamerUtils)"
                        }
                      },
                      "id": 150,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "createRequestId",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 31,
                      "src": "3412:27:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (uint256,uint256,address,address,uint256,uint256) pure returns (bytes32)"
                      }
                    },
                    "id": 158,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3412:197:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3392:217:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 168,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 161,
                            "name": "fills",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 83,
                            "src": "3628:5:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                              "typeString": "mapping(bytes32 => bytes32)"
                            }
                          },
                          "id": 163,
                          "indexExpression": {
                            "id": 162,
                            "name": "requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 148,
                            "src": "3634:9:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3628:16:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 166,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3656:1:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 165,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3648:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": {
                              "id": 164,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "3648:7:16",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 167,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3648:10:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "3628:30:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "416c72656164792066696c6c6564",
                        "id": 169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3660:16:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2f1fdd45b3b51c31df82ed6b4ad08141730b73e5c15da80ef36a62b2e6a9c27f",
                          "typeString": "literal_string \"Already filled\""
                        },
                        "value": "Already filled"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2f1fdd45b3b51c31df82ed6b4ad08141730b73e5c15da80ef36a62b2e6a9c27f",
                          "typeString": "literal_string \"Already filled\""
                        }
                      ],
                      "id": 160,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3620:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 170,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3620:57:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 171,
                  "nodeType": "ExpressionStatement",
                  "src": "3620:57:16"
                },
                {
                  "assignments": [
                    174
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 174,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "3695:5:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 234,
                      "src": "3688:12:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$3038",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 173,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 172,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3038,
                          "src": "3688:6:16"
                        },
                        "referencedDeclaration": 3038,
                        "src": "3688:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$3038",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 178,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 176,
                        "name": "targetTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 124,
                        "src": "3710:18:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 175,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3038,
                      "src": "3703:6:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$3038_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 177,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3703:26:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$3038",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3688:41:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 182,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3762:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 183,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3762:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 184,
                        "name": "targetReceiverAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 126,
                        "src": "3774:21:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 185,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 128,
                        "src": "3797:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 179,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 174,
                        "src": "3739:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$3038",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 181,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3096,
                      "src": "3739:22:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$3038_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$3038_$",
                        "typeString": "function (contract IERC20,address,address,uint256)"
                      }
                    },
                    "id": 186,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3739:65:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 187,
                  "nodeType": "ExpressionStatement",
                  "src": "3739:65:16"
                },
                {
                  "assignments": [
                    189
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 189,
                      "mutability": "mutable",
                      "name": "fillId",
                      "nameLocation": "3823:6:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 234,
                      "src": "3815:14:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 188,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3815:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 196,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 194,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 191,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "3842:5:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 192,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "number",
                          "nodeType": "MemberAccess",
                          "src": "3842:12:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "hexValue": "31",
                          "id": 193,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3857:1:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "3842:16:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 190,
                      "name": "blockhash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -5,
                      "src": "3832:9:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_blockhash_view$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (uint256) view returns (bytes32)"
                      }
                    },
                    "id": 195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3832:27:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3815:44:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 200,
                        "name": "l1Resolver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78,
                        "src": "3905:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 203,
                              "name": "Resolver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2177,
                              "src": "3961:8:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Resolver_$2177_$",
                                "typeString": "type(contract Resolver)"
                              }
                            },
                            "id": 204,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "resolve",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2154,
                            "src": "3961:16:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function Resolver.resolve(bytes32,bytes32,uint256,uint256,address)"
                            }
                          },
                          {
                            "components": [
                              {
                                "id": 205,
                                "name": "requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 148,
                                "src": "3996:9:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 206,
                                "name": "fillId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 189,
                                "src": "4007:6:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "expression": {
                                  "id": 207,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "4015:5:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 208,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "chainid",
                                "nodeType": "MemberAccess",
                                "src": "4015:13:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 209,
                                "name": "sourceChainId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 122,
                                "src": "4030:13:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 210,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "4045:3:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 211,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4045:10:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "id": 212,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "3995:61:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$",
                              "typeString": "tuple(bytes32,bytes32,uint256,uint256,address)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function Resolver.resolve(bytes32,bytes32,uint256,uint256,address)"
                            },
                            {
                              "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$",
                              "typeString": "tuple(bytes32,bytes32,uint256,uint256,address)"
                            }
                          ],
                          "expression": {
                            "id": 201,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3929:3:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeCall",
                          "nodeType": "MemberAccess",
                          "src": "3929:14:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3929:141:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 197,
                        "name": "messenger",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 75,
                        "src": "3870:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IMessenger_$3341",
                          "typeString": "contract IMessenger"
                        }
                      },
                      "id": 199,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sendMessage",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3330,
                      "src": "3870:21:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory) external"
                      }
                    },
                    "id": 214,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3870:210:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 215,
                  "nodeType": "ExpressionStatement",
                  "src": "3870:210:16"
                },
                {
                  "expression": {
                    "id": 220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 216,
                        "name": "fills",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 83,
                        "src": "4091:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                          "typeString": "mapping(bytes32 => bytes32)"
                        }
                      },
                      "id": 218,
                      "indexExpression": {
                        "id": 217,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 148,
                        "src": "4097:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4091:16:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 219,
                      "name": "fillId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 189,
                      "src": "4110:6:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "4091:25:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 221,
                  "nodeType": "ExpressionStatement",
                  "src": "4091:25:16"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 223,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 148,
                        "src": "4159:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 224,
                        "name": "fillId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 189,
                        "src": "4182:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 225,
                        "name": "sourceChainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 122,
                        "src": "4202:13:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 226,
                        "name": "targetTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 124,
                        "src": "4229:18:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 227,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4261:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 228,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4261:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 229,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 128,
                        "src": "4285:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 222,
                      "name": "RequestFilled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65,
                      "src": "4132:13:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (bytes32,bytes32,uint256,address,address,uint256)"
                      }
                    },
                    "id": 230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4132:169:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 231,
                  "nodeType": "EmitStatement",
                  "src": "4127:174:16"
                },
                {
                  "expression": {
                    "id": 232,
                    "name": "fillId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 189,
                    "src": "4319:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 136,
                  "id": 233,
                  "nodeType": "Return",
                  "src": "4312:13:16"
                }
              ]
            },
            "documentation": {
              "id": 120,
              "nodeType": "StructuredDocumentation",
              "src": "2321:764:16",
              "text": "Fill the specified request.\n The caller must have approved at least ``amount`` tokens for :sol:contract:`FillManager`\n with the ERC20 token contract at ``targetTokenAddress``. The tokens will be immediately\n sent to ``targetReceiverAddress`` and a fill proof will be generated, which can later\n be used to trigger L1 resolution, if needed.\n @param sourceChainId The source chain ID.\n @param targetTokenAddress Address of the token contract on the target chain.\n @param targetReceiverAddress Recipient address on the target chain.\n @param amount Amount of tokens to transfer. Does not include fees.\n @param nonce The nonce used to create the request ID.\n @return The fill ID."
            },
            "functionSelector": "4749e084",
            "id": 235,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 133,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 132,
                  "name": "onlyWhitelist",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 326,
                  "src": "3279:13:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "3279:13:16"
              }
            ],
            "name": "fillRequest",
            "nameLocation": "3099:11:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 122,
                  "mutability": "mutable",
                  "name": "sourceChainId",
                  "nameLocation": "3128:13:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3120:21:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 121,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3120:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 124,
                  "mutability": "mutable",
                  "name": "targetTokenAddress",
                  "nameLocation": "3159:18:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3151:26:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 123,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3151:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 126,
                  "mutability": "mutable",
                  "name": "targetReceiverAddress",
                  "nameLocation": "3195:21:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3187:29:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 125,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3187:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 128,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3234:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3226:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 127,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3226:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 130,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nameLocation": "3258:5:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3250:13:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 129,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3250:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3110:159:16"
            },
            "returnParameters": {
              "id": 136,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 135,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 235,
                  "src": "3302:7:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 134,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3302:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3301:9:16"
            },
            "scope": 292,
            "src": "3090:1242:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 290,
              "nodeType": "Block",
              "src": "5119:406:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 251,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 246,
                          "name": "l1Resolver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "5137:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 249,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5159:1:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 248,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5151:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 247,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5151:7:16",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5151:10:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5137:24:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5265736f6c7665722061646472657373206e6f7420736574",
                        "id": 252,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5163:26:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_53618f21af364c2b61c8ddd72d086a9c267143d1b8d772550a171d844dc43660",
                          "typeString": "literal_string \"Resolver address not set\""
                        },
                        "value": "Resolver address not set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_53618f21af364c2b61c8ddd72d086a9c267143d1b8d772550a171d844dc43660",
                          "typeString": "literal_string \"Resolver address not set\""
                        }
                      ],
                      "id": 245,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5129:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5129:61:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 254,
                  "nodeType": "ExpressionStatement",
                  "src": "5129:61:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 260,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 256,
                            "name": "fills",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 83,
                            "src": "5208:5:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                              "typeString": "mapping(bytes32 => bytes32)"
                            }
                          },
                          "id": 258,
                          "indexExpression": {
                            "id": 257,
                            "name": "requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 238,
                            "src": "5214:9:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5208:16:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 259,
                          "name": "fillId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 240,
                          "src": "5228:6:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "5208:26:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "46696c6c2076616c6964",
                        "id": 261,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5236:12:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_aeb5c2f6f33f6690e97b51747ccc078819588a2f89ae3dfd014d9cf12171d85f",
                          "typeString": "literal_string \"Fill valid\""
                        },
                        "value": "Fill valid"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_aeb5c2f6f33f6690e97b51747ccc078819588a2f89ae3dfd014d9cf12171d85f",
                          "typeString": "literal_string \"Fill valid\""
                        }
                      ],
                      "id": 255,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5200:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 262,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5200:49:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 263,
                  "nodeType": "ExpressionStatement",
                  "src": "5200:49:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 267,
                        "name": "l1Resolver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78,
                        "src": "5294:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 270,
                              "name": "Resolver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2177,
                              "src": "5350:8:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Resolver_$2177_$",
                                "typeString": "type(contract Resolver)"
                              }
                            },
                            "id": 271,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "resolve",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2154,
                            "src": "5350:16:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function Resolver.resolve(bytes32,bytes32,uint256,uint256,address)"
                            }
                          },
                          {
                            "components": [
                              {
                                "id": 272,
                                "name": "requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 238,
                                "src": "5385:9:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 273,
                                "name": "fillId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 240,
                                "src": "5396:6:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "expression": {
                                  "id": 274,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "5404:5:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 275,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "chainid",
                                "nodeType": "MemberAccess",
                                "src": "5404:13:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 276,
                                "name": "sourceChainId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 242,
                                "src": "5419:13:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 279,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5442:1:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 278,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5434:7:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 277,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5434:7:16",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 280,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5434:10:16",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "id": 281,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5384:61:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$",
                              "typeString": "tuple(bytes32,bytes32,uint256,uint256,address)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function Resolver.resolve(bytes32,bytes32,uint256,uint256,address)"
                            },
                            {
                              "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_address_$",
                              "typeString": "tuple(bytes32,bytes32,uint256,uint256,address)"
                            }
                          ],
                          "expression": {
                            "id": 268,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5318:3:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeCall",
                          "nodeType": "MemberAccess",
                          "src": "5318:14:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 282,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5318:141:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 264,
                        "name": "messenger",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 75,
                        "src": "5259:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IMessenger_$3341",
                          "typeString": "contract IMessenger"
                        }
                      },
                      "id": 266,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sendMessage",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3330,
                      "src": "5259:21:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory) external"
                      }
                    },
                    "id": 283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5259:210:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 284,
                  "nodeType": "ExpressionStatement",
                  "src": "5259:210:16"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 286,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 238,
                        "src": "5500:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 287,
                        "name": "fillId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 240,
                        "src": "5511:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 285,
                      "name": "FillInvalidated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72,
                      "src": "5484:15:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (bytes32,bytes32)"
                      }
                    },
                    "id": 288,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5484:34:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 289,
                  "nodeType": "EmitStatement",
                  "src": "5479:39:16"
                }
              ]
            },
            "documentation": {
              "id": 236,
              "nodeType": "StructuredDocumentation",
              "src": "4338:655:16",
              "text": "Invalidate the specified fill.\n In cases that a claim has been made on the source chain, but without a corresponding fill\n actually happening on the target chain, anyone can call this function to mark the fill\n as invalid. This is typically followed by a challenge game on the source chain, which\n the dishonest claimer is guaranteed to lose as soon as the information about the invalid\n fill (so called \"non-fill proof\") is propagated to the source chain via L1 resolution.\n @param requestId The request ID.\n @param fillId The fill ID.\n @param sourceChainId The source chain ID."
            },
            "functionSelector": "03fc4c37",
            "id": 291,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "invalidateFill",
            "nameLocation": "5007:14:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 243,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 238,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "5039:9:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 291,
                  "src": "5031:17:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 237,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5031:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 240,
                  "mutability": "mutable",
                  "name": "fillId",
                  "nameLocation": "5066:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 291,
                  "src": "5058:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 239,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5058:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 242,
                  "mutability": "mutable",
                  "name": "sourceChainId",
                  "nameLocation": "5090:13:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 291,
                  "src": "5082:21:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 241,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5082:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5021:88:16"
            },
            "returnParameters": {
              "id": 244,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5119:0:16"
            },
            "scope": 292,
            "src": "4998:527:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 293,
        "src": "782:4745:16",
        "usedErrors": []
      }
    ],
    "src": "32:5496:16"
  },
  "bytecode": "608060405234801561001057600080fd5b50604051610e30380380610e3083398101604081905261002f916100ad565b6100383361005d565b600280546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b610d44806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80634e543b26116100715780634e543b2614610165578063715018a6146101785780638da5cb5b14610180578063935beb1a146101915780639e375226146101a4578063f2fde38b146101d757600080fd5b806303fc4c37146100b957806320158c44146100ce57806331e08f7a146101015780633993b6ed146101145780633cb747bf146101275780634749e08414610152575b600080fd5b6100cc6100c7366004610b52565b6101ea565b005b6100ee6100dc366004610b7e565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6100cc61010f366004610bb3565b61037d565b6100cc610122366004610bb3565b6103e1565b60025461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b6100ee610160366004610bce565b61043a565b6100cc610173366004610bb3565b6106e7565b6100cc610761565b6000546001600160a01b031661013a565b60035461013a906001600160a01b031681565b6101c76101b2366004610bb3565b60016020526000908152604090205460ff1681565b60405190151581526020016100f8565b6100cc6101e5366004610bb3565b610775565b6003546001600160a01b03166102425760405162461bcd60e51b815260206004820152601860248201527714995cdbdb1d995c881859191c995cdcc81b9bdd081cd95d60421b60448201526064015b60405180910390fd5b60008381526004602052604090205482900361028d5760405162461bcd60e51b815260206004820152600a602482015269119a5b1b081d985b1a5960b21b6044820152606401610239565b600254600354604051602481018690526044810185905246606482015260848101849052600060a48201526001600160a01b039283169263bb5ddb0f92169060c40160408051601f198184030181529181526020820180516001600160e01b03166314adc78760e31b179052516001600160e01b031960e085901b168152610319929190600401610c74565b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b50506040518492508591507f931b401cf9baede43dc97f7d9dd4017d44f22bfa0a69668d527d9b5fff42b90a90600090a3505050565b6103856107ee565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f371fc559c30f70424413fed6bf7e57dc939651331abad5c970a8ea0921c80b2e91015b60405180910390a150565b6103e96107ee565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527f4e774c97f73f4bea034579e4224498d7d9b3a4109eaa70ed3d85c97a5855f19891016103d6565b3360009081526001602052604081205460ff166104925760405162461bcd60e51b815260206004820152601660248201527514d95b99195c881b9bdd081dda1a5d195b1a5cdd195960521b6044820152606401610239565b6003546001600160a01b03166104e55760405162461bcd60e51b815260206004820152601860248201527714995cdbdb1d995c881859191c995cdcc81b9bdd081cd95d60421b6044820152606401610239565b60408051602080820189905246828401526bffffffffffffffffffffffff19606089811b82168185015288901b1660748301526088820186905260a88083018690528351808403909101815260c89092019092528051910120600090600081815260046020526040902054909150156105915760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e48199a5b1b195960921b6044820152606401610239565b856105a76001600160a01b038216338888610848565b60006105b4600143610c98565b60025460035460405160248101879052924060448401819052466064850152608484018d90523360a485015293506001600160a01b039182169263bb5ddb0f929091169060c40160408051601f198184030181529181526020820180516001600160e01b03166314adc78760e31b179052516001600160e01b031960e085901b168152610645929190600401610c74565b600060405180830381600087803b15801561065f57600080fd5b505af1158015610673573d6000803e3d6000fd5b505050600084815260046020908152604091829020849055815184815233918101919091529081018890526001600160a01b038a1691508a9085907f2995401b199bc45ea8c8b79c27fb204b270cfb74444d546b1a100935e34438879060600160405180910390a498975050505050505050565b6106ef6107ee565b6003546001600160a01b03161561073f5760405162461bcd60e51b815260206004820152601460248201527314995cdbdb1d995c88185b1c9958591e481cd95d60621b6044820152606401610239565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6107696107ee565b61077360006108a8565b565b61077d6107ee565b6001600160a01b0381166107e25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610239565b6107eb816108a8565b50565b6000546001600160a01b031633146107735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610239565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526108a29085906108f8565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061094d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109cf9092919063ffffffff16565b8051909150156109ca578080602001905181019061096b9190610cbd565b6109ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610239565b505050565b60606109de84846000856109e8565b90505b9392505050565b606082471015610a495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610239565b6001600160a01b0385163b610aa05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610239565b600080866001600160a01b03168587604051610abc9190610cdf565b60006040518083038185875af1925050503d8060008114610af9576040519150601f19603f3d011682016040523d82523d6000602084013e610afe565b606091505b5091509150610b0e828286610b19565b979650505050505050565b60608315610b285750816109e1565b825115610b385782518084602001fd5b8160405162461bcd60e51b81526004016102399190610cfb565b600080600060608486031215610b6757600080fd5b505081359360208301359350604090920135919050565b600060208284031215610b9057600080fd5b5035919050565b80356001600160a01b0381168114610bae57600080fd5b919050565b600060208284031215610bc557600080fd5b6109e182610b97565b600080600080600060a08688031215610be657600080fd5b85359450610bf660208701610b97565b9350610c0460408701610b97565b94979396509394606081013594506080013592915050565b60005b83811015610c37578181015183820152602001610c1f565b838111156108a25750506000910152565b60008151808452610c60816020860160208601610c1c565b601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082018190526000906109de90830184610c48565b600082821015610cb857634e487b7160e01b600052601160045260246000fd5b500390565b600060208284031215610ccf57600080fd5b815180151581146109e157600080fd5b60008251610cf1818460208701610c1c565b9190910192915050565b6020815260006109e16020830184610c4856fea26469706673582212204e44605b9dd5403870d99908024257f1acfd58fc67ff4665be469325f22a495464736f6c634300080d0033",
  "bytecodeSha1": "0b0a6d89993993ddd6b7e41d22e3c1889d96dcd8",
  "compiler": {
    "evm_version": "london",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "FillManager",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable._checkOwner": {
          "43": [
            1422,
            1445,
            true
          ]
        },
        "Ownable.transferOwnership": {
          "42": [
            2169,
            2191,
            true
          ]
        }
      },
      "15": {},
      "16": {
        "FillManager.fillRequest": {
          "36": [
            3628,
            3658,
            true
          ]
        },
        "FillManager.invalidateFill": {
          "35": [
            5208,
            5234,
            true
          ]
        },
        "FillManager.setResolver": {
          "37": [
            2225,
            2249,
            true
          ]
        }
      },
      "17": {
        "FillManager.fillRequest": {
          "41": [
            972,
            994,
            true
          ]
        }
      },
      "2": {},
      "27": {},
      "4": {},
      "5": {
        "SafeERC20._callOptionalReturn": {
          "44": [
            4275,
            4296,
            false
          ],
          "45": [
            4359,
            4389,
            true
          ]
        }
      },
      "6": {
        "Address.functionCallWithValue": {
          "38": [
            5145,
            5175,
            true
          ]
        },
        "Address.verifyCallResult": {
          "39": [
            7735,
            7742,
            false
          ],
          "40": [
            7876,
            7897,
            false
          ]
        }
      },
      "7": {}
    },
    "statements": {
      "0": {
        "Ownable._checkOwner": {
          "23": [
            1414,
            1482
          ]
        },
        "Ownable._transferOwnership": {
          "25": [
            2541,
            2558
          ],
          "26": [
            2568,
            2613
          ]
        },
        "Ownable.owner": {
          "0": [
            1266,
            1279
          ]
        },
        "Ownable.renounceOwnership": {
          "19": [
            1895,
            1925
          ]
        },
        "Ownable.transferOwnership": {
          "20": [
            2161,
            2234
          ],
          "21": [
            2244,
            2272
          ]
        }
      },
      "15": {
        "BeamerUtils.createRequestId": {
          "10": [
            341,
            643
          ]
        }
      },
      "16": {
        "FillManager.fillRequest": {
          "9": [
            3321,
            3382
          ],
          "11": [
            3620,
            3677
          ],
          "12": [
            3739,
            3804
          ],
          "13": [
            3870,
            4080
          ],
          "14": [
            4091,
            4116
          ],
          "15": [
            4127,
            4301
          ],
          "16": [
            4312,
            4325
          ]
        },
        "FillManager.invalidateFill": {
          "1": [
            5129,
            5190
          ],
          "2": [
            5200,
            5249
          ],
          "3": [
            5259,
            5469
          ],
          "4": [
            5479,
            5518
          ]
        },
        "FillManager.setResolver": {
          "17": [
            2217,
            2274
          ],
          "18": [
            2284,
            2308
          ]
        }
      },
      "17": {
        "LpWhitelist.addAllowedLp": {
          "5": [
            1320,
            1344
          ],
          "6": [
            1355,
            1374
          ]
        },
        "LpWhitelist.removeAllowedLp": {
          "7": [
            1670,
            1694
          ],
          "8": [
            1705,
            1726
          ]
        }
      },
      "2": {},
      "27": {},
      "4": {},
      "5": {
        "SafeERC20._callOptionalReturn": {
          "27": [
            4351,
            4436
          ]
        },
        "SafeERC20.safeTransferFrom": {
          "24": [
            1112,
            1208
          ]
        }
      },
      "6": {
        "Address.functionCall": {
          "28": [
            4018,
            4077
          ]
        },
        "Address.functionCallWithValue": {
          "29": [
            5137,
            5218
          ],
          "31": [
            5228,
            5288
          ],
          "32": [
            5382,
            5440
          ]
        },
        "Address.isContract": {
          "30": [
            1458,
            1488
          ]
        },
        "Address.verifyCallResult": {
          "33": [
            7758,
            7775
          ],
          "34": [
            8252,
            8272
          ]
        }
      },
      "7": {
        "Context._msgSender": {
          "22": [
            712,
            729
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.7.3/Address",
    "BeamerUtils",
    "OpenZeppelin/openzeppelin-contracts@4.7.3/Context",
    "OpenZeppelin/openzeppelin-contracts@4.7.3/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.7.3/IERC20Permit",
    "IMessenger",
    "LpWhitelist",
    "OpenZeppelin/openzeppelin-contracts@4.7.3/Ownable",
    "OpenZeppelin/openzeppelin-contracts@4.7.3/SafeERC20"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100b45760003560e01c80634e543b26116100715780634e543b2614610165578063715018a6146101785780638da5cb5b14610180578063935beb1a146101915780639e375226146101a4578063f2fde38b146101d757600080fd5b806303fc4c37146100b957806320158c44146100ce57806331e08f7a146101015780633993b6ed146101145780633cb747bf146101275780634749e08414610152575b600080fd5b6100cc6100c7366004610b52565b6101ea565b005b6100ee6100dc366004610b7e565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6100cc61010f366004610bb3565b61037d565b6100cc610122366004610bb3565b6103e1565b60025461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b6100ee610160366004610bce565b61043a565b6100cc610173366004610bb3565b6106e7565b6100cc610761565b6000546001600160a01b031661013a565b60035461013a906001600160a01b031681565b6101c76101b2366004610bb3565b60016020526000908152604090205460ff1681565b60405190151581526020016100f8565b6100cc6101e5366004610bb3565b610775565b6003546001600160a01b03166102425760405162461bcd60e51b815260206004820152601860248201527714995cdbdb1d995c881859191c995cdcc81b9bdd081cd95d60421b60448201526064015b60405180910390fd5b60008381526004602052604090205482900361028d5760405162461bcd60e51b815260206004820152600a602482015269119a5b1b081d985b1a5960b21b6044820152606401610239565b600254600354604051602481018690526044810185905246606482015260848101849052600060a48201526001600160a01b039283169263bb5ddb0f92169060c40160408051601f198184030181529181526020820180516001600160e01b03166314adc78760e31b179052516001600160e01b031960e085901b168152610319929190600401610c74565b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b50506040518492508591507f931b401cf9baede43dc97f7d9dd4017d44f22bfa0a69668d527d9b5fff42b90a90600090a3505050565b6103856107ee565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f371fc559c30f70424413fed6bf7e57dc939651331abad5c970a8ea0921c80b2e91015b60405180910390a150565b6103e96107ee565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527f4e774c97f73f4bea034579e4224498d7d9b3a4109eaa70ed3d85c97a5855f19891016103d6565b3360009081526001602052604081205460ff166104925760405162461bcd60e51b815260206004820152601660248201527514d95b99195c881b9bdd081dda1a5d195b1a5cdd195960521b6044820152606401610239565b6003546001600160a01b03166104e55760405162461bcd60e51b815260206004820152601860248201527714995cdbdb1d995c881859191c995cdcc81b9bdd081cd95d60421b6044820152606401610239565b60408051602080820189905246828401526bffffffffffffffffffffffff19606089811b82168185015288901b1660748301526088820186905260a88083018690528351808403909101815260c89092019092528051910120600090600081815260046020526040902054909150156105915760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e48199a5b1b195960921b6044820152606401610239565b856105a76001600160a01b038216338888610848565b60006105b4600143610c98565b60025460035460405160248101879052924060448401819052466064850152608484018d90523360a485015293506001600160a01b039182169263bb5ddb0f929091169060c40160408051601f198184030181529181526020820180516001600160e01b03166314adc78760e31b179052516001600160e01b031960e085901b168152610645929190600401610c74565b600060405180830381600087803b15801561065f57600080fd5b505af1158015610673573d6000803e3d6000fd5b505050600084815260046020908152604091829020849055815184815233918101919091529081018890526001600160a01b038a1691508a9085907f2995401b199bc45ea8c8b79c27fb204b270cfb74444d546b1a100935e34438879060600160405180910390a498975050505050505050565b6106ef6107ee565b6003546001600160a01b03161561073f5760405162461bcd60e51b815260206004820152601460248201527314995cdbdb1d995c88185b1c9958591e481cd95d60621b6044820152606401610239565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6107696107ee565b61077360006108a8565b565b61077d6107ee565b6001600160a01b0381166107e25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610239565b6107eb816108a8565b50565b6000546001600160a01b031633146107735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610239565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526108a29085906108f8565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061094d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109cf9092919063ffffffff16565b8051909150156109ca578080602001905181019061096b9190610cbd565b6109ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610239565b505050565b60606109de84846000856109e8565b90505b9392505050565b606082471015610a495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610239565b6001600160a01b0385163b610aa05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610239565b600080866001600160a01b03168587604051610abc9190610cdf565b60006040518083038185875af1925050503d8060008114610af9576040519150601f19603f3d011682016040523d82523d6000602084013e610afe565b606091505b5091509150610b0e828286610b19565b979650505050505050565b60608315610b285750816109e1565b825115610b385782518084602001fd5b8160405162461bcd60e51b81526004016102399190610cfb565b600080600060608486031215610b6757600080fd5b505081359360208301359350604090920135919050565b600060208284031215610b9057600080fd5b5035919050565b80356001600160a01b0381168114610bae57600080fd5b919050565b600060208284031215610bc557600080fd5b6109e182610b97565b600080600080600060a08688031215610be657600080fd5b85359450610bf660208701610b97565b9350610c0460408701610b97565b94979396509394606081013594506080013592915050565b60005b83811015610c37578181015183820152602001610c1f565b838111156108a25750506000910152565b60008151808452610c60816020860160208601610c1c565b601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082018190526000906109de90830184610c48565b600082821015610cb857634e487b7160e01b600052601160045260246000fd5b500390565b600060208284031215610ccf57600080fd5b815180151581146109e157600080fd5b60008251610cf1818460208701610c1c565b9190910192915050565b6020815260006109e16020830184610c4856fea26469706673582212204e44605b9dd5403870d99908024257f1acfd58fc67ff4665be469325f22a495464736f6c634300080d0033",
  "deployedSourceMap": "782:4745:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4998:527;;;;;;:::i;:::-;;:::i;:::-;;1748:40;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;666:25:28;;;654:2;639:18;1748:40:16;;;;;;;;1256:125:17;;;;;;:::i;:::-;;:::i;1603:130::-;;;;;;:::i;:::-;;:::i;1565:27:16:-;;;;;-1:-1:-1;;;;;1565:27:16;;;;;;-1:-1:-1;;;;;1254:32:28;;;1236:51;;1224:2;1209:18;1565:27:16;1071:222:28;3090:1242:16;;;;;;:::i;:::-;;:::i;2148:167::-;;;;;;:::i;:::-;;:::i;1831:101:0:-;;;:::i;1201:85::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;1678:25:16;;;;;-1:-1:-1;;;;;1678:25:16;;;820:42:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2142:14:28;;2135:22;2117:41;;2105:2;2090:18;820:42:17;1977:187:28;2081:198:0;;;;;;:::i;:::-;;:::i;4998:527:16:-;5137:10;;-1:-1:-1;;;;;5137:10:16;5129:61;;;;-1:-1:-1;;;5129:61:16;;2371:2:28;5129:61:16;;;2353:21:28;2410:2;2390:18;;;2383:30;-1:-1:-1;;;2429:18:28;;;2422:54;2493:18;;5129:61:16;;;;;;;;;5208:16;;;;:5;:16;;;;;;:26;;;5200:49;;;;-1:-1:-1;;;5200:49:16;;2724:2:28;5200:49:16;;;2706:21:28;2763:2;2743:18;;;2736:30;-1:-1:-1;;;2782:18:28;;;2775:40;2832:18;;5200:49:16;2522:334:28;5200:49:16;5259:9;;5294:10;;5318:141;;;;;3120:25:28;;;3161:18;;;3154:34;;;5404:13:16;3204:18:28;;;3197:34;3247:18;;;3240:34;;;5259:9:16;3290:19:28;;;3283:61;-1:-1:-1;;;;;5259:9:16;;;;:21;;5294:10;;3092:19:28;;5318:141:16;;;-1:-1:-1;;5318:141:16;;;;;;;;;;;;;;-1:-1:-1;;;;;5318:141:16;-1:-1:-1;;;5318:141:16;;;5259:210;-1:-1:-1;;;;;;5318:141:16;5259:210;;;;;;;;;5318:141;5259:210;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5484:34:16;;5511:6;;-1:-1:-1;5500:9:16;;-1:-1:-1;5484:34:16;;;;;4998:527;;;:::o;1256:125:17:-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1320:17:17;::::1;;::::0;;;1340:4:::1;1320:17;::::0;;;;;;;;:24;;-1:-1:-1;;1320:24:17::1;::::0;;::::1;::::0;;;1360:14;;1236:51:28;;;1360:14:17::1;::::0;1209:18:28;1360:14:17::1;;;;;;;;1256:125:::0;:::o;1603:130::-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1677:17:17;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;;1670:24;;-1:-1:-1;;1670:24:17::1;::::0;;1710:16;;1236:51:28;;;1710:16:17::1;::::0;1209:18:28;1710:16:17::1;1071:222:28::0;3090:1242:16;983:10:17;3302:7:16;972:22:17;;;:10;:22;;;;;;;;964:57;;;;-1:-1:-1;;;964:57:17;;4401:2:28;964:57:17;;;4383:21:28;4440:2;4420:18;;;4413:30;-1:-1:-1;;;4459:18:28;;;4452:52;4521:18;;964:57:17;4199:346:28;964:57:17;3329:10:16::1;::::0;-1:-1:-1;;;;;3329:10:16::1;3321:61;;;::::0;-1:-1:-1;;;3321:61:16;;2371:2:28;3321:61:16::1;::::0;::::1;2353:21:28::0;2410:2;2390:18;;;2383:30;-1:-1:-1;;;2429:18:28;;;2422:54;2493:18;;3321:61:16::1;2169:348:28::0;3321:61:16::1;387:242:15::0;;;;;;;6856:19:28;;;3480:13:16::1;6891:12:28::0;;;6884:28;-1:-1:-1;;7000:2:28;6996:15;;;6992:24;;6978:12;;;6971:46;7051:15;;;7047:24;7033:12;;;7026:46;7088:13;;;7081:29;;;7126:13;;;;7119:29;;;387:242:15;;;;;;;;;;7164:13:28;;;;387:242:15;;;360:283;;;;;3392:17:16::1;::::0;3656:1:::1;3628:16:::0;;;:5:::1;:16;::::0;;;;;3392:217;;-1:-1:-1;3628:30:16;3620:57:::1;;;::::0;-1:-1:-1;;;3620:57:16;;4752:2:28;3620:57:16::1;::::0;::::1;4734:21:28::0;4791:2;4771:18;;;4764:30;-1:-1:-1;;;4810:18:28;;;4803:44;4864:18;;3620:57:16::1;4550:338:28::0;3620:57:16::1;3710:18:::0;3739:65:::1;-1:-1:-1::0;;;;;3739:22:16;::::1;3762:10;3774:21:::0;3797:6;3739:22:::1;:65::i;:::-;3815:14;3842:16;3857:1;3842:12;:16;:::i;:::-;3870:9;::::0;3905:10:::1;::::0;3929:141:::1;::::0;::::1;::::0;::::1;3120:25:28::0;;;3832:27:16;::::1;3161:18:28::0;;;3154:34;;;4015:13:16::1;3204:18:28::0;;;3197:34;3247:18;;;3240:34;;;4045:10:16::1;3290:19:28::0;;;3283:61;3832:27:16;-1:-1:-1;;;;;;3870:9:16;;::::1;::::0;:21:::1;::::0;3905:10;;::::1;::::0;3092:19:28;;3929:141:16::1;::::0;;-1:-1:-1;;3929:141:16;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;3929:141:16::1;-1:-1:-1::0;;;3929:141:16::1;::::0;;3870:210;-1:-1:-1;;;;;;3929:141:16::1;3870:210:::0;;;;;;::::1;::::0;;3929:141;3870:210:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;;4091:16:16::1;::::0;;;:5:::1;:16;::::0;;;;;;;;:25;;;4132:169;;5322:25:28;;;4261:10:16::1;5363:18:28::0;;;5356:60;;;;5432:18;;;5425:34;;;-1:-1:-1;;;;;4132:169:16;::::1;::::0;-1:-1:-1;4202:13:16;;4091:16;;4132:169:::1;::::0;5310:2:28;5295:18;4132:169:16::1;;;;;;;4319:6:::0;3090:1242;-1:-1:-1;;;;;;;;3090:1242:16:o;2148:167::-;1094:13:0;:11;:13::i;:::-;2225:10:16::1;::::0;-1:-1:-1;;;;;2225:10:16::1;:24:::0;2217:57:::1;;;::::0;-1:-1:-1;;;2217:57:16;;5672:2:28;2217:57:16::1;::::0;::::1;5654:21:28::0;5711:2;5691:18;;;5684:30;-1:-1:-1;;;5730:18:28;;;5723:50;5790:18;;2217:57:16::1;5470:344:28::0;2217:57:16::1;2284:10;:24:::0;;-1:-1:-1;;;;;;2284:24:16::1;-1:-1:-1::0;;;;;2284:24:16;;;::::1;::::0;;;::::1;::::0;;2148:167::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2081:198::-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;6021:2:28;2161:73:0::1;::::0;::::1;6003:21:28::0;6060:2;6040:18;;;6033:30;6099:34;6079:18;;;6072:62;-1:-1:-1;;;6150:18:28;;;6143:36;6196:19;;2161:73:0::1;5819:402:28::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1359:130::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:7;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;6428:2:28;1414:68:0;;;6410:21:28;;;6447:18;;;6440:30;6506:34;6486:18;;;6479:62;6558:18;;1414:68:0;6226:356:28;974:241:5;1139:68;;;-1:-1:-1;;;;;7446:15:28;;;1139:68:5;;;7428:34:28;7498:15;;7478:18;;;7471:43;7530:18;;;;7523:34;;;1139:68:5;;;;;;;;;;7363:18:28;;;;1139:68:5;;;;;;;;-1:-1:-1;;;;;1139:68:5;-1:-1:-1;;;1139:68:5;;;1112:96;;1132:5;;1112:19;:96::i;:::-;974:241;;;;:::o;2433:187:0:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;3747:706:5:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:5;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:5;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:5;;8052:2:28;4351:85:5;;;8034:21:28;8091:2;8071:18;;;8064:30;8130:34;8110:18;;;8103:62;-1:-1:-1;;;8181:18:28;;;8174:40;8231:19;;4351:85:5;7850:406:28;4351:85:5;3817:636;3747:706;;:::o;3861:223:6:-;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;;3861:223;;;;;;:::o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:6;;8463:2:28;5137:81:6;;;8445:21:28;8502:2;8482:18;;;8475:30;8541:34;8521:18;;;8514:62;-1:-1:-1;;;8592:18:28;;;8585:36;8638:19;;5137:81:6;8261:402:28;5137:81:6;-1:-1:-1;;;;;1465:19:6;;;5228:60;;;;-1:-1:-1;;;5228:60:6;;8870:2:28;5228:60:6;;;8852:21:28;8909:2;8889:18;;;8882:30;8948:31;8928:18;;;8921:59;8997:18;;5228:60:6;8668:353:28;5228:60:6;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:6;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:6:o;7561:742::-;7707:12;7735:7;7731:566;;;-1:-1:-1;7765:10:6;7758:17;;7731:566;7876:17;;:21;7872:415;;8120:10;8114:17;8180:15;8167:10;8163:2;8159:19;8152:44;7872:415;8259:12;8252:20;;-1:-1:-1;;;8252:20:6;;;;;;;;:::i;14:316:28:-;91:6;99;107;160:2;148:9;139:7;135:23;131:32;128:52;;;176:1;173;166:12;128:52;-1:-1:-1;;199:23:28;;;269:2;254:18;;241:32;;-1:-1:-1;320:2:28;305:18;;;292:32;;14:316;-1:-1:-1;14:316:28:o;335:180::-;394:6;447:2;435:9;426:7;422:23;418:32;415:52;;;463:1;460;453:12;415:52;-1:-1:-1;486:23:28;;335:180;-1:-1:-1;335:180:28:o;702:173::-;770:20;;-1:-1:-1;;;;;819:31:28;;809:42;;799:70;;865:1;862;855:12;799:70;702:173;;;:::o;880:186::-;939:6;992:2;980:9;971:7;967:23;963:32;960:52;;;1008:1;1005;998:12;960:52;1031:29;1050:9;1031:29;:::i;1298:466::-;1393:6;1401;1409;1417;1425;1478:3;1466:9;1457:7;1453:23;1449:33;1446:53;;;1495:1;1492;1485:12;1446:53;1531:9;1518:23;1508:33;;1560:38;1594:2;1583:9;1579:18;1560:38;:::i;:::-;1550:48;;1617:38;1651:2;1640:9;1636:18;1617:38;:::i;:::-;1298:466;;;;-1:-1:-1;1607:48:28;;1702:2;1687:18;;1674:32;;-1:-1:-1;1753:3:28;1738:19;1725:33;;1298:466;-1:-1:-1;;1298:466:28:o;3355:258::-;3427:1;3437:113;3451:6;3448:1;3445:13;3437:113;;;3527:11;;;3521:18;3508:11;;;3501:39;3473:2;3466:10;3437:113;;;3568:6;3565:1;3562:13;3559:48;;;-1:-1:-1;;3603:1:28;3585:16;;3578:27;3355:258::o;3618:257::-;3659:3;3697:5;3691:12;3724:6;3719:3;3712:19;3740:63;3796:6;3789:4;3784:3;3780:14;3773:4;3766:5;3762:16;3740:63;:::i;:::-;3857:2;3836:15;-1:-1:-1;;3832:29:28;3823:39;;;;3864:4;3819:50;;3618:257;-1:-1:-1;;3618:257:28:o;3880:314::-;-1:-1:-1;;;;;4055:32:28;;4037:51;;4124:2;4119;4104:18;;4097:30;;;-1:-1:-1;;4144:44:28;;4169:18;;4161:6;4144:44;:::i;4893:222::-;4933:4;4961:1;4958;4955:8;4952:131;;;5005:10;5000:3;4996:20;4993:1;4986:31;5040:4;5037:1;5030:15;5068:4;5065:1;5058:15;4952:131;-1:-1:-1;5100:9:28;;4893:222::o;7568:277::-;7635:6;7688:2;7676:9;7667:7;7663:23;7659:32;7656:52;;;7704:1;7701;7694:12;7656:52;7736:9;7730:16;7789:5;7782:13;7775:21;7768:5;7765:32;7755:60;;7811:1;7808;7801:12;9026:274;9155:3;9193:6;9187:13;9209:53;9255:6;9250:3;9243:4;9235:6;9231:17;9209:53;:::i;:::-;9278:16;;;;;9026:274;-1:-1:-1;;9026:274:28:o;9305:219::-;9454:2;9443:9;9436:21;9417:4;9474:44;9514:2;9503:9;9499:18;9491:6;9474:44;:::i",
  "language": "Solidity",
  "natspec": {
    "events": {
      "FillInvalidated(bytes32,bytes32)": {
        "notice": "Emitted when a fill has been invalidated. .. seealso:: :sol:func:`invalidateFill`"
      },
      "LpAdded(address)": {
        "notice": "Emitted when a liquidity provider has been added to the set of allowed liquidity providers. .. seealso:: :sol:func:`addAllowedLp`"
      },
      "LpRemoved(address)": {
        "notice": "Emitted when a liquidity provider has been removed from the set of allowed liquidity providers. .. seealso:: :sol:func:`removeAllowedLp`"
      },
      "RequestFilled(bytes32,bytes32,uint256,address,address,uint256)": {
        "notice": "Emitted when a request has been filled. .. seealso:: :sol:func:`fillRequest`"
      }
    },
    "kind": "dev",
    "methods": {
      "addAllowedLp(address)": {
        "notice": "Add a liquidity provider to the set of allowed liquidity providers. .. note:: This function can only be called by the contract owner.",
        "params": {
          "newLp": "The liquidity provider."
        }
      },
      "allowedLps(address)": {
        "notice": "The set of liquidity providers that are added to the whitelist."
      },
      "constructor": {
        "notice": "Constructor.",
        "params": {
          "_messenger": "The messenger."
        }
      },
      "fillRequest(uint256,address,address,uint256,uint256)": {
        "notice": "Fill the specified request. The caller must have approved at least ``amount`` tokens for :sol:contract:`FillManager` with the ERC20 token contract at ``targetTokenAddress``. The tokens will be immediately sent to ``targetReceiverAddress`` and a fill proof will be generated, which can later be used to trigger L1 resolution, if needed.",
        "params": {
          "amount": "Amount of tokens to transfer. Does not include fees.",
          "nonce": "The nonce used to create the request ID.",
          "sourceChainId": "The source chain ID.",
          "targetReceiverAddress": "Recipient address on the target chain.",
          "targetTokenAddress": "Address of the token contract on the target chain."
        },
        "returns": {
          "_0": "The fill ID."
        }
      },
      "fills(bytes32)": {
        "notice": "Maps request IDs to fill IDs."
      },
      "invalidateFill(bytes32,bytes32,uint256)": {
        "notice": "Invalidate the specified fill. In cases that a claim has been made on the source chain, but without a corresponding fill actually happening on the target chain, anyone can call this function to mark the fill as invalid. This is typically followed by a challenge game on the source chain, which the dishonest claimer is guaranteed to lose as soon as the information about the invalid fill (so called \"non-fill proof\") is propagated to the source chain via L1 resolution.",
        "params": {
          "fillId": "The fill ID.",
          "requestId": "The request ID.",
          "sourceChainId": "The source chain ID."
        }
      },
      "l1Resolver()": {
        "notice": "The L1 :sol:contract:`Resolver` contract to be used for L1 resolution."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAllowedLp(address)": {
        "notice": "Remove a liquidity provider from the set of allowed liquidity providers. .. note:: This function can only be called by the contract owner.",
        "params": {
          "oldLp": "The liquidity provider."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setResolver(address)": {
        "notice": "Set the resolver's address Can only ever be set once. Before it is set, no fills or invalidations are possible",
        "params": {
          "_l1Resolver": "The L1 resolver address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "notice": "The fill manager. This contract is responsible for keeping track of filled requests. In addition to allowing agents to (eventually) prove that they filled requests, it also allows anyone to invalidate a claim that a request was filled. It is the only contract that agents need to interact with on the target chain.",
    "version": 1
  },
  "offset": [
    782,
    5527
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E543B26 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x4E543B26 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x935BEB1A EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x9E375226 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3FC4C37 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x20158C44 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x31E08F7A EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x3993B6ED EQ PUSH2 0x114 JUMPI DUP1 PUSH4 0x3CB747BF EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x4749E084 EQ PUSH2 0x152 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0xB52 JUMP JUMPDEST PUSH2 0x1EA JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEE PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0xB7E JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCC PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xBB3 JUMP JUMPDEST PUSH2 0x37D JUMP JUMPDEST PUSH2 0xCC PUSH2 0x122 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB3 JUMP JUMPDEST PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x13A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xEE PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0xBCE JUMP JUMPDEST PUSH2 0x43A JUMP JUMPDEST PUSH2 0xCC PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB3 JUMP JUMPDEST PUSH2 0x6E7 JUMP JUMPDEST PUSH2 0xCC PUSH2 0x761 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13A JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x13A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xCC PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB3 JUMP JUMPDEST PUSH2 0x775 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x242 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x14995CDBDB1D995C881859191C995CDCC81B9BDD081CD95D PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP1 SUB PUSH2 0x28D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x119A5B1B081D985B1A59 PUSH1 0xB2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x239 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE CHAINID PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xBB5DDB0F SWAP3 AND SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x14ADC787 PUSH1 0xE3 SHL OR SWAP1 MSTORE MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH2 0x319 SWAP3 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0xC74 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x347 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD DUP5 SWAP3 POP DUP6 SWAP2 POP PUSH32 0x931B401CF9BAEDE43DC97F7D9DD4017D44F22BFA0A69668D527D9B5FFF42B90A SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x385 PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x371FC559C30F70424413FED6BF7E57DC939651331ABAD5C970A8EA0921C80B2E SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x3E9 PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x4E774C97F73F4BEA034579E4224498D7D9B3A4109EAA70ED3D85C97A5855F198 SWAP2 ADD PUSH2 0x3D6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x492 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14D95B99195C881B9BDD081DDA1A5D195B1A5CDD1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x239 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x14995CDBDB1D995C881859191C995CDCC81B9BDD081CD95D PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x239 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE CHAINID DUP3 DUP5 ADD MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP10 DUP2 SHL DUP3 AND DUP2 DUP6 ADD MSTORE DUP9 SWAP1 SHL AND PUSH1 0x74 DUP4 ADD MSTORE PUSH1 0x88 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA8 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC8 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x591 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x105B1C9958591E48199A5B1B1959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x239 JUMP JUMPDEST DUP6 PUSH2 0x5A7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER DUP9 DUP9 PUSH2 0x848 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B4 PUSH1 0x1 NUMBER PUSH2 0xC98 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE SWAP3 BLOCKHASH PUSH1 0x44 DUP5 ADD DUP2 SWAP1 MSTORE CHAINID PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x84 DUP5 ADD DUP14 SWAP1 MSTORE CALLER PUSH1 0xA4 DUP6 ADD MSTORE SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH4 0xBB5DDB0F SWAP3 SWAP1 SWAP2 AND SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x14ADC787 PUSH1 0xE3 SHL OR SWAP1 MSTORE MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH2 0x645 SWAP3 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0xC74 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x673 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE CALLER SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP2 POP DUP11 SWAP1 DUP6 SWAP1 PUSH32 0x2995401B199BC45EA8C8B79C27FB204B270CFB74444D546B1A100935E3443887 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6EF PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x73F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14995CDBDB1D995C88185B1C9958591E481CD95D PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x239 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x769 PUSH2 0x7EE JUMP JUMPDEST PUSH2 0x773 PUSH1 0x0 PUSH2 0x8A8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x77D PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x239 JUMP JUMPDEST PUSH2 0x7EB DUP2 PUSH2 0x8A8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x773 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x239 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x8A2 SWAP1 DUP6 SWAP1 PUSH2 0x8F8 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x94D DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9CF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x9CA JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x96B SWAP2 SWAP1 PUSH2 0xCBD JUMP JUMPDEST PUSH2 0x9CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x239 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9DE DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x9E8 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xA49 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x239 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xAA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x239 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xABC SWAP2 SWAP1 PUSH2 0xCDF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xAF9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xB0E DUP3 DUP3 DUP7 PUSH2 0xB19 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xB28 JUMPI POP DUP2 PUSH2 0x9E1 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xB38 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x239 SWAP2 SWAP1 PUSH2 0xCFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9E1 DUP3 PUSH2 0xB97 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xBE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0xBF6 PUSH1 0x20 DUP8 ADD PUSH2 0xB97 JUMP JUMPDEST SWAP4 POP PUSH2 0xC04 PUSH1 0x40 DUP8 ADD PUSH2 0xB97 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC37 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC1F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x8A2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xC60 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xC1C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9DE SWAP1 DUP4 ADD DUP5 PUSH2 0xC48 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xCB8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xCF1 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC1C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x9E1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC48 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E DIFFICULTY PUSH1 0x5B SWAP14 0xD5 BLOCKHASH CODESIZE PUSH17 0xD99908024257F1ACFD58FC67FF4665BE46 SWAP4 0x25 CALLCODE 0x2A 0x49 SLOAD PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        782,
        5527
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "5": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "CALLVALUE",
      "path": "16"
    },
    "6": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "7": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "8": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "12": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "REVERT",
      "path": "16"
    },
    "16": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "17": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "POP",
      "path": "16"
    },
    "18": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "21": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "LT",
      "path": "16"
    },
    "22": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB4"
    },
    "25": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "26": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "29": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "SHR",
      "path": "16"
    },
    "32": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "33": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x4E543B26"
    },
    "38": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "GT",
      "path": "16"
    },
    "39": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "43": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "44": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x4E543B26"
    },
    "49": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "50": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x165"
    },
    "53": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "54": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "55": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x715018A6"
    },
    "60": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "61": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x178"
    },
    "64": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "65": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "66": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x8DA5CB5B"
    },
    "71": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "72": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x180"
    },
    "75": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "76": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "77": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x935BEB1A"
    },
    "82": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "83": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x191"
    },
    "86": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "87": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "88": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x9E375226"
    },
    "93": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "94": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x1A4"
    },
    "97": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "98": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "99": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0xF2FDE38B"
    },
    "104": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "105": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x1D7"
    },
    "108": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "109": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "112": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "REVERT",
      "path": "16"
    },
    "113": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "114": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "115": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x3FC4C37"
    },
    "120": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "121": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB9"
    },
    "124": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "125": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "126": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x20158C44"
    },
    "131": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "132": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xCE"
    },
    "135": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "136": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "137": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x31E08F7A"
    },
    "142": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "143": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x101"
    },
    "146": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "147": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "148": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x3993B6ED"
    },
    "153": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "154": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x114"
    },
    "157": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "158": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "159": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x3CB747BF"
    },
    "164": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "165": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x127"
    },
    "168": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "169": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "170": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x4749E084"
    },
    "175": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "EQ",
      "path": "16"
    },
    "176": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x152"
    },
    "179": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "180": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "181": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "183": {
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "DUP1",
      "path": "16"
    },
    "184": {
      "first_revert": true,
      "fn": null,
      "offset": [
        782,
        5527
      ],
      "op": "REVERT",
      "path": "16"
    },
    "185": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "186": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xCC"
    },
    "189": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xC7"
    },
    "192": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "193": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "195": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB52"
    },
    "198": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        4998,
        5525
      ],
      "op": "JUMP",
      "path": "16"
    },
    "199": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "200": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x1EA"
    },
    "203": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        4998,
        5525
      ],
      "op": "JUMP",
      "path": "16"
    },
    "204": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "205": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "STOP",
      "path": "16"
    },
    "206": {
      "offset": [
        1748,
        1788
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "207": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xEE"
    },
    "210": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xDC"
    },
    "213": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "214": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "216": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB7E"
    },
    "219": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        1748,
        1788
      ],
      "op": "JUMP",
      "path": "16"
    },
    "220": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "221": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "223": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "225": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "226": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "228": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "229": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "DUP2",
      "path": "16"
    },
    "230": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "231": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "233": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "234": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "235": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "236": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "DUP2",
      "path": "16"
    },
    "237": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "JUMP",
      "path": "16"
    },
    "238": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "239": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "241": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "242": {
      "op": "SWAP1"
    },
    "243": {
      "op": "DUP2"
    },
    "244": {
      "op": "MSTORE"
    },
    "245": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "247": {
      "op": "ADD"
    },
    "248": {
      "offset": [
        1748,
        1788
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "249": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "251": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "252": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "DUP1",
      "path": "16"
    },
    "253": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "254": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "SUB",
      "path": "16"
    },
    "255": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "256": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        1748,
        1788
      ],
      "op": "RETURN",
      "path": "16"
    },
    "257": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "258": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xCC"
    },
    "261": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x10F"
    },
    "264": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "265": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "267": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xBB3"
    },
    "270": {
      "fn": "LpWhitelist.addAllowedLp",
      "jump": "i",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMP",
      "path": "17"
    },
    "271": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "272": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x37D"
    },
    "275": {
      "fn": "LpWhitelist.addAllowedLp",
      "jump": "i",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMP",
      "path": "17"
    },
    "276": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "277": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xCC"
    },
    "280": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x122"
    },
    "283": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "284": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "286": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xBB3"
    },
    "289": {
      "fn": "LpWhitelist.removeAllowedLp",
      "jump": "i",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMP",
      "path": "17"
    },
    "290": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "291": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x3E1"
    },
    "294": {
      "fn": "LpWhitelist.removeAllowedLp",
      "jump": "i",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMP",
      "path": "17"
    },
    "295": {
      "offset": [
        1565,
        1592
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "296": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1592
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x2"
    },
    "298": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1592
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "299": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1592
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x13A"
    },
    "302": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1592
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "303": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "305": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "307": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "309": {
      "op": "SHL"
    },
    "310": {
      "op": "SUB"
    },
    "311": {
      "offset": [
        1565,
        1592
      ],
      "op": "AND",
      "path": "16"
    },
    "312": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1592
      ],
      "op": "DUP2",
      "path": "16"
    },
    "313": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1592
      ],
      "op": "JUMP",
      "path": "16"
    },
    "314": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1592
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "315": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1592
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "317": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1565,
        1592
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "318": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "320": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "322": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "324": {
      "op": "SHL"
    },
    "325": {
      "op": "SUB"
    },
    "326": {
      "op": "SWAP1"
    },
    "327": {
      "op": "SWAP2"
    },
    "328": {
      "op": "AND"
    },
    "329": {
      "op": "DUP2"
    },
    "330": {
      "op": "MSTORE"
    },
    "331": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "333": {
      "op": "ADD"
    },
    "334": {
      "offset": [
        1565,
        1592
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xF8"
    },
    "337": {
      "op": "JUMP"
    },
    "338": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "339": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xEE"
    },
    "342": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x160"
    },
    "345": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "346": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "348": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xBCE"
    },
    "351": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3090,
        4332
      ],
      "op": "JUMP",
      "path": "16"
    },
    "352": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "353": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x43A"
    },
    "356": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3090,
        4332
      ],
      "op": "JUMP",
      "path": "16"
    },
    "357": {
      "fn": "FillManager.setResolver",
      "offset": [
        2148,
        2315
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "358": {
      "fn": "FillManager.setResolver",
      "offset": [
        2148,
        2315
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xCC"
    },
    "361": {
      "fn": "FillManager.setResolver",
      "offset": [
        2148,
        2315
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x173"
    },
    "364": {
      "fn": "FillManager.setResolver",
      "offset": [
        2148,
        2315
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "365": {
      "fn": "FillManager.setResolver",
      "offset": [
        2148,
        2315
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "367": {
      "fn": "FillManager.setResolver",
      "offset": [
        2148,
        2315
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xBB3"
    },
    "370": {
      "fn": "FillManager.setResolver",
      "jump": "i",
      "offset": [
        2148,
        2315
      ],
      "op": "JUMP",
      "path": "16"
    },
    "371": {
      "fn": "FillManager.setResolver",
      "offset": [
        2148,
        2315
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "372": {
      "fn": "FillManager.setResolver",
      "offset": [
        2148,
        2315
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x6E7"
    },
    "375": {
      "fn": "FillManager.setResolver",
      "jump": "i",
      "offset": [
        2148,
        2315
      ],
      "op": "JUMP",
      "path": "16"
    },
    "376": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "377": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCC"
    },
    "380": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x761"
    },
    "383": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMP",
      "path": "0"
    },
    "384": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "385": {
      "fn": "Ownable.owner",
      "offset": [
        1247,
        1254
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "387": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "SLOAD",
      "path": "0",
      "statement": 0
    },
    "388": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "390": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "392": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "394": {
      "op": "SHL"
    },
    "395": {
      "op": "SUB"
    },
    "396": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "AND",
      "path": "0"
    },
    "397": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13A"
    },
    "400": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "JUMP",
      "path": "0"
    },
    "401": {
      "offset": [
        1678,
        1703
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "402": {
      "fn": "Ownable.owner",
      "offset": [
        1678,
        1703
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x3"
    },
    "404": {
      "fn": "Ownable.owner",
      "offset": [
        1678,
        1703
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "405": {
      "fn": "Ownable.owner",
      "offset": [
        1678,
        1703
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x13A"
    },
    "408": {
      "fn": "Ownable.owner",
      "offset": [
        1678,
        1703
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "409": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "411": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "413": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "415": {
      "op": "SHL"
    },
    "416": {
      "op": "SUB"
    },
    "417": {
      "offset": [
        1678,
        1703
      ],
      "op": "AND",
      "path": "16"
    },
    "418": {
      "fn": "Ownable.owner",
      "offset": [
        1678,
        1703
      ],
      "op": "DUP2",
      "path": "16"
    },
    "419": {
      "fn": "Ownable.owner",
      "offset": [
        1678,
        1703
      ],
      "op": "JUMP",
      "path": "16"
    },
    "420": {
      "offset": [
        820,
        862
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "421": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1C7"
    },
    "424": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1B2"
    },
    "427": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "428": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "430": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xBB3"
    },
    "433": {
      "fn": "Ownable.owner",
      "jump": "i",
      "offset": [
        820,
        862
      ],
      "op": "JUMP",
      "path": "17"
    },
    "434": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "435": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "437": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "439": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "440": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "442": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "443": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "DUP2",
      "path": "17"
    },
    "444": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "445": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "447": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "448": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "449": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "450": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xFF"
    },
    "452": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "AND",
      "path": "17"
    },
    "453": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "DUP2",
      "path": "17"
    },
    "454": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "JUMP",
      "path": "17"
    },
    "455": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "456": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "458": {
      "fn": "Ownable.owner",
      "offset": [
        820,
        862
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "459": {
      "op": "SWAP1"
    },
    "460": {
      "op": "ISZERO"
    },
    "461": {
      "op": "ISZERO"
    },
    "462": {
      "op": "DUP2"
    },
    "463": {
      "op": "MSTORE"
    },
    "464": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "466": {
      "op": "ADD"
    },
    "467": {
      "offset": [
        820,
        862
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xF8"
    },
    "470": {
      "op": "JUMP"
    },
    "471": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "472": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCC"
    },
    "475": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E5"
    },
    "478": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "479": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "481": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBB3"
    },
    "484": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMP",
      "path": "0"
    },
    "485": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "486": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x775"
    },
    "489": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMP",
      "path": "0"
    },
    "490": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "491": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5137,
        5147
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 1,
      "value": "0x3"
    },
    "493": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5137,
        5147
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "494": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "498": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "500": {
      "op": "SHL"
    },
    "501": {
      "op": "SUB"
    },
    "502": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5137,
        5147
      ],
      "op": "AND",
      "path": "16"
    },
    "503": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x242"
    },
    "506": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "507": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "509": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "510": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "514": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "516": {
      "op": "SHL"
    },
    "517": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "DUP2",
      "path": "16"
    },
    "518": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "519": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "521": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "523": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "DUP3",
      "path": "16"
    },
    "524": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "ADD",
      "path": "16"
    },
    "525": {
      "op": "MSTORE"
    },
    "526": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "528": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "530": {
      "op": "DUP3"
    },
    "531": {
      "op": "ADD"
    },
    "532": {
      "op": "MSTORE"
    },
    "533": {
      "op": "PUSH24",
      "value": "0x14995CDBDB1D995C881859191C995CDCC81B9BDD081CD95D"
    },
    "558": {
      "op": "PUSH1",
      "value": "0x42"
    },
    "560": {
      "op": "SHL"
    },
    "561": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "563": {
      "op": "DUP3"
    },
    "564": {
      "op": "ADD"
    },
    "565": {
      "op": "MSTORE"
    },
    "566": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "568": {
      "op": "ADD"
    },
    "569": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "570": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "572": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "573": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "DUP1",
      "path": "16"
    },
    "574": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "575": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "SUB",
      "path": "16"
    },
    "576": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "577": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "16"
    },
    "578": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5129,
        5190
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "579": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 2,
      "value": "0x0"
    },
    "581": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "DUP4",
      "path": "16"
    },
    "582": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "DUP2",
      "path": "16"
    },
    "583": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "584": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5213
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "586": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "588": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "589": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "591": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "592": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "593": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5224
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "594": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5234
      ],
      "op": "DUP3",
      "path": "16"
    },
    "595": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5234
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "596": {
      "branch": 35,
      "fn": "FillManager.invalidateFill",
      "offset": [
        5208,
        5234
      ],
      "op": "SUB",
      "path": "16"
    },
    "597": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x28D"
    },
    "600": {
      "branch": 35,
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "601": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "603": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "604": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "608": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "610": {
      "op": "SHL"
    },
    "611": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "DUP2",
      "path": "16"
    },
    "612": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "613": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "615": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "617": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "DUP3",
      "path": "16"
    },
    "618": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "ADD",
      "path": "16"
    },
    "619": {
      "op": "MSTORE"
    },
    "620": {
      "op": "PUSH1",
      "value": "0xA"
    },
    "622": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "624": {
      "op": "DUP3"
    },
    "625": {
      "op": "ADD"
    },
    "626": {
      "op": "MSTORE"
    },
    "627": {
      "op": "PUSH10",
      "value": "0x119A5B1B081D985B1A59"
    },
    "638": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "640": {
      "op": "SHL"
    },
    "641": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "643": {
      "op": "DUP3"
    },
    "644": {
      "op": "ADD"
    },
    "645": {
      "op": "MSTORE"
    },
    "646": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "648": {
      "op": "ADD"
    },
    "649": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x239"
    },
    "652": {
      "op": "JUMP"
    },
    "653": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5200,
        5249
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "654": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5268
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 3,
      "value": "0x2"
    },
    "656": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5268
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "657": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5294,
        5304
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x3"
    },
    "659": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5294,
        5304
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "660": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "662": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "663": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "665": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "DUP2",
      "path": "16"
    },
    "666": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "ADD",
      "path": "16"
    },
    "667": {
      "op": "DUP7"
    },
    "668": {
      "op": "SWAP1"
    },
    "669": {
      "op": "MSTORE"
    },
    "670": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "672": {
      "op": "DUP2"
    },
    "673": {
      "op": "ADD"
    },
    "674": {
      "op": "DUP6"
    },
    "675": {
      "op": "SWAP1"
    },
    "676": {
      "op": "MSTORE"
    },
    "677": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5404,
        5417
      ],
      "op": "CHAINID",
      "path": "16"
    },
    "678": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "680": {
      "op": "DUP3"
    },
    "681": {
      "op": "ADD"
    },
    "682": {
      "op": "MSTORE"
    },
    "683": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "685": {
      "op": "DUP2"
    },
    "686": {
      "op": "ADD"
    },
    "687": {
      "op": "DUP5"
    },
    "688": {
      "op": "SWAP1"
    },
    "689": {
      "op": "MSTORE"
    },
    "690": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5268
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "692": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "694": {
      "op": "DUP3"
    },
    "695": {
      "op": "ADD"
    },
    "696": {
      "op": "MSTORE"
    },
    "697": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "699": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "701": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "703": {
      "op": "SHL"
    },
    "704": {
      "op": "SUB"
    },
    "705": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5268
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "706": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5268
      ],
      "op": "DUP4",
      "path": "16"
    },
    "707": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5268
      ],
      "op": "AND",
      "path": "16"
    },
    "708": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5268
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "709": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5280
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0xBB5DDB0F"
    },
    "714": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5280
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "715": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5294,
        5304
      ],
      "op": "AND",
      "path": "16"
    },
    "716": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5294,
        5304
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "717": {
      "op": "PUSH1",
      "value": "0xC4"
    },
    "719": {
      "op": "ADD"
    },
    "720": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "722": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "DUP1",
      "path": "16"
    },
    "723": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "724": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "726": {
      "op": "NOT"
    },
    "727": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "DUP2",
      "path": "16"
    },
    "728": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "DUP5",
      "path": "16"
    },
    "729": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "SUB",
      "path": "16"
    },
    "730": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "ADD",
      "path": "16"
    },
    "731": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "DUP2",
      "path": "16"
    },
    "732": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "733": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "734": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "DUP2",
      "path": "16"
    },
    "735": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "736": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "738": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "DUP3",
      "path": "16"
    },
    "739": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "ADD",
      "path": "16"
    },
    "740": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "DUP1",
      "path": "16"
    },
    "741": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "742": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "744": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "746": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "748": {
      "op": "SHL"
    },
    "749": {
      "op": "SUB"
    },
    "750": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "AND",
      "path": "16"
    },
    "751": {
      "op": "PUSH4",
      "value": "0x14ADC787"
    },
    "756": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "758": {
      "op": "SHL"
    },
    "759": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "OR",
      "path": "16"
    },
    "760": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "761": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "762": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "763": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "765": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "767": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "769": {
      "op": "SHL"
    },
    "770": {
      "op": "SUB"
    },
    "771": {
      "op": "NOT"
    },
    "772": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xE0"
    },
    "774": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP6",
      "path": "16"
    },
    "775": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "776": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "SHL",
      "path": "16"
    },
    "777": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "AND",
      "path": "16"
    },
    "778": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP2",
      "path": "16"
    },
    "779": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "780": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x319"
    },
    "783": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "784": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "785": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5318,
        5459
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "786": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "788": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "ADD",
      "path": "16"
    },
    "789": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xC74"
    },
    "792": {
      "fn": "FillManager.invalidateFill",
      "jump": "i",
      "offset": [
        5259,
        5469
      ],
      "op": "JUMP",
      "path": "16"
    },
    "793": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "794": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "796": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "798": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "799": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP1",
      "path": "16"
    },
    "800": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP4",
      "path": "16"
    },
    "801": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "SUB",
      "path": "16"
    },
    "802": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP2",
      "path": "16"
    },
    "803": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "805": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP8",
      "path": "16"
    },
    "806": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP1",
      "path": "16"
    },
    "807": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "EXTCODESIZE",
      "path": "16"
    },
    "808": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "809": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP1",
      "path": "16"
    },
    "810": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "811": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x333"
    },
    "814": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "815": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "817": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP1",
      "path": "16"
    },
    "818": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "REVERT",
      "path": "16"
    },
    "819": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "820": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "POP",
      "path": "16"
    },
    "821": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "GAS",
      "path": "16"
    },
    "822": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "CALL",
      "path": "16"
    },
    "823": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "824": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP1",
      "path": "16"
    },
    "825": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "826": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x347"
    },
    "829": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "830": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "831": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "833": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "DUP1",
      "path": "16"
    },
    "834": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "RETURNDATACOPY",
      "path": "16"
    },
    "835": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "836": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "838": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "REVERT",
      "path": "16"
    },
    "839": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5259,
        5469
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "840": {
      "op": "POP"
    },
    "841": {
      "op": "POP"
    },
    "842": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5484,
        5518
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 4,
      "value": "0x40"
    },
    "844": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5484,
        5518
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "845": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5511,
        5517
      ],
      "op": "DUP5",
      "path": "16"
    },
    "846": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5511,
        5517
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "847": {
      "op": "POP"
    },
    "848": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5500,
        5509
      ],
      "op": "DUP6",
      "path": "16"
    },
    "849": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5500,
        5509
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "850": {
      "op": "POP"
    },
    "851": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5484,
        5518
      ],
      "op": "PUSH32",
      "path": "16",
      "value": "0x931B401CF9BAEDE43DC97F7D9DD4017D44F22BFA0A69668D527D9B5FFF42B90A"
    },
    "884": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5484,
        5518
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "885": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5484,
        5518
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "887": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5484,
        5518
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "888": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        5484,
        5518
      ],
      "op": "LOG3",
      "path": "16"
    },
    "889": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "POP",
      "path": "16"
    },
    "890": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "POP",
      "path": "16"
    },
    "891": {
      "fn": "FillManager.invalidateFill",
      "offset": [
        4998,
        5525
      ],
      "op": "POP",
      "path": "16"
    },
    "892": {
      "fn": "FillManager.invalidateFill",
      "jump": "o",
      "offset": [
        4998,
        5525
      ],
      "op": "JUMP",
      "path": "16"
    },
    "893": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "894": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x385"
    },
    "897": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7EE"
    },
    "900": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "901": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "902": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "904": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "906": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "908": {
      "op": "SHL"
    },
    "909": {
      "op": "SUB"
    },
    "910": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "17",
      "statement": 5
    },
    "911": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "AND",
      "path": "17"
    },
    "912": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "914": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "17"
    },
    "915": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "17"
    },
    "916": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "917": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1340,
        1344
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "919": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "921": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "17"
    },
    "922": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP2",
      "path": "17"
    },
    "923": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "924": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "926": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "927": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "DUP4",
      "path": "17"
    },
    "928": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "929": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1337
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "930": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "DUP1",
      "path": "17"
    },
    "931": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "932": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "934": {
      "op": "NOT"
    },
    "935": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "AND",
      "path": "17"
    },
    "936": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "937": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "938": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "OR",
      "path": "17"
    },
    "939": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "940": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "941": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1320,
        1344
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "942": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SWAP1",
      "path": "17",
      "statement": 6
    },
    "943": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "944": {
      "op": "SWAP2"
    },
    "945": {
      "op": "DUP3"
    },
    "946": {
      "op": "MSTORE"
    },
    "947": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "PUSH32",
      "path": "17",
      "value": "0x371FC559C30F70424413FED6BF7E57DC939651331ABAD5C970A8EA0921C80B2E"
    },
    "980": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "981": {
      "op": "ADD"
    },
    "982": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "983": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "985": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "986": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "DUP1",
      "path": "17"
    },
    "987": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "988": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SUB",
      "path": "17"
    },
    "989": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "990": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1360,
        1374
      ],
      "op": "LOG1",
      "path": "17"
    },
    "991": {
      "fn": "LpWhitelist.addAllowedLp",
      "offset": [
        1256,
        1381
      ],
      "op": "POP",
      "path": "17"
    },
    "992": {
      "fn": "LpWhitelist.addAllowedLp",
      "jump": "o",
      "offset": [
        1256,
        1381
      ],
      "op": "JUMP",
      "path": "17"
    },
    "993": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1603,
        1733
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "994": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E9"
    },
    "997": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7EE"
    },
    "1000": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1001": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1002": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1004": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1008": {
      "op": "SHL"
    },
    "1009": {
      "op": "SUB"
    },
    "1010": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP2",
      "path": "17",
      "statement": 7
    },
    "1011": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "AND",
      "path": "17"
    },
    "1012": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1014": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1015": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1016": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1017": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1687
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "1019": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1021": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1022": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1023": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1024": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1026": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1027": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1028": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1029": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1677,
        1694
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1030": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1031": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1032": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1034": {
      "op": "NOT"
    },
    "1035": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "AND",
      "path": "17"
    },
    "1036": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1037": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1670,
        1694
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1038": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "SWAP1",
      "path": "17",
      "statement": 8
    },
    "1039": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1040": {
      "op": "SWAP2"
    },
    "1041": {
      "op": "DUP3"
    },
    "1042": {
      "op": "MSTORE"
    },
    "1043": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "PUSH32",
      "path": "17",
      "value": "0x4E774C97F73F4BEA034579E4224498D7D9B3A4109EAA70ED3D85C97A5855F198"
    },
    "1076": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1077": {
      "op": "ADD"
    },
    "1078": {
      "fn": "LpWhitelist.removeAllowedLp",
      "offset": [
        1710,
        1726
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x3D6"
    },
    "1081": {
      "op": "JUMP"
    },
    "1082": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1083": {
      "offset": [
        983,
        993
      ],
      "op": "CALLER",
      "path": "17"
    },
    "1084": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3302,
        3309
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1086": {
      "offset": [
        972,
        994
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1087": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1088": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1089": {
      "offset": [
        972,
        982
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "1091": {
      "offset": [
        972,
        994
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1093": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1094": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1096": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1097": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1098": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1099": {
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xFF"
    },
    "1101": {
      "branch": 41,
      "fn": "FillManager.fillRequest",
      "offset": [
        972,
        994
      ],
      "op": "AND",
      "path": "17"
    },
    "1102": {
      "offset": [
        964,
        1021
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x492"
    },
    "1105": {
      "branch": 41,
      "offset": [
        964,
        1021
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1106": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1108": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1109": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1113": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1115": {
      "op": "SHL"
    },
    "1116": {
      "offset": [
        964,
        1021
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1117": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1118": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1120": {
      "offset": [
        964,
        1021
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1122": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1123": {
      "fn": "FillManager.fillRequest",
      "offset": [
        964,
        1021
      ],
      "op": "ADD",
      "path": "17"
    },
    "1124": {
      "op": "MSTORE"
    },
    "1125": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "1127": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1129": {
      "op": "DUP3"
    },
    "1130": {
      "op": "ADD"
    },
    "1131": {
      "op": "MSTORE"
    },
    "1132": {
      "op": "PUSH22",
      "value": "0x14D95B99195C881B9BDD081DDA1A5D195B1A5CDD1959"
    },
    "1155": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "1157": {
      "op": "SHL"
    },
    "1158": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1160": {
      "op": "DUP3"
    },
    "1161": {
      "op": "ADD"
    },
    "1162": {
      "op": "MSTORE"
    },
    "1163": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1165": {
      "op": "ADD"
    },
    "1166": {
      "offset": [
        964,
        1021
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x239"
    },
    "1169": {
      "op": "JUMP"
    },
    "1170": {
      "offset": [
        964,
        1021
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1171": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3329,
        3339
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 9,
      "value": "0x3"
    },
    "1173": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3329,
        3339
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1174": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1176": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1178": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1180": {
      "op": "SHL"
    },
    "1181": {
      "op": "SUB"
    },
    "1182": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3329,
        3339
      ],
      "op": "AND",
      "path": "16"
    },
    "1183": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x4E5"
    },
    "1186": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1187": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1189": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1190": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1194": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1196": {
      "op": "SHL"
    },
    "1197": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1198": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1199": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1201": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "1203": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1204": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "ADD",
      "path": "16"
    },
    "1205": {
      "op": "MSTORE"
    },
    "1206": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "1208": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1210": {
      "op": "DUP3"
    },
    "1211": {
      "op": "ADD"
    },
    "1212": {
      "op": "MSTORE"
    },
    "1213": {
      "op": "PUSH24",
      "value": "0x14995CDBDB1D995C881859191C995CDCC81B9BDD081CD95D"
    },
    "1238": {
      "op": "PUSH1",
      "value": "0x42"
    },
    "1240": {
      "op": "SHL"
    },
    "1241": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1243": {
      "op": "DUP3"
    },
    "1244": {
      "op": "ADD"
    },
    "1245": {
      "op": "MSTORE"
    },
    "1246": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1248": {
      "op": "ADD"
    },
    "1249": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x239"
    },
    "1252": {
      "op": "JUMP"
    },
    "1253": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3321,
        3382
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1254": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "PUSH1",
      "path": "15",
      "statement": 10,
      "value": "0x40"
    },
    "1256": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "DUP1",
      "path": "15"
    },
    "1257": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "1258": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "1260": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "DUP1",
      "path": "15"
    },
    "1261": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "DUP3",
      "path": "15"
    },
    "1262": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "ADD",
      "path": "15"
    },
    "1263": {
      "op": "DUP10"
    },
    "1264": {
      "op": "SWAP1"
    },
    "1265": {
      "op": "MSTORE"
    },
    "1266": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3480,
        3493
      ],
      "op": "CHAINID",
      "path": "16"
    },
    "1267": {
      "op": "DUP3"
    },
    "1268": {
      "op": "DUP5"
    },
    "1269": {
      "op": "ADD"
    },
    "1270": {
      "op": "MSTORE"
    },
    "1271": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "1284": {
      "op": "NOT"
    },
    "1285": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1287": {
      "op": "DUP10"
    },
    "1288": {
      "op": "DUP2"
    },
    "1289": {
      "op": "SHL"
    },
    "1290": {
      "op": "DUP3"
    },
    "1291": {
      "op": "AND"
    },
    "1292": {
      "op": "DUP2"
    },
    "1293": {
      "op": "DUP6"
    },
    "1294": {
      "op": "ADD"
    },
    "1295": {
      "op": "MSTORE"
    },
    "1296": {
      "op": "DUP9"
    },
    "1297": {
      "op": "SWAP1"
    },
    "1298": {
      "op": "SHL"
    },
    "1299": {
      "op": "AND"
    },
    "1300": {
      "op": "PUSH1",
      "value": "0x74"
    },
    "1302": {
      "op": "DUP4"
    },
    "1303": {
      "op": "ADD"
    },
    "1304": {
      "op": "MSTORE"
    },
    "1305": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "1307": {
      "op": "DUP3"
    },
    "1308": {
      "op": "ADD"
    },
    "1309": {
      "op": "DUP7"
    },
    "1310": {
      "op": "SWAP1"
    },
    "1311": {
      "op": "MSTORE"
    },
    "1312": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "1314": {
      "op": "DUP1"
    },
    "1315": {
      "op": "DUP4"
    },
    "1316": {
      "op": "ADD"
    },
    "1317": {
      "op": "DUP7"
    },
    "1318": {
      "op": "SWAP1"
    },
    "1319": {
      "op": "MSTORE"
    },
    "1320": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "DUP4",
      "path": "15"
    },
    "1321": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "1322": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "DUP1",
      "path": "15"
    },
    "1323": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "DUP5",
      "path": "15"
    },
    "1324": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "SUB",
      "path": "15"
    },
    "1325": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1326": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "1327": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "ADD",
      "path": "15"
    },
    "1328": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "DUP2",
      "path": "15"
    },
    "1329": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "1330": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "1332": {
      "op": "SWAP1"
    },
    "1333": {
      "op": "SWAP3"
    },
    "1334": {
      "op": "ADD"
    },
    "1335": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "1336": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "SWAP3",
      "path": "15"
    },
    "1337": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        387,
        629
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "1338": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        360,
        643
      ],
      "op": "DUP1",
      "path": "15"
    },
    "1339": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        360,
        643
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "1340": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        360,
        643
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "1341": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        360,
        643
      ],
      "op": "ADD",
      "path": "15"
    },
    "1342": {
      "fn": "BeamerUtils.createRequestId",
      "offset": [
        360,
        643
      ],
      "op": "KECCAK256",
      "path": "15"
    },
    "1343": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3392,
        3409
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1345": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3392,
        3409
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1346": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3656,
        3657
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 11,
      "value": "0x0"
    },
    "1348": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3644
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1349": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3644
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1350": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3644
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1351": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3633
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "1353": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3644
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1355": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3644
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1356": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3644
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1358": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3644
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1359": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3644
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "1360": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3644
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1361": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3392,
        3609
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1362": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3392,
        3609
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1363": {
      "op": "POP"
    },
    "1364": {
      "branch": 36,
      "fn": "FillManager.fillRequest",
      "offset": [
        3628,
        3658
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "1365": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x591"
    },
    "1368": {
      "branch": 36,
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1369": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1371": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1372": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1376": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1378": {
      "op": "SHL"
    },
    "1379": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1380": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1381": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1383": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "1385": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1386": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "ADD",
      "path": "16"
    },
    "1387": {
      "op": "MSTORE"
    },
    "1388": {
      "op": "PUSH1",
      "value": "0xE"
    },
    "1390": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1392": {
      "op": "DUP3"
    },
    "1393": {
      "op": "ADD"
    },
    "1394": {
      "op": "MSTORE"
    },
    "1395": {
      "op": "PUSH14",
      "value": "0x105B1C9958591E48199A5B1B1959"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "1412": {
      "op": "SHL"
    },
    "1413": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1415": {
      "op": "DUP3"
    },
    "1416": {
      "op": "ADD"
    },
    "1417": {
      "op": "MSTORE"
    },
    "1418": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1420": {
      "op": "ADD"
    },
    "1421": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x239"
    },
    "1424": {
      "op": "JUMP"
    },
    "1425": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3620,
        3677
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1426": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3710,
        3728
      ],
      "op": "DUP6",
      "path": "16"
    },
    "1427": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3739,
        3804
      ],
      "op": "PUSH2",
      "path": "16",
      "statement": 12,
      "value": "0x5A7"
    },
    "1430": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1432": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1434": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1436": {
      "op": "SHL"
    },
    "1437": {
      "op": "SUB"
    },
    "1438": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3739,
        3761
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1439": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3739,
        3761
      ],
      "op": "AND",
      "path": "16"
    },
    "1440": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3762,
        3772
      ],
      "op": "CALLER",
      "path": "16"
    },
    "1441": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3774,
        3795
      ],
      "op": "DUP9",
      "path": "16"
    },
    "1442": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3797,
        3803
      ],
      "op": "DUP9",
      "path": "16"
    },
    "1443": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3739,
        3761
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x848"
    },
    "1446": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3739,
        3804
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1447": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3739,
        3804
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1448": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3815,
        3829
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1450": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3842,
        3858
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x5B4"
    },
    "1453": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3857,
        3858
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "1455": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3842,
        3854
      ],
      "op": "NUMBER",
      "path": "16"
    },
    "1456": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3842,
        3858
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xC98"
    },
    "1459": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3842,
        3858
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1460": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3842,
        3858
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1461": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        3879
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 13,
      "value": "0x2"
    },
    "1463": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        3879
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1464": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3905,
        3915
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x3"
    },
    "1466": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3905,
        3915
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1467": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1469": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1470": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x24"
    },
    "1472": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1473": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "ADD",
      "path": "16"
    },
    "1474": {
      "op": "DUP8"
    },
    "1475": {
      "op": "SWAP1"
    },
    "1476": {
      "op": "MSTORE"
    },
    "1477": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3832,
        3859
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1478": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3832,
        3859
      ],
      "op": "BLOCKHASH",
      "path": "16"
    },
    "1479": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1481": {
      "op": "DUP5"
    },
    "1482": {
      "op": "ADD"
    },
    "1483": {
      "op": "DUP2"
    },
    "1484": {
      "op": "SWAP1"
    },
    "1485": {
      "op": "MSTORE"
    },
    "1486": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4015,
        4028
      ],
      "op": "CHAINID",
      "path": "16"
    },
    "1487": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1489": {
      "op": "DUP6"
    },
    "1490": {
      "op": "ADD"
    },
    "1491": {
      "op": "MSTORE"
    },
    "1492": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1494": {
      "op": "DUP5"
    },
    "1495": {
      "op": "ADD"
    },
    "1496": {
      "op": "DUP14"
    },
    "1497": {
      "op": "SWAP1"
    },
    "1498": {
      "op": "MSTORE"
    },
    "1499": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4045,
        4055
      ],
      "op": "CALLER",
      "path": "16"
    },
    "1500": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "1502": {
      "op": "DUP6"
    },
    "1503": {
      "op": "ADD"
    },
    "1504": {
      "op": "MSTORE"
    },
    "1505": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3832,
        3859
      ],
      "op": "SWAP4",
      "path": "16"
    },
    "1506": {
      "op": "POP"
    },
    "1507": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1509": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1511": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1513": {
      "op": "SHL"
    },
    "1514": {
      "op": "SUB"
    },
    "1515": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        3879
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1516": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        3879
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1517": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        3879
      ],
      "op": "AND",
      "path": "16"
    },
    "1518": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        3879
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1519": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        3891
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0xBB5DDB0F"
    },
    "1524": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        3891
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1525": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3905,
        3915
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1526": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3905,
        3915
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1527": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3905,
        3915
      ],
      "op": "AND",
      "path": "16"
    },
    "1528": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3905,
        3915
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1529": {
      "op": "PUSH1",
      "value": "0xC4"
    },
    "1531": {
      "op": "ADD"
    },
    "1532": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1534": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1535": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1536": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1538": {
      "op": "NOT"
    },
    "1539": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1540": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1541": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "SUB",
      "path": "16"
    },
    "1542": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "ADD",
      "path": "16"
    },
    "1543": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1544": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1545": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1546": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1547": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1548": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1550": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1551": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "ADD",
      "path": "16"
    },
    "1552": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1553": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1554": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1556": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1558": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1560": {
      "op": "SHL"
    },
    "1561": {
      "op": "SUB"
    },
    "1562": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "AND",
      "path": "16"
    },
    "1563": {
      "op": "PUSH4",
      "value": "0x14ADC787"
    },
    "1568": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "1570": {
      "op": "SHL"
    },
    "1571": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "OR",
      "path": "16"
    },
    "1572": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1573": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1574": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1577": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1579": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1581": {
      "op": "SHL"
    },
    "1582": {
      "op": "SUB"
    },
    "1583": {
      "op": "NOT"
    },
    "1584": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xE0"
    },
    "1586": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP6",
      "path": "16"
    },
    "1587": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1588": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "SHL",
      "path": "16"
    },
    "1589": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "AND",
      "path": "16"
    },
    "1590": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1591": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1592": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x645"
    },
    "1595": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1596": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1597": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3929,
        4070
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1598": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "1600": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "ADD",
      "path": "16"
    },
    "1601": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xC74"
    },
    "1604": {
      "fn": "FillManager.fillRequest",
      "jump": "i",
      "offset": [
        3870,
        4080
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1605": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1606": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1608": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1610": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1611": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1612": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP4",
      "path": "16"
    },
    "1613": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "SUB",
      "path": "16"
    },
    "1614": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1615": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1617": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP8",
      "path": "16"
    },
    "1618": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1619": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "EXTCODESIZE",
      "path": "16"
    },
    "1620": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "1621": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1622": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "1623": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x65F"
    },
    "1626": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1627": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1629": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1630": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "REVERT",
      "path": "16"
    },
    "1631": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1632": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "POP",
      "path": "16"
    },
    "1633": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "GAS",
      "path": "16"
    },
    "1634": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "CALL",
      "path": "16"
    },
    "1635": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "1636": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1637": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "1638": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x673"
    },
    "1641": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1642": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "1643": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1645": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1646": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "RETURNDATACOPY",
      "path": "16"
    },
    "1647": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "1648": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "1650": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "REVERT",
      "path": "16"
    },
    "1651": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3870,
        4080
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1652": {
      "op": "POP"
    },
    "1653": {
      "op": "POP"
    },
    "1654": {
      "op": "POP"
    },
    "1655": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 14,
      "value": "0x0"
    },
    "1657": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1658": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1659": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1660": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4096
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "1662": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "1664": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1665": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1666": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1667": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1669": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1670": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1671": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1672": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "1673": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4116
      ],
      "op": "DUP5",
      "path": "16"
    },
    "1674": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4116
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1675": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4116
      ],
      "op": "SSTORE",
      "path": "16"
    },
    "1676": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "DUP2",
      "path": "16",
      "statement": 15
    },
    "1677": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1678": {
      "op": "DUP5"
    },
    "1679": {
      "op": "DUP2"
    },
    "1680": {
      "op": "MSTORE"
    },
    "1681": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4261,
        4271
      ],
      "op": "CALLER",
      "path": "16"
    },
    "1682": {
      "op": "SWAP2"
    },
    "1683": {
      "op": "DUP2"
    },
    "1684": {
      "op": "ADD"
    },
    "1685": {
      "op": "SWAP2"
    },
    "1686": {
      "op": "SWAP1"
    },
    "1687": {
      "op": "SWAP2"
    },
    "1688": {
      "op": "MSTORE"
    },
    "1689": {
      "op": "SWAP1"
    },
    "1690": {
      "op": "DUP2"
    },
    "1691": {
      "op": "ADD"
    },
    "1692": {
      "op": "DUP9"
    },
    "1693": {
      "op": "SWAP1"
    },
    "1694": {
      "op": "MSTORE"
    },
    "1695": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1697": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1699": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1701": {
      "op": "SHL"
    },
    "1702": {
      "op": "SUB"
    },
    "1703": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "DUP11",
      "path": "16"
    },
    "1704": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "AND",
      "path": "16"
    },
    "1705": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1706": {
      "op": "POP"
    },
    "1707": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4202,
        4215
      ],
      "op": "DUP11",
      "path": "16"
    },
    "1708": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4202,
        4215
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1709": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "DUP6",
      "path": "16"
    },
    "1710": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4091,
        4107
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1711": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "PUSH32",
      "path": "16",
      "value": "0x2995401B199BC45EA8C8B79C27FB204B270CFB74444D546B1A100935E3443887"
    },
    "1744": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1745": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1747": {
      "op": "ADD"
    },
    "1748": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1750": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1751": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1752": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1753": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "SUB",
      "path": "16"
    },
    "1754": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1755": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4132,
        4301
      ],
      "op": "LOG4",
      "path": "16"
    },
    "1756": {
      "fn": "FillManager.fillRequest",
      "offset": [
        4319,
        4325
      ],
      "op": "SWAP9",
      "path": "16",
      "statement": 16
    },
    "1757": {
      "fn": "FillManager.fillRequest",
      "offset": [
        3090,
        4332
      ],
      "op": "SWAP8",
      "path": "16"
    },
    "1758": {
      "op": "POP"
    },
    "1759": {
      "op": "POP"
    },
    "1760": {
      "op": "POP"
    },
    "1761": {
      "op": "POP"
    },
    "1762": {
      "op": "POP"
    },
    "1763": {
      "op": "POP"
    },
    "1764": {
      "op": "POP"
    },
    "1765": {
      "op": "POP"
    },
    "1766": {
      "fn": "FillManager.fillRequest",
      "jump": "o",
      "offset": [
        3090,
        4332
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1767": {
      "fn": "FillManager.setResolver",
      "offset": [
        2148,
        2315
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1768": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6EF"
    },
    "1771": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7EE"
    },
    "1774": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1775": {
      "fn": "FillManager.setResolver",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1776": {
      "fn": "FillManager.setResolver",
      "offset": [
        2225,
        2235
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 17,
      "value": "0x3"
    },
    "1778": {
      "fn": "FillManager.setResolver",
      "offset": [
        2225,
        2235
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1779": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1781": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1783": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1785": {
      "op": "SHL"
    },
    "1786": {
      "op": "SUB"
    },
    "1787": {
      "fn": "FillManager.setResolver",
      "offset": [
        2225,
        2235
      ],
      "op": "AND",
      "path": "16"
    },
    "1788": {
      "branch": 37,
      "fn": "FillManager.setResolver",
      "offset": [
        2225,
        2249
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "1789": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x73F"
    },
    "1792": {
      "branch": 37,
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "1793": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "1795": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "1796": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1800": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1802": {
      "op": "SHL"
    },
    "1803": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "DUP2",
      "path": "16"
    },
    "1804": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "1805": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1807": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "1809": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "DUP3",
      "path": "16"
    },
    "1810": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "ADD",
      "path": "16"
    },
    "1811": {
      "op": "MSTORE"
    },
    "1812": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "1814": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1816": {
      "op": "DUP3"
    },
    "1817": {
      "op": "ADD"
    },
    "1818": {
      "op": "MSTORE"
    },
    "1819": {
      "op": "PUSH20",
      "value": "0x14995CDBDB1D995C88185B1C9958591E481CD95D"
    },
    "1840": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "1842": {
      "op": "SHL"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1845": {
      "op": "DUP3"
    },
    "1846": {
      "op": "ADD"
    },
    "1847": {
      "op": "MSTORE"
    },
    "1848": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1850": {
      "op": "ADD"
    },
    "1851": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x239"
    },
    "1854": {
      "op": "JUMP"
    },
    "1855": {
      "fn": "FillManager.setResolver",
      "offset": [
        2217,
        2274
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "1856": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2294
      ],
      "op": "PUSH1",
      "path": "16",
      "statement": 18,
      "value": "0x3"
    },
    "1858": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "DUP1",
      "path": "16"
    },
    "1859": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "SLOAD",
      "path": "16"
    },
    "1860": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1862": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1864": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1866": {
      "op": "SHL"
    },
    "1867": {
      "op": "SUB"
    },
    "1868": {
      "op": "NOT"
    },
    "1869": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "AND",
      "path": "16"
    },
    "1870": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1872": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1874": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1876": {
      "op": "SHL"
    },
    "1877": {
      "op": "SUB"
    },
    "1878": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1879": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1880": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "1881": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "AND",
      "path": "16"
    },
    "1882": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1883": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1884": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "1885": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "OR",
      "path": "16"
    },
    "1886": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "1887": {
      "fn": "FillManager.setResolver",
      "offset": [
        2284,
        2308
      ],
      "op": "SSTORE",
      "path": "16"
    },
    "1888": {
      "fn": "FillManager.setResolver",
      "jump": "o",
      "offset": [
        2148,
        2315
      ],
      "op": "JUMP",
      "path": "16"
    },
    "1889": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1890": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x769"
    },
    "1893": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7EE"
    },
    "1896": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1897": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1898": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1895,
        1925
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 19,
      "value": "0x773"
    },
    "1901": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1922,
        1923
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1903": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1895,
        1913
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8A8"
    },
    "1906": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1895,
        1925
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1907": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1895,
        1925
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1908": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1909": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1910": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x77D"
    },
    "1913": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7EE"
    },
    "1916": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1917": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1918": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1920": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1922": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1924": {
      "op": "SHL"
    },
    "1925": {
      "op": "SUB"
    },
    "1926": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2169,
        2191
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 20
    },
    "1927": {
      "branch": 42,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2169,
        2191
      ],
      "op": "AND",
      "path": "0"
    },
    "1928": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7E2"
    },
    "1931": {
      "branch": 42,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1932": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1934": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1935": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1939": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1941": {
      "op": "SHL"
    },
    "1942": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1943": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1944": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1946": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1948": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1949": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "ADD",
      "path": "0"
    },
    "1950": {
      "op": "MSTORE"
    },
    "1951": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1953": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1955": {
      "op": "DUP3"
    },
    "1956": {
      "op": "ADD"
    },
    "1957": {
      "op": "MSTORE"
    },
    "1958": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "1991": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1993": {
      "op": "DUP3"
    },
    "1994": {
      "op": "ADD"
    },
    "1995": {
      "op": "MSTORE"
    },
    "1996": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "2003": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2005": {
      "op": "SHL"
    },
    "2006": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2008": {
      "op": "DUP3"
    },
    "2009": {
      "op": "ADD"
    },
    "2010": {
      "op": "MSTORE"
    },
    "2011": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2013": {
      "op": "ADD"
    },
    "2014": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x239"
    },
    "2017": {
      "op": "JUMP"
    },
    "2018": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2019": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2244,
        2272
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 21,
      "value": "0x7EB"
    },
    "2022": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2263,
        2271
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2023": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2244,
        2262
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8A8"
    },
    "2026": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2244,
        2272
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2027": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2244,
        2272
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2028": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "POP",
      "path": "0"
    },
    "2029": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2030": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1359,
        1489
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2031": {
      "fn": "Ownable.owner",
      "offset": [
        1247,
        1254
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2033": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2034": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2036": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2038": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2040": {
      "op": "SHL"
    },
    "2041": {
      "op": "SUB"
    },
    "2042": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "AND",
      "path": "0"
    },
    "2043": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "7",
      "statement": 22
    },
    "2044": {
      "branch": 43,
      "fn": "Ownable._checkOwner",
      "offset": [
        1422,
        1445
      ],
      "op": "EQ",
      "path": "0",
      "statement": 23
    },
    "2045": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x773"
    },
    "2048": {
      "branch": 43,
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2049": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2051": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2052": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2056": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2058": {
      "op": "SHL"
    },
    "2059": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2060": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2061": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2063": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2065": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2066": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "ADD",
      "path": "0"
    },
    "2067": {
      "op": "DUP2"
    },
    "2068": {
      "op": "SWAP1"
    },
    "2069": {
      "op": "MSTORE"
    },
    "2070": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2072": {
      "op": "DUP3"
    },
    "2073": {
      "op": "ADD"
    },
    "2074": {
      "op": "MSTORE"
    },
    "2075": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "2108": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2110": {
      "op": "DUP3"
    },
    "2111": {
      "op": "ADD"
    },
    "2112": {
      "op": "MSTORE"
    },
    "2113": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2115": {
      "op": "ADD"
    },
    "2116": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x239"
    },
    "2119": {
      "op": "JUMP"
    },
    "2120": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2121": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 24,
      "value": "0x40"
    },
    "2123": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2124": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2125": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2127": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2129": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2131": {
      "op": "SHL"
    },
    "2132": {
      "op": "SUB"
    },
    "2133": {
      "op": "DUP6"
    },
    "2134": {
      "op": "DUP2"
    },
    "2135": {
      "op": "AND"
    },
    "2136": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x24"
    },
    "2138": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2139": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "ADD",
      "path": "5"
    },
    "2140": {
      "op": "MSTORE"
    },
    "2141": {
      "op": "DUP5"
    },
    "2142": {
      "op": "AND"
    },
    "2143": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2145": {
      "op": "DUP3"
    },
    "2146": {
      "op": "ADD"
    },
    "2147": {
      "op": "MSTORE"
    },
    "2148": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2150": {
      "op": "DUP1"
    },
    "2151": {
      "op": "DUP3"
    },
    "2152": {
      "op": "ADD"
    },
    "2153": {
      "op": "DUP5"
    },
    "2154": {
      "op": "SWAP1"
    },
    "2155": {
      "op": "MSTORE"
    },
    "2156": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2157": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2158": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2159": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2160": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SUB",
      "path": "5"
    },
    "2161": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2162": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2163": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "ADD",
      "path": "5"
    },
    "2164": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2165": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2166": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2168": {
      "op": "SWAP1"
    },
    "2169": {
      "op": "SWAP2"
    },
    "2170": {
      "op": "ADD"
    },
    "2171": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2172": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2173": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2174": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2176": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2177": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "ADD",
      "path": "5"
    },
    "2178": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2179": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2180": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2182": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2184": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2186": {
      "op": "SHL"
    },
    "2187": {
      "op": "SUB"
    },
    "2188": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "AND",
      "path": "5"
    },
    "2189": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2194": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2196": {
      "op": "SHL"
    },
    "2197": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "OR",
      "path": "5"
    },
    "2198": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2199": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1139,
        1207
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2200": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1112,
        1208
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x8A2"
    },
    "2203": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1112,
        1208
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2204": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1132,
        1137
      ],
      "op": "DUP6",
      "path": "5"
    },
    "2205": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1132,
        1137
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2206": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1112,
        1131
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x8F8"
    },
    "2209": {
      "fn": "SafeERC20.safeTransferFrom",
      "jump": "i",
      "offset": [
        1112,
        1208
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2210": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1112,
        1208
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2211": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "POP",
      "path": "5"
    },
    "2212": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "POP",
      "path": "5"
    },
    "2213": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "POP",
      "path": "5"
    },
    "2214": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        974,
        1215
      ],
      "op": "POP",
      "path": "5"
    },
    "2215": {
      "fn": "SafeERC20.safeTransferFrom",
      "jump": "o",
      "offset": [
        974,
        1215
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2216": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2433,
        2620
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2217": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2506,
        2522
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2219": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2220": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2221": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2223": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2225": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2227": {
      "op": "SHL"
    },
    "2228": {
      "op": "SUB"
    },
    "2229": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 25
    },
    "2230": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2231": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "AND",
      "path": "0"
    },
    "2232": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2234": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2236": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2238": {
      "op": "SHL"
    },
    "2239": {
      "op": "SUB"
    },
    "2240": {
      "op": "NOT"
    },
    "2241": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2242": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "AND",
      "path": "0"
    },
    "2243": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2244": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "OR",
      "path": "0"
    },
    "2245": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2246": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2247": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 26,
      "value": "0x40"
    },
    "2249": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2250": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2251": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2252": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2253": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "AND",
      "path": "0"
    },
    "2254": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2255": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2256": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2257": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "2290": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2291": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2506,
        2522
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2292": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "LOG3",
      "path": "0"
    },
    "2293": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2496,
        2620
      ],
      "op": "POP",
      "path": "0"
    },
    "2294": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2433,
        2620
      ],
      "op": "POP",
      "path": "0"
    },
    "2295": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        2433,
        2620
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2296": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3747,
        4453
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2297": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4166,
        4189
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2299": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x94D"
    },
    "2302": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4220,
        4224
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2303": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2305": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2306": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2307": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2309": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "ADD",
      "path": "5"
    },
    "2310": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2312": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2313": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2314": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2316": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2317": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2318": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2320": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "ADD",
      "path": "5"
    },
    "2321": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH32",
      "path": "5",
      "value": "0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
    },
    "2354": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2355": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2356": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "POP",
      "path": "5"
    },
    "2357": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4200,
        4205
      ],
      "op": "DUP6",
      "path": "5"
    },
    "2358": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2360": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2362": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2364": {
      "op": "SHL"
    },
    "2365": {
      "op": "SUB"
    },
    "2366": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4219
      ],
      "op": "AND",
      "path": "5"
    },
    "2367": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4219
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9CF"
    },
    "2370": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4219
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2371": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2372": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2373": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2374": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xFFFFFFFF"
    },
    "2379": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "AND",
      "path": "5"
    },
    "2380": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        4192,
        4261
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2381": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4192,
        4261
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2382": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4275,
        4292
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2383": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4275,
        4292
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2384": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4166,
        4261
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2385": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4166,
        4261
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2386": {
      "op": "POP"
    },
    "2387": {
      "branch": 44,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4275,
        4296
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2388": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4271,
        4447
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9CA"
    },
    "2391": {
      "branch": 44,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4271,
        4447
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2392": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4370,
        4380
      ],
      "op": "DUP1",
      "path": "5",
      "statement": 27
    },
    "2393": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2394": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2396": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "ADD",
      "path": "5"
    },
    "2397": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2398": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2399": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2400": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "ADD",
      "path": "5"
    },
    "2401": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2402": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x96B"
    },
    "2405": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2406": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2407": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xCBD"
    },
    "2410": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        4359,
        4389
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2411": {
      "branch": 45,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4359,
        4389
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2412": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9CA"
    },
    "2415": {
      "branch": 45,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2416": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2418": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2419": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2423": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2425": {
      "op": "SHL"
    },
    "2426": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2427": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2428": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2430": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2432": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2433": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "ADD",
      "path": "5"
    },
    "2434": {
      "op": "MSTORE"
    },
    "2435": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "2437": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2439": {
      "op": "DUP3"
    },
    "2440": {
      "op": "ADD"
    },
    "2441": {
      "op": "MSTORE"
    },
    "2442": {
      "op": "PUSH32",
      "value": "0x5361666545524332303A204552433230206F7065726174696F6E20646964206E"
    },
    "2475": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2477": {
      "op": "DUP3"
    },
    "2478": {
      "op": "ADD"
    },
    "2479": {
      "op": "MSTORE"
    },
    "2480": {
      "op": "PUSH10",
      "value": "0x1BDD081CDD58D8D95959"
    },
    "2491": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "2493": {
      "op": "SHL"
    },
    "2494": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2496": {
      "op": "DUP3"
    },
    "2497": {
      "op": "ADD"
    },
    "2498": {
      "op": "MSTORE"
    },
    "2499": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2501": {
      "op": "ADD"
    },
    "2502": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x239"
    },
    "2505": {
      "op": "JUMP"
    },
    "2506": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        4351,
        4436
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2507": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3817,
        4453
      ],
      "op": "POP",
      "path": "5"
    },
    "2508": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3747,
        4453
      ],
      "op": "POP",
      "path": "5"
    },
    "2509": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3747,
        4453
      ],
      "op": "POP",
      "path": "5"
    },
    "2510": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "o",
      "offset": [
        3747,
        4453
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2511": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2512": {
      "fn": "Address.functionCall",
      "offset": [
        3994,
        4006
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "2514": {
      "fn": "Address.functionCall",
      "offset": [
        4025,
        4077
      ],
      "op": "PUSH2",
      "path": "6",
      "statement": 28,
      "value": "0x9DE"
    },
    "2517": {
      "fn": "Address.functionCall",
      "offset": [
        4047,
        4053
      ],
      "op": "DUP5",
      "path": "6"
    },
    "2518": {
      "fn": "Address.functionCall",
      "offset": [
        4055,
        4059
      ],
      "op": "DUP5",
      "path": "6"
    },
    "2519": {
      "fn": "Address.functionCall",
      "offset": [
        4061,
        4062
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2521": {
      "fn": "Address.functionCall",
      "offset": [
        4064,
        4076
      ],
      "op": "DUP6",
      "path": "6"
    },
    "2522": {
      "fn": "Address.functionCall",
      "offset": [
        4025,
        4046
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x9E8"
    },
    "2525": {
      "fn": "Address.functionCall",
      "jump": "i",
      "offset": [
        4025,
        4077
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2526": {
      "fn": "Address.functionCall",
      "offset": [
        4025,
        4077
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2527": {
      "fn": "Address.functionCall",
      "offset": [
        4018,
        4077
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2528": {
      "fn": "Address.functionCall",
      "offset": [
        4018,
        4077
      ],
      "op": "POP",
      "path": "6"
    },
    "2529": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2530": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "SWAP4",
      "path": "6"
    },
    "2531": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "SWAP3",
      "path": "6"
    },
    "2532": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "POP",
      "path": "6"
    },
    "2533": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "POP",
      "path": "6"
    },
    "2534": {
      "fn": "Address.functionCall",
      "offset": [
        3861,
        4084
      ],
      "op": "POP",
      "path": "6"
    },
    "2535": {
      "fn": "Address.functionCall",
      "jump": "o",
      "offset": [
        3861,
        4084
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2536": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4948,
        5447
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2537": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5113,
        5125
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "2539": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5170,
        5175
      ],
      "op": "DUP3",
      "path": "6",
      "statement": 29
    },
    "2540": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5145,
        5166
      ],
      "op": "SELFBALANCE",
      "path": "6"
    },
    "2541": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5145,
        5175
      ],
      "op": "LT",
      "path": "6"
    },
    "2542": {
      "branch": 38,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5145,
        5175
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "2543": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xA49"
    },
    "2546": {
      "branch": 38,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2547": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2549": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2550": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2554": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2556": {
      "op": "SHL"
    },
    "2557": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2558": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2559": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2561": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "2563": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2564": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "ADD",
      "path": "6"
    },
    "2565": {
      "op": "MSTORE"
    },
    "2566": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "2568": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2570": {
      "op": "DUP3"
    },
    "2571": {
      "op": "ADD"
    },
    "2572": {
      "op": "MSTORE"
    },
    "2573": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "2606": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2608": {
      "op": "DUP3"
    },
    "2609": {
      "op": "ADD"
    },
    "2610": {
      "op": "MSTORE"
    },
    "2611": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "2618": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "2620": {
      "op": "SHL"
    },
    "2621": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2623": {
      "op": "DUP3"
    },
    "2624": {
      "op": "ADD"
    },
    "2625": {
      "op": "MSTORE"
    },
    "2626": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2628": {
      "op": "ADD"
    },
    "2629": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x239"
    },
    "2632": {
      "op": "JUMP"
    },
    "2633": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5137,
        5218
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2634": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2636": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2638": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2640": {
      "op": "SHL"
    },
    "2641": {
      "op": "SUB"
    },
    "2642": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "DUP6",
      "path": "6",
      "statement": 30
    },
    "2643": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "AND",
      "path": "6"
    },
    "2644": {
      "fn": "Address.isContract",
      "offset": [
        1465,
        1484
      ],
      "op": "EXTCODESIZE",
      "path": "6"
    },
    "2645": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH2",
      "path": "6",
      "statement": 31,
      "value": "0xAA0"
    },
    "2648": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2649": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2651": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2652": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2656": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2658": {
      "op": "SHL"
    },
    "2659": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2660": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2661": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2663": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "2665": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2666": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "ADD",
      "path": "6"
    },
    "2667": {
      "op": "MSTORE"
    },
    "2668": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "2670": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2672": {
      "op": "DUP3"
    },
    "2673": {
      "op": "ADD"
    },
    "2674": {
      "op": "MSTORE"
    },
    "2675": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "2708": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2710": {
      "op": "DUP3"
    },
    "2711": {
      "op": "ADD"
    },
    "2712": {
      "op": "MSTORE"
    },
    "2713": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2715": {
      "op": "ADD"
    },
    "2716": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x239"
    },
    "2719": {
      "op": "JUMP"
    },
    "2720": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5228,
        5288
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2721": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5300,
        5312
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2723": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5314,
        5337
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2724": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5347
      ],
      "op": "DUP7",
      "path": "6"
    },
    "2725": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2727": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2729": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2731": {
      "op": "SHL"
    },
    "2732": {
      "op": "SUB"
    },
    "2733": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5352
      ],
      "op": "AND",
      "path": "6"
    },
    "2734": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5360,
        5365
      ],
      "op": "DUP6",
      "path": "6"
    },
    "2735": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5367,
        5371
      ],
      "op": "DUP8",
      "path": "6"
    },
    "2736": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2738": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2739": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xABC"
    },
    "2742": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2743": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2744": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xCDF"
    },
    "2747": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2748": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2749": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2751": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2753": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2754": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2755": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP4",
      "path": "6"
    },
    "2756": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SUB",
      "path": "6"
    },
    "2757": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2758": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP6",
      "path": "6"
    },
    "2759": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP8",
      "path": "6"
    },
    "2760": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "GAS",
      "path": "6"
    },
    "2761": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "CALL",
      "path": "6"
    },
    "2762": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP3",
      "path": "6"
    },
    "2763": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "6"
    },
    "2764": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "6"
    },
    "2765": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "6"
    },
    "2766": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "6"
    },
    "2767": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2768": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2770": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2771": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "EQ",
      "path": "6"
    },
    "2772": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xAF9"
    },
    "2775": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2776": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2778": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2779": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2780": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "6"
    },
    "2781": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x1F"
    },
    "2783": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "NOT",
      "path": "6"
    },
    "2784": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x3F"
    },
    "2786": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "6"
    },
    "2787": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "ADD",
      "path": "6"
    },
    "2788": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "AND",
      "path": "6"
    },
    "2789": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2790": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "ADD",
      "path": "6"
    },
    "2791": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2793": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2794": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "6"
    },
    "2795": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2796": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2797": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATASIZE",
      "path": "6"
    },
    "2798": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2800": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2802": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "DUP5",
      "path": "6"
    },
    "2803": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "ADD",
      "path": "6"
    },
    "2804": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "RETURNDATACOPY",
      "path": "6"
    },
    "2805": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xAFE"
    },
    "2808": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2809": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2810": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "2812": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2813": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "6"
    },
    "2814": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2815": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5341,
        5372
      ],
      "op": "POP",
      "path": "6"
    },
    "2816": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2817": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "POP",
      "path": "6"
    },
    "2818": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2819": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5372
      ],
      "op": "POP",
      "path": "6"
    },
    "2820": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5389,
        5440
      ],
      "op": "PUSH2",
      "path": "6",
      "statement": 32,
      "value": "0xB0E"
    },
    "2823": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5406,
        5413
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2824": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5415,
        5425
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2825": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5427,
        5439
      ],
      "op": "DUP7",
      "path": "6"
    },
    "2826": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5389,
        5405
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xB19"
    },
    "2829": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5389,
        5440
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2830": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5389,
        5440
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2831": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5382,
        5440
      ],
      "op": "SWAP8",
      "path": "6"
    },
    "2832": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4948,
        5447
      ],
      "op": "SWAP7",
      "path": "6"
    },
    "2833": {
      "op": "POP"
    },
    "2834": {
      "op": "POP"
    },
    "2835": {
      "op": "POP"
    },
    "2836": {
      "op": "POP"
    },
    "2837": {
      "op": "POP"
    },
    "2838": {
      "op": "POP"
    },
    "2839": {
      "op": "POP"
    },
    "2840": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4948,
        5447
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2841": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7561,
        8303
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2842": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7707,
        7719
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "2844": {
      "branch": 39,
      "fn": "Address.verifyCallResult",
      "offset": [
        7735,
        7742
      ],
      "op": "DUP4",
      "path": "6"
    },
    "2845": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8297
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "2846": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8297
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xB28"
    },
    "2849": {
      "branch": 39,
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8297
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2850": {
      "op": "POP"
    },
    "2851": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7765,
        7775
      ],
      "op": "DUP2",
      "path": "6",
      "statement": 33
    },
    "2852": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7758,
        7775
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x9E1"
    },
    "2855": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7758,
        7775
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2856": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7731,
        8297
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2857": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2858": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7893
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2859": {
      "branch": 40,
      "fn": "Address.verifyCallResult",
      "offset": [
        7876,
        7897
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "2860": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8287
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xB38"
    },
    "2863": {
      "branch": 40,
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8287
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2864": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8120,
        8130
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2865": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8114,
        8131
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2866": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8180,
        8195
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2867": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8167,
        8177
      ],
      "op": "DUP5",
      "path": "6"
    },
    "2868": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8163,
        8165
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2870": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8159,
        8178
      ],
      "op": "ADD",
      "path": "6"
    },
    "2871": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8152,
        8196
      ],
      "op": "REVERT",
      "path": "6"
    },
    "2872": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7872,
        8287
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2873": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8259,
        8271
      ],
      "op": "DUP2",
      "path": "6",
      "statement": 34
    },
    "2874": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2876": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2877": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2881": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2883": {
      "op": "SHL"
    },
    "2884": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2885": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2886": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "2888": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "ADD",
      "path": "6"
    },
    "2889": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x239"
    },
    "2892": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2893": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2894": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8252,
        8272
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xCFB"
    },
    "2897": {
      "fn": "Address.verifyCallResult",
      "jump": "i",
      "offset": [
        8252,
        8272
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2898": {
      "op": "JUMPDEST"
    },
    "2899": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2901": {
      "op": "DUP1"
    },
    "2902": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2904": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2906": {
      "op": "DUP5"
    },
    "2907": {
      "op": "DUP7"
    },
    "2908": {
      "op": "SUB"
    },
    "2909": {
      "op": "SLT"
    },
    "2910": {
      "op": "ISZERO"
    },
    "2911": {
      "op": "PUSH2",
      "value": "0xB67"
    },
    "2914": {
      "op": "JUMPI"
    },
    "2915": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2917": {
      "op": "DUP1"
    },
    "2918": {
      "op": "REVERT"
    },
    "2919": {
      "op": "JUMPDEST"
    },
    "2920": {
      "op": "POP"
    },
    "2921": {
      "op": "POP"
    },
    "2922": {
      "op": "DUP2"
    },
    "2923": {
      "op": "CALLDATALOAD"
    },
    "2924": {
      "op": "SWAP4"
    },
    "2925": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2927": {
      "op": "DUP4"
    },
    "2928": {
      "op": "ADD"
    },
    "2929": {
      "op": "CALLDATALOAD"
    },
    "2930": {
      "op": "SWAP4"
    },
    "2931": {
      "op": "POP"
    },
    "2932": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2934": {
      "op": "SWAP1"
    },
    "2935": {
      "op": "SWAP3"
    },
    "2936": {
      "op": "ADD"
    },
    "2937": {
      "op": "CALLDATALOAD"
    },
    "2938": {
      "op": "SWAP2"
    },
    "2939": {
      "op": "SWAP1"
    },
    "2940": {
      "op": "POP"
    },
    "2941": {
      "jump": "o",
      "op": "JUMP"
    },
    "2942": {
      "op": "JUMPDEST"
    },
    "2943": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2945": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2947": {
      "op": "DUP3"
    },
    "2948": {
      "op": "DUP5"
    },
    "2949": {
      "op": "SUB"
    },
    "2950": {
      "op": "SLT"
    },
    "2951": {
      "op": "ISZERO"
    },
    "2952": {
      "op": "PUSH2",
      "value": "0xB90"
    },
    "2955": {
      "op": "JUMPI"
    },
    "2956": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2958": {
      "op": "DUP1"
    },
    "2959": {
      "op": "REVERT"
    },
    "2960": {
      "op": "JUMPDEST"
    },
    "2961": {
      "op": "POP"
    },
    "2962": {
      "op": "CALLDATALOAD"
    },
    "2963": {
      "op": "SWAP2"
    },
    "2964": {
      "op": "SWAP1"
    },
    "2965": {
      "op": "POP"
    },
    "2966": {
      "jump": "o",
      "op": "JUMP"
    },
    "2967": {
      "op": "JUMPDEST"
    },
    "2968": {
      "op": "DUP1"
    },
    "2969": {
      "op": "CALLDATALOAD"
    },
    "2970": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2972": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2974": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2976": {
      "op": "SHL"
    },
    "2977": {
      "op": "SUB"
    },
    "2978": {
      "op": "DUP2"
    },
    "2979": {
      "op": "AND"
    },
    "2980": {
      "op": "DUP2"
    },
    "2981": {
      "op": "EQ"
    },
    "2982": {
      "op": "PUSH2",
      "value": "0xBAE"
    },
    "2985": {
      "op": "JUMPI"
    },
    "2986": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2988": {
      "op": "DUP1"
    },
    "2989": {
      "op": "REVERT"
    },
    "2990": {
      "op": "JUMPDEST"
    },
    "2991": {
      "op": "SWAP2"
    },
    "2992": {
      "op": "SWAP1"
    },
    "2993": {
      "op": "POP"
    },
    "2994": {
      "jump": "o",
      "op": "JUMP"
    },
    "2995": {
      "op": "JUMPDEST"
    },
    "2996": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2998": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3000": {
      "op": "DUP3"
    },
    "3001": {
      "op": "DUP5"
    },
    "3002": {
      "op": "SUB"
    },
    "3003": {
      "op": "SLT"
    },
    "3004": {
      "op": "ISZERO"
    },
    "3005": {
      "op": "PUSH2",
      "value": "0xBC5"
    },
    "3008": {
      "op": "JUMPI"
    },
    "3009": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3011": {
      "op": "DUP1"
    },
    "3012": {
      "op": "REVERT"
    },
    "3013": {
      "op": "JUMPDEST"
    },
    "3014": {
      "op": "PUSH2",
      "value": "0x9E1"
    },
    "3017": {
      "op": "DUP3"
    },
    "3018": {
      "op": "PUSH2",
      "value": "0xB97"
    },
    "3021": {
      "jump": "i",
      "op": "JUMP"
    },
    "3022": {
      "op": "JUMPDEST"
    },
    "3023": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3025": {
      "op": "DUP1"
    },
    "3026": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3028": {
      "op": "DUP1"
    },
    "3029": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3031": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3033": {
      "op": "DUP7"
    },
    "3034": {
      "op": "DUP9"
    },
    "3035": {
      "op": "SUB"
    },
    "3036": {
      "op": "SLT"
    },
    "3037": {
      "op": "ISZERO"
    },
    "3038": {
      "op": "PUSH2",
      "value": "0xBE6"
    },
    "3041": {
      "op": "JUMPI"
    },
    "3042": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3044": {
      "op": "DUP1"
    },
    "3045": {
      "op": "REVERT"
    },
    "3046": {
      "op": "JUMPDEST"
    },
    "3047": {
      "op": "DUP6"
    },
    "3048": {
      "op": "CALLDATALOAD"
    },
    "3049": {
      "op": "SWAP5"
    },
    "3050": {
      "op": "POP"
    },
    "3051": {
      "op": "PUSH2",
      "value": "0xBF6"
    },
    "3054": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3056": {
      "op": "DUP8"
    },
    "3057": {
      "op": "ADD"
    },
    "3058": {
      "op": "PUSH2",
      "value": "0xB97"
    },
    "3061": {
      "jump": "i",
      "op": "JUMP"
    },
    "3062": {
      "op": "JUMPDEST"
    },
    "3063": {
      "op": "SWAP4"
    },
    "3064": {
      "op": "POP"
    },
    "3065": {
      "op": "PUSH2",
      "value": "0xC04"
    },
    "3068": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3070": {
      "op": "DUP8"
    },
    "3071": {
      "op": "ADD"
    },
    "3072": {
      "op": "PUSH2",
      "value": "0xB97"
    },
    "3075": {
      "jump": "i",
      "op": "JUMP"
    },
    "3076": {
      "op": "JUMPDEST"
    },
    "3077": {
      "op": "SWAP5"
    },
    "3078": {
      "op": "SWAP8"
    },
    "3079": {
      "op": "SWAP4"
    },
    "3080": {
      "op": "SWAP7"
    },
    "3081": {
      "op": "POP"
    },
    "3082": {
      "op": "SWAP4"
    },
    "3083": {
      "op": "SWAP5"
    },
    "3084": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3086": {
      "op": "DUP2"
    },
    "3087": {
      "op": "ADD"
    },
    "3088": {
      "op": "CALLDATALOAD"
    },
    "3089": {
      "op": "SWAP5"
    },
    "3090": {
      "op": "POP"
    },
    "3091": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3093": {
      "op": "ADD"
    },
    "3094": {
      "op": "CALLDATALOAD"
    },
    "3095": {
      "op": "SWAP3"
    },
    "3096": {
      "op": "SWAP2"
    },
    "3097": {
      "op": "POP"
    },
    "3098": {
      "op": "POP"
    },
    "3099": {
      "jump": "o",
      "op": "JUMP"
    },
    "3100": {
      "op": "JUMPDEST"
    },
    "3101": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3103": {
      "op": "JUMPDEST"
    },
    "3104": {
      "op": "DUP4"
    },
    "3105": {
      "op": "DUP2"
    },
    "3106": {
      "op": "LT"
    },
    "3107": {
      "op": "ISZERO"
    },
    "3108": {
      "op": "PUSH2",
      "value": "0xC37"
    },
    "3111": {
      "op": "JUMPI"
    },
    "3112": {
      "op": "DUP2"
    },
    "3113": {
      "op": "DUP2"
    },
    "3114": {
      "op": "ADD"
    },
    "3115": {
      "op": "MLOAD"
    },
    "3116": {
      "op": "DUP4"
    },
    "3117": {
      "op": "DUP3"
    },
    "3118": {
      "op": "ADD"
    },
    "3119": {
      "op": "MSTORE"
    },
    "3120": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3122": {
      "op": "ADD"
    },
    "3123": {
      "op": "PUSH2",
      "value": "0xC1F"
    },
    "3126": {
      "op": "JUMP"
    },
    "3127": {
      "op": "JUMPDEST"
    },
    "3128": {
      "op": "DUP4"
    },
    "3129": {
      "op": "DUP2"
    },
    "3130": {
      "op": "GT"
    },
    "3131": {
      "op": "ISZERO"
    },
    "3132": {
      "op": "PUSH2",
      "value": "0x8A2"
    },
    "3135": {
      "op": "JUMPI"
    },
    "3136": {
      "op": "POP"
    },
    "3137": {
      "op": "POP"
    },
    "3138": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3140": {
      "op": "SWAP2"
    },
    "3141": {
      "op": "ADD"
    },
    "3142": {
      "op": "MSTORE"
    },
    "3143": {
      "jump": "o",
      "op": "JUMP"
    },
    "3144": {
      "op": "JUMPDEST"
    },
    "3145": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3147": {
      "op": "DUP2"
    },
    "3148": {
      "op": "MLOAD"
    },
    "3149": {
      "op": "DUP1"
    },
    "3150": {
      "op": "DUP5"
    },
    "3151": {
      "op": "MSTORE"
    },
    "3152": {
      "op": "PUSH2",
      "value": "0xC60"
    },
    "3155": {
      "op": "DUP2"
    },
    "3156": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3158": {
      "op": "DUP7"
    },
    "3159": {
      "op": "ADD"
    },
    "3160": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3162": {
      "op": "DUP7"
    },
    "3163": {
      "op": "ADD"
    },
    "3164": {
      "op": "PUSH2",
      "value": "0xC1C"
    },
    "3167": {
      "jump": "i",
      "op": "JUMP"
    },
    "3168": {
      "op": "JUMPDEST"
    },
    "3169": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3171": {
      "op": "ADD"
    },
    "3172": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3174": {
      "op": "NOT"
    },
    "3175": {
      "op": "AND"
    },
    "3176": {
      "op": "SWAP3"
    },
    "3177": {
      "op": "SWAP1"
    },
    "3178": {
      "op": "SWAP3"
    },
    "3179": {
      "op": "ADD"
    },
    "3180": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3182": {
      "op": "ADD"
    },
    "3183": {
      "op": "SWAP3"
    },
    "3184": {
      "op": "SWAP2"
    },
    "3185": {
      "op": "POP"
    },
    "3186": {
      "op": "POP"
    },
    "3187": {
      "jump": "o",
      "op": "JUMP"
    },
    "3188": {
      "op": "JUMPDEST"
    },
    "3189": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3191": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3193": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3195": {
      "op": "SHL"
    },
    "3196": {
      "op": "SUB"
    },
    "3197": {
      "op": "DUP4"
    },
    "3198": {
      "op": "AND"
    },
    "3199": {
      "op": "DUP2"
    },
    "3200": {
      "op": "MSTORE"
    },
    "3201": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3203": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3205": {
      "op": "DUP3"
    },
    "3206": {
      "op": "ADD"
    },
    "3207": {
      "op": "DUP2"
    },
    "3208": {
      "op": "SWAP1"
    },
    "3209": {
      "op": "MSTORE"
    },
    "3210": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3212": {
      "op": "SWAP1"
    },
    "3213": {
      "op": "PUSH2",
      "value": "0x9DE"
    },
    "3216": {
      "op": "SWAP1"
    },
    "3217": {
      "op": "DUP4"
    },
    "3218": {
      "op": "ADD"
    },
    "3219": {
      "op": "DUP5"
    },
    "3220": {
      "op": "PUSH2",
      "value": "0xC48"
    },
    "3223": {
      "jump": "i",
      "op": "JUMP"
    },
    "3224": {
      "op": "JUMPDEST"
    },
    "3225": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3227": {
      "op": "DUP3"
    },
    "3228": {
      "op": "DUP3"
    },
    "3229": {
      "op": "LT"
    },
    "3230": {
      "op": "ISZERO"
    },
    "3231": {
      "op": "PUSH2",
      "value": "0xCB8"
    },
    "3234": {
      "op": "JUMPI"
    },
    "3235": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3240": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3242": {
      "op": "SHL"
    },
    "3243": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3245": {
      "op": "MSTORE"
    },
    "3246": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3248": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3250": {
      "op": "MSTORE"
    },
    "3251": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3253": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3255": {
      "op": "REVERT"
    },
    "3256": {
      "op": "JUMPDEST"
    },
    "3257": {
      "op": "POP"
    },
    "3258": {
      "op": "SUB"
    },
    "3259": {
      "op": "SWAP1"
    },
    "3260": {
      "jump": "o",
      "op": "JUMP"
    },
    "3261": {
      "op": "JUMPDEST"
    },
    "3262": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3264": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3266": {
      "op": "DUP3"
    },
    "3267": {
      "op": "DUP5"
    },
    "3268": {
      "op": "SUB"
    },
    "3269": {
      "op": "SLT"
    },
    "3270": {
      "op": "ISZERO"
    },
    "3271": {
      "op": "PUSH2",
      "value": "0xCCF"
    },
    "3274": {
      "op": "JUMPI"
    },
    "3275": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3277": {
      "op": "DUP1"
    },
    "3278": {
      "op": "REVERT"
    },
    "3279": {
      "op": "JUMPDEST"
    },
    "3280": {
      "op": "DUP2"
    },
    "3281": {
      "op": "MLOAD"
    },
    "3282": {
      "op": "DUP1"
    },
    "3283": {
      "op": "ISZERO"
    },
    "3284": {
      "op": "ISZERO"
    },
    "3285": {
      "op": "DUP2"
    },
    "3286": {
      "op": "EQ"
    },
    "3287": {
      "op": "PUSH2",
      "value": "0x9E1"
    },
    "3290": {
      "op": "JUMPI"
    },
    "3291": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3293": {
      "op": "DUP1"
    },
    "3294": {
      "op": "REVERT"
    },
    "3295": {
      "op": "JUMPDEST"
    },
    "3296": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3298": {
      "op": "DUP3"
    },
    "3299": {
      "op": "MLOAD"
    },
    "3300": {
      "op": "PUSH2",
      "value": "0xCF1"
    },
    "3303": {
      "op": "DUP2"
    },
    "3304": {
      "op": "DUP5"
    },
    "3305": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3307": {
      "op": "DUP8"
    },
    "3308": {
      "op": "ADD"
    },
    "3309": {
      "op": "PUSH2",
      "value": "0xC1C"
    },
    "3312": {
      "jump": "i",
      "op": "JUMP"
    },
    "3313": {
      "op": "JUMPDEST"
    },
    "3314": {
      "op": "SWAP2"
    },
    "3315": {
      "op": "SWAP1"
    },
    "3316": {
      "op": "SWAP2"
    },
    "3317": {
      "op": "ADD"
    },
    "3318": {
      "op": "SWAP3"
    },
    "3319": {
      "op": "SWAP2"
    },
    "3320": {
      "op": "POP"
    },
    "3321": {
      "op": "POP"
    },
    "3322": {
      "jump": "o",
      "op": "JUMP"
    },
    "3323": {
      "op": "JUMPDEST"
    },
    "3324": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3326": {
      "op": "DUP2"
    },
    "3327": {
      "op": "MSTORE"
    },
    "3328": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3330": {
      "op": "PUSH2",
      "value": "0x9E1"
    },
    "3333": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3335": {
      "op": "DUP4"
    },
    "3336": {
      "op": "ADD"
    },
    "3337": {
      "op": "DUP5"
    },
    "3338": {
      "op": "PUSH2",
      "value": "0xC48"
    },
    "3341": {
      "jump": "i",
      "op": "JUMP"
    }
  },
  "sha1": "f921bd345a692aa6bd78f4273889a63e44cd5d4a",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC20/IERC20.sol\";\nimport \"OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/access/Ownable.sol\";\nimport \"./LpWhitelist.sol\";\nimport \"../interfaces/IMessenger.sol\";\nimport \"./BeamerUtils.sol\";\nimport \"./Resolver.sol\";\n\n/// The fill manager.\n///\n/// This contract is responsible for keeping track of filled requests. In addition to allowing\n/// agents to (eventually) prove that they filled requests, it also allows anyone to invalidate\n/// a claim that a request was filled.\n///\n/// It is the only contract that agents need to interact with on the target chain.\ncontract FillManager is Ownable, LpWhitelist {\n    using SafeERC20 for IERC20;\n\n    /// Emitted when a request has been filled.\n    ///\n    /// .. seealso:: :sol:func:`fillRequest`\n    event RequestFilled(\n        bytes32 indexed requestId,\n        bytes32 fillId,\n        uint256 indexed sourceChainId,\n        address indexed targetTokenAddress,\n        address filler,\n        uint256 amount\n    );\n\n    /// Emitted when a fill has been invalidated.\n    ///\n    /// .. seealso:: :sol:func:`invalidateFill`\n    event FillInvalidated(bytes32 indexed requestId, bytes32 indexed fillId);\n\n    // The messenger to send messages to L1\n    //\n    // It is used to send proofs to L1. The specific implementation of the\n    // :sol:interface:`IMessenger` interface is chain-dependent.\n    IMessenger public messenger;\n\n    /// The L1 :sol:contract:`Resolver` contract to be used for L1 resolution.\n    address public l1Resolver;\n\n    /// Maps request IDs to fill IDs.\n    mapping(bytes32 => bytes32) public fills;\n\n    /// Constructor.\n    ///\n    /// @param _messenger The messenger.\n    constructor(address _messenger) {\n        messenger = IMessenger(_messenger);\n    }\n\n    /// Set the resolver's address\n    ///\n    /// Can only ever be set once. Before it is set, no fills or invalidations are possible\n    ///\n    /// @param _l1Resolver The L1 resolver address\n    function setResolver(address _l1Resolver) public onlyOwner {\n        require(l1Resolver == address(0), \"Resolver already set\");\n        l1Resolver = _l1Resolver;\n    }\n\n    /// Fill the specified request.\n    ///\n    /// The caller must have approved at least ``amount`` tokens for :sol:contract:`FillManager`\n    /// with the ERC20 token contract at ``targetTokenAddress``. The tokens will be immediately\n    /// sent to ``targetReceiverAddress`` and a fill proof will be generated, which can later\n    /// be used to trigger L1 resolution, if needed.\n    ///\n    /// @param sourceChainId The source chain ID.\n    /// @param targetTokenAddress Address of the token contract on the target chain.\n    /// @param targetReceiverAddress Recipient address on the target chain.\n    /// @param amount Amount of tokens to transfer. Does not include fees.\n    /// @param nonce The nonce used to create the request ID.\n    /// @return The fill ID.\n    function fillRequest(\n        uint256 sourceChainId,\n        address targetTokenAddress,\n        address targetReceiverAddress,\n        uint256 amount,\n        uint256 nonce\n    ) external onlyWhitelist returns (bytes32) {\n        require(l1Resolver != address(0), \"Resolver address not set\");\n        bytes32 requestId = BeamerUtils.createRequestId(\n            sourceChainId,\n            block.chainid,\n            targetTokenAddress,\n            targetReceiverAddress,\n            amount,\n            nonce\n        );\n\n        require(fills[requestId] == bytes32(0), \"Already filled\");\n\n        IERC20 token = IERC20(targetTokenAddress);\n        token.safeTransferFrom(msg.sender, targetReceiverAddress, amount);\n\n        bytes32 fillId = blockhash(block.number - 1);\n\n        messenger.sendMessage(\n            l1Resolver,\n            abi.encodeCall(\n                Resolver.resolve,\n                (requestId, fillId, block.chainid, sourceChainId, msg.sender)\n            )\n        );\n\n        fills[requestId] = fillId;\n\n        emit RequestFilled(\n            requestId,\n            fillId,\n            sourceChainId,\n            targetTokenAddress,\n            msg.sender,\n            amount\n        );\n\n        return fillId;\n    }\n\n    /// Invalidate the specified fill.\n    ///\n    /// In cases that a claim has been made on the source chain, but without a corresponding fill\n    /// actually happening on the target chain, anyone can call this function to mark the fill\n    /// as invalid. This is typically followed by a challenge game on the source chain, which\n    /// the dishonest claimer is guaranteed to lose as soon as the information about the invalid\n    /// fill (so called \"non-fill proof\") is propagated to the source chain via L1 resolution.\n    ///\n    /// @param requestId The request ID.\n    /// @param fillId The fill ID.\n    /// @param sourceChainId The source chain ID.\n    function invalidateFill(\n        bytes32 requestId,\n        bytes32 fillId,\n        uint256 sourceChainId\n    ) external {\n        require(l1Resolver != address(0), \"Resolver address not set\");\n        require(fills[requestId] != fillId, \"Fill valid\");\n        messenger.sendMessage(\n            l1Resolver,\n            abi.encodeCall(\n                Resolver.resolve,\n                (requestId, fillId, block.chainid, sourceChainId, address(0))\n            )\n        );\n        emit FillInvalidated(requestId, fillId);\n    }\n}\n",
  "sourceMap": "782:4745:16:-:0;;;1865:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:7;936:18:0;:32::i;:::-;1907:9:16;:34;;-1:-1:-1;;;;;;1907:34:16;-1:-1:-1;;;;;1907:34:16;;;;;;;;;;782:4745;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;14:290:28:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:28;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:28:o;:::-;782:4745:16;;;;;;",
  "sourcePath": "contracts/contracts/FillManager.sol",
  "type": "contract"
}